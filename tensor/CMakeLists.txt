#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
add_library(tensor INTERFACE)
set_property(TARGET tensor PROPERTY CXX_STANDARD 20)
target_include_directories(tensor INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
target_link_libraries(tensor
 INTERFACE
  base
  multidim_array
)

find_package(BLAS)
find_package(LAPACK)
if (BLAS_FOUND AND LAPACK_FOUND)
  option(TATOOINE_USE_BLAS_AND_LAPACK "Use BLAS and LAPACK" ON)
  set(TATOOINE_USE_BLAS_AND_LAPACK ${TATOOINE_USE_BLAS_AND_LAPACK} PARENT_SCOPE)
  if(TATOOINE_USE_BLAS_AND_LAPACK)
    target_link_libraries(tensor INTERFACE BLAS::BLAS LAPACK::LAPACK)
    #target_compile_options(lapackpp INTERFACE -Wno-unused-parameter)
    target_compile_definitions(tensor INTERFACE LAPACK_COMPLEX_CPP)
    set(TATOOINE_BLAS_AND_LAPACK_AVAILABLE 1)
  else()
    set(TATOOINE_BLAS_AND_LAPACK_AVAILABLE 0)
  endif()
else()
    set(TATOOINE_BLAS_AND_LAPACK_AVAILABLE 0)
endif()
target_compile_definitions(tensor INTERFACE
TATOOINE_BLAS_AND_LAPACK_AVAILABLE=${TATOOINE_BLAS_AND_LAPACK_AVAILABLE})
set(TATOOINE_BLAS_AND_LAPACK_AVAILABLE ${TATOOINE_BLAS_AND_LAPACK_AVAILABLE} PARENT_SCOPE)
#-------------------------------------------------------------------------------
# Get tensor properties for tatooineConfig.cmake
# include directories
get_target_property(TENSOR_INCLUDE_DIRECTORIES tensor INTERFACE_INCLUDE_DIRECTORIES)
string(REPLACE "$" ";" TENSOR_INCLUDE_DIRECTORIES ${TENSOR_INCLUDE_DIRECTORIES})
foreach(INCLUDE_DIRECTORY ${TENSOR_INCLUDE_DIRECTORIES})
  set(BUILD_INTERFACE_REGEX "\<BUILD_INTERFACE:(.*)\>")
  if(INCLUDE_DIRECTORY MATCHES ${BUILD_INTERFACE_REGEX})
    string(REGEX REPLACE "(\<BUILD_INTERFACE:)" "" INCLUDE_DIRECTORY ${INCLUDE_DIRECTORY})
    string(LENGTH ${INCLUDE_DIRECTORY} len)
    math(EXPR len ${len}-1)
    string(SUBSTRING ${INCLUDE_DIRECTORY} 0 ${len} INCLUDE_DIRECTORY)
    list(APPEND FILTERED_TENSOR_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORY})
  elseif(NOT (INCLUDE_DIRECTORY MATCHES "\<.*_INTERFACE:.*\>"))
    list(APPEND FILTERED_TENSOR_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORY})
  endif()
endforeach()
set(TENSOR_INCLUDE_DIRECTORIES ${FILTERED_TENSOR_INCLUDE_DIRECTORIES} PARENT_SCOPE)

# link libraries
get_target_property(TENSOR_LINK_LIBRARIES tensor INTERFACE_LINK_LIBRARIES)
foreach(LINK_LIBRARY ${TENSOR_LINK_LIBRARIES})
  if(${LINK_LIBRARY} MATCHES "base")
    list(APPEND FILTERED_TENSOR_LINK_LIBRARIES "tatooine::base")
  elseif(${LINK_LIBRARY} MATCHES "multidim_array")
    list(APPEND FILTERED_TENSOR_LINK_LIBRARIES "tatooine::multidim_array")
  else()
    list(APPEND FILTERED_TENSOR_LINK_LIBRARIES ${LINK_LIBRARY})
  endif()
endforeach()
set(TENSOR_LINK_LIBRARIES ${FILTERED_TENSOR_LINK_LIBRARIES} PARENT_SCOPE)

# compile features
get_target_property(TENSOR_COMPILE_FEATURES tensor INTERFACE_COMPILE_FEATURES)
set(TENSOR_COMPILE_FEATURES ${TENSOR_COMPILE_FEATURES} PARENT_SCOPE)

# compile options
get_target_property(TENSOR_COMPILE_OPTIONS tensor INTERFACE_COMPILE_OPTIONS)
set(TENSOR_COMPILE_OPTIONS ${TENSOR_COMPILE_OPTIONS} PARENT_SCOPE)

# compile definitions
get_target_property(TENSOR_COMPILE_DEFINITIONS tensor INTERFACE_COMPILE_DEFINITIONS)
set(TENSOR_COMPILE_DEFINITIONS ${TENSOR_COMPILE_DEFINITIONS} PARENT_SCOPE)
#-------------------------------------------------------------------------------
if(TATOOINE_USE_BLAS_AND_LAPACK)
  ## Get blaspp properties for tatooineConfig.cmake
  ## include directories
  #get_target_property(BLASPP_INCLUDE_DIRECTORIES blaspp INCLUDE_DIRECTORIES)
  #string(REPLACE "$" ";" BLASPP_INCLUDE_DIRECTORIES ${BLASPP_INCLUDE_DIRECTORIES})
  #foreach(INCLUDE_DIRECTORY ${BLASPP_INCLUDE_DIRECTORIES})
  #  set(BUILD_INTERFACE_REGEX "\<BUILD_INTERFACE:(.*)\>")
  #  if(INCLUDE_DIRECTORY MATCHES ${BUILD_INTERFACE_REGEX})
  #    string(REGEX REPLACE "(\<BUILD_INTERFACE:)" "" INCLUDE_DIRECTORY ${INCLUDE_DIRECTORY})
  #    string(LENGTH ${INCLUDE_DIRECTORY} len)
  #    math(EXPR len ${len}-1)
  #    string(SUBSTRING ${INCLUDE_DIRECTORY} 0 ${len} INCLUDE_DIRECTORY)
  #    list(APPEND FILTERED_BLASPP_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORY})
  #  elseif(NOT (INCLUDE_DIRECTORY MATCHES "\<.*_INTERFACE:.*\>"))
  #    list(APPEND FILTERED_BLASPP_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORY})
  #  endif()
  #endforeach()
  #set(BLASPP_INCLUDE_DIRECTORIES ${FILTERED_BLASPP_INCLUDE_DIRECTORIES} PARENT_SCOPE)
  #
  ## link libraries
  #get_target_property(BLASPP_LINK_LIBRARIES blaspp LINK_LIBRARIES)
  #set(BLASPP_LINK_LIBRARIES ${BLASPP_LINK_LIBRARIES} PARENT_SCOPE)
  #
  ## compile features
  #get_target_property(BLASPP_COMPILE_FEATURES blaspp COMPILE_FEATURES)
  #set(BLASPP_COMPILE_FEATURES ${BLASPP_COMPILE_FEATURES} PARENT_SCOPE)
  #
  ## compile options
  #get_target_property(BLASPP_COMPILE_OPTIONS blaspp COMPILE_OPTIONS)
  ##-------------------------------------------------------------------------------
  #get_target_property(LAPACKPP_INCLUDE_DIRECTORIES lapackpp INCLUDE_DIRECTORIES)
  #string(REPLACE "$" ";" LAPACKPP_INCLUDE_DIRECTORIES ${LAPACKPP_INCLUDE_DIRECTORIES})
  #foreach(INCLUDE_DIRECTORY ${LAPACKPP_INCLUDE_DIRECTORIES})
  #  set(BUILD_INTERFACE_REGEX "\<BUILD_INTERFACE:(.*)\>")
  #  if(INCLUDE_DIRECTORY MATCHES ${BUILD_INTERFACE_REGEX})
  #    string(REGEX REPLACE "(\<BUILD_INTERFACE:)" "" INCLUDE_DIRECTORY ${INCLUDE_DIRECTORY})
  #    string(LENGTH ${INCLUDE_DIRECTORY} len)
  #    math(EXPR len ${len}-1)
  #    string(SUBSTRING ${INCLUDE_DIRECTORY} 0 ${len} INCLUDE_DIRECTORY)
  #    list(APPEND FILTERED_LAPACKPP_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORY})
  #  elseif(NOT (INCLUDE_DIRECTORY MATCHES "\<.*_INTERFACE:.*\>"))
  #    list(APPEND FILTERED_LAPACKPP_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORY})
  #  endif()
  #endforeach()
  #set(LAPACKPP_INCLUDE_DIRECTORIES ${FILTERED_LAPACKPP_INCLUDE_DIRECTORIES} PARENT_SCOPE)
  #
  ## link libraries
  #get_target_property(LAPACKPP_LINK_LIBRARIES lapackpp LINK_LIBRARIES)
  #set(LAPACKPP_LINK_LIBRARIES ${LAPACKPP_LINK_LIBRARIES} PARENT_SCOPE)
  #
  ## compile features
  #get_target_property(LAPACKPP_COMPILE_FEATURES lapackpp COMPILE_FEATURES)
  #set(LAPACKPP_COMPILE_FEATURES ${LAPACKPP_COMPILE_FEATURES} PARENT_SCOPE)
  #
  ## compile options
  #get_target_property(LAPACKPP_COMPILE_OPTIONS lapackpp COMPILE_OPTIONS)
endif()
