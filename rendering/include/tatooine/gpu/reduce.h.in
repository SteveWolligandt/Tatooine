#ifndef TATOOINE_GPU_REDUCE_H
#define TATOOINE_GPU_REDUCE_H
//==============================================================================
#include <tatooine/gl/glwrapper.h>
#include <tatooine/gl/shader.h>
#include <tatooine/gl/shaderstoragebuffer.h>
#include <tatooine/gl/texture.h>

#include <boost/range/numeric.hpp>
#include <chrono>
#include <memory>
#include <map>
#include <sstream>
#include <thread>
//==============================================================================
namespace tatooine::gpu {
//==============================================================================
template <typename T>
struct reduce_tex_shader;

template <>
struct reduce_tex_shader<gl::tex2r32f> : gl::shader {
  //----------------------------------------------------------------------------
  private:
  //----------------------------------------------------------------------------
  static constexpr std::string_view comp_shader_path =
      "@TATOOINE_GPU_REDUCE_TEX2R32F_COMP_SHADER_PATH@";
  static constexpr std::string_view glsl_version = "#version 430\n";
  inline static std::map<std::pair<unsigned int, unsigned int>,
                  std::unique_ptr<reduce_tex_shader>>
              compiled_shaders;
  static auto workgroup_layout(std::stringstream& shadersourcestream,
                               unsigned int       workgroup_size_x,
                               unsigned int       workgroup_size_y) {
    shadersourcestream << "layout(local_size_x = " << workgroup_size_x
                       << ", local_size_y = " << workgroup_size_y << ") in;\n";
  }

  public:
  static reduce_tex_shader& get(unsigned int workgroup_size_x,
                                unsigned int workgroup_size_y) {
    if (auto it = compiled_shaders.find(
            std::pair{workgroup_size_x, workgroup_size_y});
        it == end(compiled_shaders)) {
      return *compiled_shaders
                  .insert(std::pair{
                      std::pair{workgroup_size_x, workgroup_size_y},
                      std::unique_ptr<reduce_tex_shader<gl::tex2r32f>>{
                          new reduce_tex_shader{workgroup_size_x,
                                                workgroup_size_y}}})
                  .first->second;
    } else {
      return *it->second;
    }
  }

  //----------------------------------------------------------------------------
  virtual ~reduce_tex_shader() = default;

  //----------------------------------------------------------------------------
 private:
  reduce_tex_shader(unsigned int workgroup_size_x,
                    unsigned int workgroup_size_y) {
    const auto max_invocations =
        static_cast<size_t>(gl::max_compute_work_group_invocations());
    if (workgroup_size_x * workgroup_size_y > max_invocations) {
      workgroup_size_x = workgroup_size_y =
          size_t(1) << static_cast<unsigned int>(
              floor(log2(sqrt(max_invocations))));
      std::cerr << "a compute shader workgroup cannot have more than "
                << max_invocations << " threads. Using layout "
                << workgroup_size_x << " x " << workgroup_size_y << " \n";
    }

    std::stringstream shadersourcestream;
    shadersourcestream << glsl_version;
    workgroup_layout(shadersourcestream, workgroup_size_x, workgroup_size_y);
    std::ifstream f{std::string{comp_shader_path}};
    if (f.is_open()) {
      shadersourcestream << f.rdbuf();
      f.close();
    } else {
      throw std::runtime_error{"could not open file: " +
                               std::string{comp_shader_path}};
    }
    add_stage<gl::computeshader>(shadersourcestream.str(),
                                    gl::shaderstageparser::SOURCE);
    create();
  }
  //----------------------------------------------------------------------------
 public:
  void set_resolution(GLuint w, GLuint h) {
    set_uniform("data_tex_resolution", w, h);
  }
};
//==============================================================================
template <typename T>
struct reduce_buffer_shader;
template <>
struct reduce_buffer_shader<gl::shaderstoragebuffer<float>>
    : gl::shader {
  static constexpr std::string_view comp_shader_path =
      "@TATOOINE_GPU_REDUCE_SHADERSTORAGE_COMP_SHADER_PATH@";
  inline static std::map<unsigned int, std::unique_ptr<reduce_buffer_shader>>
                                    compiled_shaders;
  static constexpr std::string_view glsl_version = "#version 430\n";
  static auto workgroup_layout(std::stringstream& shadersourcestream,
                               size_t             x) {
    shadersourcestream << "layout(local_size_x = " << x << ") in;\n";
  }
  static reduce_buffer_shader& get(unsigned int workgroup_size) {
    if (auto it = compiled_shaders.find(workgroup_size);
        it == end(compiled_shaders)) {
      return *compiled_shaders
                  .insert(
                      std::pair{workgroup_size,
                                std::unique_ptr<reduce_buffer_shader<
                                    gl::shaderstoragebuffer<float>>>{
                                    new reduce_buffer_shader{workgroup_size}}})
                  .first->second;
    } else {
      return *it->second;
    }
  }
  //----------------------------------------------------------------------------
  virtual ~reduce_buffer_shader() = default;
  //----------------------------------------------------------------------------
 private:
  reduce_buffer_shader(size_t workgroup_size) {
    const auto max_invocations =
        static_cast<size_t>(gl::max_compute_work_group_invocations());
    if (workgroup_size > max_invocations) {
      workgroup_size =
          size_t(1) << static_cast<unsigned int>(floor(log2(max_invocations)));
      std::cerr << "a compute shader workgroup cannot have more than "
                << max_invocations << " threads. Using layout "
                << workgroup_size << " \n";
    }

    std::stringstream shadersourcestream;
    shadersourcestream << glsl_version;
    workgroup_layout(shadersourcestream, workgroup_size);
    std::ifstream f{std::string{comp_shader_path}};
    if (f.is_open()) {
      shadersourcestream << f.rdbuf();
      f.close();
    } else {
      throw std::runtime_error{"could not open file: " +
                               std::string{comp_shader_path}};
    }
    add_stage<gl::computeshader>(shadersourcestream.str(),
                                    gl::shaderstageparser::SOURCE);
    create();
  }
  //----------------------------------------------------------------------------
 public:
  void set_data_size(GLuint size) { set_uniform("data_size", size); }
};
//==============================================================================
inline float reduce(const gl::shaderstoragebuffer<float>& in_buffer,
                    const size_t           workgroup_size);
//==============================================================================
inline float reduce(const gl::tex2r32f& in_buffer,
                    const size_t           workgroup_size_x,
                    const size_t           workgroup_size_y) {
  auto& shader = reduce_tex_shader<gl::tex2r32f>::get(workgroup_size_x,
                                                         workgroup_size_y);
  const size_t res_x            = in_buffer.width();
  const size_t res_y            = in_buffer.height();
  const size_t num_workgroups_x =
      res_x / workgroup_size_x + (res_x % workgroup_size_x > 0 ? 1 : 0);
  const size_t num_workgroups_y =
      res_y / workgroup_size_y + (res_y % workgroup_size_y > 0 ? 1 : 0);
  shader.set_resolution(res_x, res_y);
  gl::shaderstoragebuffer<float> out_buffer(num_workgroups_x *
                                               num_workgroups_y);
  out_buffer.bind(0);
  in_buffer.bind_image_texture(0);
  shader.bind();
  gl::dispatch_compute(num_workgroups_x, num_workgroups_y, 1);
  if (num_workgroups_x * num_workgroups_y > 1) {
    gl::shader_storage_barrier();
    return reduce(out_buffer, workgroup_size_x * workgroup_size_y);
  } else {
    return out_buffer[0];
  }
}
//==============================================================================
inline float reduce(const gl::shaderstoragebuffer<float>& in_buffer,
                    const size_t           workgroup_size) {
  auto& shader = reduce_buffer_shader<gl::shaderstoragebuffer<float>>::get(
      workgroup_size);
  size_t       size           = in_buffer.size();
  const size_t num_workgroups =
      size / workgroup_size + (size % workgroup_size > 0 ? 1 : 0);
  shader.bind();
  shader.set_data_size(size);
  in_buffer.bind(0);
  gl::shaderstoragebuffer<float> out_buffer(num_workgroups);
  out_buffer.bind(1);
  gl::dispatch_compute(num_workgroups, 1, 1);
  if (num_workgroups > 1) {
    gl::shader_storage_barrier();
    return reduce(out_buffer, workgroup_size);
  } else {
    return out_buffer[0];
  }
}
//==============================================================================
}  // namespace tatooine::gpu
//==============================================================================
#endif
