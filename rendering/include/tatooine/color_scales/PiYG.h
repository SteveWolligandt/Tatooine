#ifndef TATOOINE_COLOR_SCALES_PIYG_H
#define TATOOINE_COLOR_SCALES_PIYG_H
//==============================================================================
#include <tatooine/concepts.h>
#include <tatooine/vec.h>

#include <memory>
//==============================================================================
namespace tatooine::color_scales {
//==============================================================================
template <floating_point Real>
struct PiYG {
  using real_type  = Real;
  using this_type  = PiYG<Real>;
  using color_type = vec<Real, 3>;
  static constexpr std::size_t num_samples() { return 17; }
  //==============================================================================
 private:
  std::unique_ptr<color_type[]> m_data;

 public:
  auto data_container() -> color_type* { return m_data; }
  auto data_container() const -> color_type const* { return m_data; }
  auto data() -> color_type* { return m_data.get(); }
  auto data() const -> color_type const* { return m_data.get(); }
  //==============================================================================
  PiYG()
      : m_data{new color_type[]{
            {0.556863, 0.0039220000000000001, 0.32156899999999999},
            {0.692195, 0.067896999999999999, 0.42737399999999998},
            {0.797539, 0.197847, 0.53917700000000002},
            {0.85905399999999998, 0.42422100000000001, 0.65974600000000005},
            {0.90857399999999999, 0.59261799999999998, 0.77031899999999998},
            {0.95155699999999999, 0.73633199999999999, 0.866205},
            {0.98108399999999996, 0.83967700000000001, 0.91787799999999997},
            {0.98292999999999997, 0.913802, 0.94955800000000001},
            {0.96731999999999996, 0.96847399999999995, 0.96562899999999996},
            {0.92549000000000003, 0.96355199999999996, 0.86966600000000005},
            {0.852441, 0.93925400000000003, 0.73602500000000004},
            {0.73925399999999997, 0.890042, 0.55394100000000002},
            {0.60323000000000004, 0.80553600000000003, 0.38223800000000002},
            {0.46728199999999998, 0.71141900000000002, 0.23521700000000001},
            {0.344252, 0.608074, 0.15647800000000001},
            {0.24060000000000001, 0.49826999999999999, 0.116494},
            {0.15294099999999999, 0.39215699999999998, 0.098039000000000001}}} {
  }
  //----------------------------------------------------------------------------
  auto sample(real_type t) const {
    if (t <= 0) {
      return m_data[0];
    }
    if (t >= 1) {
      return m_data[(num_samples() - 1)];
    }
    t *= num_samples() - 1;
    auto const i = static_cast<std::size_t>(std::floor(t));
    t            = t - i;
    return m_data[i] * (1 - t) + m_data[i + 1] * t;
  }
  auto operator()(real_type const t) const { return sample(t); }
};
//==============================================================================
PiYG()->PiYG<real_number>;
//==============================================================================
}  // namespace tatooine::color_scales
//==============================================================================
#endif

