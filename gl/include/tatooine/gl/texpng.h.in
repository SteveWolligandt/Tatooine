#ifndef TATOOINE_GL_TEX_PNG_H
#define TATOOINE_GL_TEX_PNG_H
#if TATOOINE_PNG_AVAILABLE
//==============================================================================
#include <tatooine/gl/texcomponents.h>

#include <cmath>
#include <png++/png.hpp>
//==============================================================================
namespace tatooine::gl {
//==============================================================================
constexpr bool has_png_support() { return @TATOOINE_PNG_AVAILABLE@; }
//------------------------------------------------------------------------------
template <typename ValueType, typename tex_t>
struct tex_png;
//==============================================================================
template <arithmetic ValueType>
struct tex_png<ValueType, R> {
  static constexpr std::size_t num_components = R::num_components;
  using png_t                                 = png::image<png::rgb_pixel>;
  static constexpr auto load_pixel            = [](std::vector<ValueType>& data,
                                        png_t& image, std::size_t x,
                                        std::size_t y) {
    y = image.get_height() - 1 - y;
    data.push_back(static_cast<ValueType>(image[y][x].red));
    data.push_back(static_cast<ValueType>(image[y][x].green));
    data.push_back(static_cast<ValueType>(image[y][x].blue));
  };
  static constexpr auto save_pixel = [](std::vector<ValueType>& data,
                                        png_t& image, std::size_t x,
                                        std::size_t y, std::size_t idx) {
    if constexpr (is_floating_point<ValueType>) {
      if (std::isnan(data[idx])) {
        image[image.get_height() - 1 - y][x].red =
            image[image.get_height() - 1 - y][x].green =
                image[image.get_height() - 1 - y][x].blue =
                    static_cast<unsigned char>(0);
      } else {
        image[image.get_height() - 1 - y][x].red =
            image[image.get_height() - 1 - y][x].green =
                image[image.get_height() - 1 - y][x].blue =
                    static_cast<unsigned char>(std::min(1.0f, data[idx]) *
                                               255.0f);
      }
    } else {
      image[image.get_height() - 1 - y][x].red =
          image[image.get_height() - 1 - y][x].green =
              image[image.get_height() - 1 - y][x].blue =
                  static_cast<unsigned char>(data[idx]);
    }
  };
};
//==============================================================================
template <arithmetic ValueType>
struct tex_png<ValueType, RG> {
  static constexpr std::size_t num_components = RG::num_components;
  using png_t                                 = png::image<png::rgb_pixel>;

  static constexpr auto save_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y, std::size_t idx) {
        if constexpr (is_floating_point<ValueType>) {
          if (std::isnan(data[idx](0))) {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(std::min(1.0f, data[idx](0)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](1))) {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(std::min(1.0f, data[idx](1)) *
                                           255.0f);
          }
          image[image.get_height() - 1 - y][x].blue =
              static_cast<unsigned char>(0);
        } else {
          image[image.get_height() - 1 - y][x].red =
              static_cast<unsigned char>(data[idx](0));
          image[image.get_height() - 1 - y][x].green =
              static_cast<unsigned char>(data[idx](1));
          image[image.get_height() - 1 - y][x].blue =
              static_cast<unsigned char>(0);
        }
      };
  static constexpr auto load_pixel =
      [](std::vector<vec<ValueType, 2>>& /*data*/, png_t& /*image*/,
         std::size_t /*x*/, std::size_t /*y*/) {};
};

//==============================================================================
template <arithmetic ValueType>
struct tex_png<ValueType, RGB> {
  static constexpr std::size_t num_components = RGB::num_components;
  using png_t                                 = png::image<png::rgb_pixel>;
  static constexpr auto load_pixel = [](std::vector<vec<ValueType, 3>>& data,
                                        png_t& image, std::size_t x,
                                        std::size_t y) {
    y = image.get_height() - 1 - y;
    data.push_back(vec{static_cast<ValueType>(image[y][x].red),
                       static_cast<ValueType>(image[y][x].green),
                       static_cast<ValueType>(image[y][x].blue)});
  };
  static constexpr auto save_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y, std::size_t idx) {
        if constexpr (is_floating_point<ValueType>) {
          if (std::isnan(data[idx](0))) {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(std::min(1.0f, data[idx](0)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](1))) {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(std::min(1.0f, data[idx](1)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](2))) {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(std::min(1.0f, data[idx](2)) *
                                           255.0f);
          }
        } else {
          image[image.get_height() - 1 - y][x].red =
              static_cast<unsigned char>(data[idx](0));
          image[image.get_height() - 1 - y][x].green =
              static_cast<unsigned char>(data[idx](1));
          image[image.get_height() - 1 - y][x].blue =
              static_cast<unsigned char>(data[idx](2));
        }
      };
};

//==============================================================================
template <arithmetic ValueType>
struct tex_png<ValueType, BGR> {
  static constexpr std::size_t num_components = BGR::num_components;
  using png_t                                 = png::image<png::rgb_pixel>;
  static constexpr auto load_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y) {
        y = image.get_height() - 1 - y;
        data.push_back(vec{static_cast<ValueType>(image[y][x].blue),
                           static_cast<ValueType>(image[y][x].green),
                           static_cast<ValueType>(image[y][x].red)});
      };
  static constexpr auto save_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y, std::size_t idx) {
        if constexpr (is_floating_point<ValueType>) {
          if (std::isnan(data[idx](0))) {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(std::min(1.0f, data[idx](0)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](1))) {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(std::min(1.0f, data[idx](1)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](2))) {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(std::min(1.0f, data[idx](2)) *
                                           255.0f);
          }
        } else {
          image[image.get_height() - 1 - y][x].blue =
              static_cast<unsigned char>(data[idx](0));
          image[image.get_height() - 1 - y][x].green =
              static_cast<unsigned char>(data[idx](1));
          image[image.get_height() - 1 - y][x].red =
              static_cast<unsigned char>(data[idx](2));
        }
      };
};

//==============================================================================
template <arithmetic ValueType>
struct tex_png<ValueType, RGBA> {
  static constexpr std::size_t num_components = RGBA::num_components;
  using png_t                                 = png::image<png::rgba_pixel>;
  static constexpr auto load_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y) {
        y = image.get_height() - 1 - y;
        data.push_back(vec{static_cast<ValueType>(image[y][x].red),
                           static_cast<ValueType>(image[y][x].green),
                           static_cast<ValueType>(image[y][x].blue),
                           static_cast<ValueType>(image[y][x].alpha)});
      };
  static constexpr auto save_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y, std::size_t idx) {
        if constexpr (is_floating_point<ValueType>) {
          if (std::isnan(data[idx](0))) {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(std::min(1.0f, data[idx](0)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](1))) {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(std::min(1.0f, data[idx](1)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](2))) {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(std::min(1.0f, data[idx](2)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](3))) {
            image[image.get_height() - 1 - y][x].alpha =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].alpha =
                static_cast<unsigned char>(std::min(1.0f, data[idx](3)) *
                                           255.0f);
          }
        } else {
          image[image.get_height() - 1 - y][x].red =
              static_cast<unsigned char>(data[idx](0));
          image[image.get_height() - 1 - y][x].green =
              static_cast<unsigned char>(data[idx](1));
          image[image.get_height() - 1 - y][x].blue =
              static_cast<unsigned char>(data[idx](2));
          image[image.get_height() - 1 - y][x].alpha =
              static_cast<unsigned char>(data[idx](3));
        }
      };
};

//==============================================================================
template <arithmetic ValueType>
struct tex_png<ValueType, BGRA> {
  static constexpr std::size_t num_components = BGRA::num_components;
  using png_t                                 = png::image<png::rgba_pixel>;
  static constexpr auto load_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y) {
        y = image.get_height() - 1 - y;
        data.push_back(vec{static_cast<ValueType>(image[y][x].blue),
                           static_cast<ValueType>(image[y][x].green),
                           static_cast<ValueType>(image[y][x].red),
                           static_cast<ValueType>(image[y][x].alpha)});
      };
  static constexpr auto save_pixel =
      [](std::vector<vec<ValueType, num_components>>& data, png_t& image,
         std::size_t x, std::size_t y, std::size_t idx) {
        if constexpr (is_floating_point<ValueType>) {
          if (std::isnan(data[idx](0))) {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].blue =
                static_cast<unsigned char>(std::min(1.0f, data[idx](0)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](1))) {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].green =
                static_cast<unsigned char>(std::min(1.0f, data[idx](1)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](2))) {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].red =
                static_cast<unsigned char>(std::min(1.0f, data[idx](2)) *
                                           255.0f);
          }
          if (std::isnan(data[idx](3))) {
            image[image.get_height() - 1 - y][x].alpha =
                static_cast<unsigned char>(0);
          } else {
            image[image.get_height() - 1 - y][x].alpha =
                static_cast<unsigned char>(std::min(1.0f, data[idx](3)) *
                                           255.0f);
          }
        } else {
          image[image.get_height() - 1 - y][x].blue =
              static_cast<unsigned char>(data[idx](0));
          image[image.get_height() - 1 - y][x].green =
              static_cast<unsigned char>(data[idx](1));
          image[image.get_height() - 1 - y][x].red =
              static_cast<unsigned char>(data[idx](2));
          image[image.get_height() - 1 - y][x].alpha =
              static_cast<unsigned char>(data[idx](3));
        }
      };
};
//#endif
//==============================================================================
}  // namespace tatooine::gl
//==============================================================================
#endif
#endif
