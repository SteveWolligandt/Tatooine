# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.21)
find_package(OpenMP REQUIRED COMPONENTS CXX)
find_package(Boost REQUIRED)
set(TATOOINE_USE_BLAS_AND_LAPACK @TATOOINE_USE_BLAS_AND_LAPACK@)
set(TATOOINE_CDT_AVAILABLE @TATOOINE_CDT_AVAILABLE@)
set(TATOOINE_FLANN_AVAILABLE @TATOOINE_FLANN_AVAILABLE@)
set(TATOOINE_CGAL_AVAILABLE @TATOOINE_CGAL_AVAILABLE@)
set(TATOOINE_USE_INSTALLED_CGAL @TATOOINE_USE_INSTALLED_CGAL@)
set(TATOOINE_GL_AVAILABLE @TATOOINE_GL_AVAILABLE@)
set(TATOOINE_BLAS_AND_LAPACK_AVAILABLE @TATOOINE_BLAS_AND_LAPACK_AVAILABLE@)
set(TATOOINE_STD_FILESYSTEM_AVAILABLE @TATOOINE_STD_FILESYSTEM_AVAILABLE@)
if (TATOOINE_GL_AVAILABLE) 
  if("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
    find_package(OpenGL)
  elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    find_package(OpenGL COMPONENTS OpenGL EGL)
  endif()
endif()
if (TATOOINE_BLAS_AND_LAPACK_AVAILABLE) 
  find_package(BLAS REQUIRED)
  find_package(LAPACK REQUIRED)
endif()
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
set(targets tatooine::base tatooine::geometry tatooine::multidim_array tatooine::preprocessor tatooine::fields tatooine::tensor)
if (TATOOINE_USE_BLAS_AND_LAPACK)
  list(APPEND targets BLAS::BLAS LAPACK::LAPACK)
endif()
if (TATOOINE_USE_CDT)
  list(APPEND targets tatooine::CDT)
endif()
foreach(_expectedTarget ${targets})
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Create imported target tatooine::geometry
add_library(tatooine::geometry STATIC IMPORTED)
if (TATOOINE_CGAL_AVAILABLE)
  if (TATOOINE_USE_INSTALLED_CGAL)
    find_package(CGAL QUIET)
  else()
    list(PREPEND CMAKE_MODULE_PATH "@CMAKE_SOURCE_DIR@/geometry/cmake/modules/")
  endif ()
endif()

set_target_properties(tatooine::geometry PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "@GEOMETRY_COMPILE_DEFINITIONS@"
  INTERFACE_INCLUDE_DIRECTORIES "@GEOMETRY_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@GEOMETRY_LINK_LIBRARIES@"
)

if (TATOOINE_CDT_AVAILABLE)
  # Create imported target tatooine::CDT
  add_library(tatooine::CDT SHARED IMPORTED)

  set_target_properties(tatooine::CDT PROPERTIES
    INTERFACE_COMPILE_DEFINITIONS "\$<\$<BOOL:ON>:CDT_USE_BOOST>;\$<\$<BOOL:ON>:CDT_USE_AS_COMPILED_LIBRARY>"
    INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_BINARY_DIR@/geometry/external/CDT/CDT;@CMAKE_SOURCE_DIR@/geometry/external/CDT/CDT/include;@CMAKE_SOURCE_DIR@/geometry/external/CDT/CDT/extras"
    INTERFACE_LINK_LIBRARIES "Boost::boost"
    INTERFACE_SOURCES "@CMAKE_BINARY_DIR@/geometry/external/CDT/CDT/cdt_export.h"
  )
endif()
# Import target "tatooine::geometry" for configuration "Release"
set_property(TARGET tatooine::geometry APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(tatooine::geometry PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/geometry/libgeometry.a"
  )

# Create imported target tatooine::base
add_library(tatooine::base INTERFACE IMPORTED)

set_target_properties(tatooine::base PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "@BASE_COMPILE_DEFINITIONS@"
  INTERFACE_COMPILE_OPTIONS "@BASE_COMPILE_OPTIONS@"
  INTERFACE_INCLUDE_DIRECTORIES "@BASE_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@BASE_LINK_LIBRARIES@"
)

# Create imported target tatooine::multidim_array
add_library(tatooine::multidim_array INTERFACE IMPORTED)

set_target_properties(tatooine::multidim_array PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/multidim_array/include"
  INTERFACE_LINK_LIBRARIES "tatooine::base"
)
set_target_properties(tatooine::multidim_array PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@MULTIDIM_ARRAY_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@MULTIDIM_ARRAY_LINK_LIBRARIES@"
)

# Create imported target tatooine::fields
add_library(tatooine::fields INTERFACE IMPORTED)

#set_target_properties(tatooine::fields PROPERTIES
#  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/fields/include"
#  INTERFACE_LINK_LIBRARIES "tatooine::tensor;tatooine::geometry"
#)
set_target_properties(tatooine::fields PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@FIELDS_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@FIELDS_LINK_LIBRARIES@"
)

# Create imported target tatooine::preprocessor
add_library(tatooine::preprocessor INTERFACE IMPORTED)

set_target_properties(tatooine::preprocessor PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/preprocessor/include;@CMAKE_BINARY_DIR@/preprocessor/include"
)

# Create imported target tatooine::tensor
add_library(tatooine::tensor INTERFACE IMPORTED)

#set_target_properties(tatooine::tensor PROPERTIES
#  INTERFACE_COMPILE_DEFINITIONS "LAPACK_COMPLEX_CPP"
#  INTERFACE_COMPILE_FEATURES "cxx_std_20"
#  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/tensor/include"
#  INTERFACE_LINK_LIBRARIES "tatooine::base;tatooine::multidim_array"
#)

set_target_properties(tatooine::tensor PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "@TENSOR_COMPILE_DEFINITIONS@"
  #INTERFACE_COMPILE_OPTIONS "@TENSOR_COMPILE_OPTIONS@"
  #INTERFACE_COMPILE_FEATURES "@TENSOR_COMPILE_FEATURES@"
  INTERFACE_INCLUDE_DIRECTORIES "@TENSOR_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@TENSOR_LINK_LIBRARIES@"
)

if (TATOOINE_CDT_AVAILABLE)
  set_property(TARGET tatooine::CDT APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties(tatooine::CDT PROPERTIES
    IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/geometry/external/CDT/CDT/libCDT.so.1.0.0"
    IMPORTED_SONAME_RELEASE "libCDT.so.1.0.0"
    )
endif()

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
