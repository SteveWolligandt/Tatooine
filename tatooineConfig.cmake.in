# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.21)
find_package(OpenMP REQUIRED COMPONENTS CXX)
find_package(Boost REQUIRED)
set(TATOOINE_CDT_AVAILABLE @TATOOINE_CDT_AVAILABLE@)
set(TATOOINE_FLANN_AVAILABLE @TATOOINE_FLANN_AVAILABLE@)
set(TATOOINE_CGAL_AVAILABLE @TATOOINE_CGAL_AVAILABLE@)
set(TATOOINE_USE_INSTALLED_CGAL @TATOOINE_USE_INSTALLED_CGAL@)
set(TATOOINE_GL_AVAILABLE @TATOOINE_GL_AVAILABLE@)
set(TATOOINE_STD_FILESYSTEM_AVAILABLE @TATOOINE_STD_FILESYSTEM_AVAILABLE@)
if (TATOOINE_GL_AVAILABLE) 
  find_package(OpenGL COMPONENTS OpenGL EGL)
endif()
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
set (targets tatooine::base tatooine::geometry tatooine::multidim_array tatooine::preprocessor tatooine::fields tatooine::tensor blaspp lapackpp)
if (TATOOINE_USE_CDT)
  list(APPEND targets tatooine::CDT)
endif()
if (TATOOINE_GL_AVAILABLE)
  list(APPEND targets tatooine::gl tatooine::glad tatooine::glfw tatooine::imgui tatooine::rendering)
endif()
foreach(_expectedTarget ${targets})
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Create imported target tatooine::geometry
add_library(tatooine::geometry STATIC IMPORTED)

set(geometry_available_libs "")
set(geometry_lib_list "tatooine::tensor")
set(geometry_include_dirs "@CMAKE_SOURCE_DIR@/geometry/include")
if (TATOOINE_CDT_AVAILABLE)
  string(APPEND geometry_lib_list ";tatooine::CDT")
endif()
string(APPEND geometry_available_libs "TATOOINE_CDT_AVAILABLE=@TATOOINE_CDT_AVAILABLE@")

if (TATOOINE_FLANN_AVAILABLE)
  string(APPEND geometry_lib_list ";flann")
endif()
string(APPEND geometry_available_libs ";TATOOINE_FLANN_AVAILABLE=@TATOOINE_FLANN_AVAILABLE@")

if (TATOOINE_CGAL_AVAILABLE)
  if (TATOOINE_USE_INSTALLED_CGAL)
    string(APPEND geometry_lib_list ";CGAL::CGAL")
    find_package(CGAL QUIET)
  else()
    list(PREPEND CMAKE_MODULE_PATH "@CMAKE_SOURCE_DIR@/geometry/cmake/modules/")
    list(APPEND geometry_include_dirs "@CMAKE_SOURCE_DIR@/geometry/external/cgal/Triangulation/include")
    string(APPEND geometry_lib_list ";mpfr;gmp")
  endif ()
endif()
string(APPEND geometry_available_libs ";TATOOINE_CGAL_AVAILABLE=@TATOOINE_CGAL_AVAILABLE@")

set_target_properties(tatooine::geometry PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "${geometry_available_libs}"
  INTERFACE_INCLUDE_DIRECTORIES "${geometry_include_dirs}"
  INTERFACE_LINK_LIBRARIES "${geometry_lib_list}"
)

if (TATOOINE_CDT_AVAILABLE)
  # Create imported target tatooine::CDT
  add_library(tatooine::CDT SHARED IMPORTED)

  set_target_properties(tatooine::CDT PROPERTIES
    INTERFACE_COMPILE_DEFINITIONS "\$<\$<BOOL:ON>:CDT_USE_BOOST>;\$<\$<BOOL:ON>:CDT_USE_AS_COMPILED_LIBRARY>"
    INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_BINARY_DIR@/geometry/external/CDT/CDT;@CMAKE_SOURCE_DIR@/geometry/external/CDT/CDT/include;@CMAKE_SOURCE_DIR@/geometry/external/CDT/CDT/extras"
    INTERFACE_LINK_LIBRARIES "Boost::boost"
    INTERFACE_SOURCES "@CMAKE_BINARY_DIR@/geometry/external/CDT/CDT/cdt_export.h"
  )
endif()
# Import target "tatooine::geometry" for configuration "Release"
set_property(TARGET tatooine::geometry APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(tatooine::geometry PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
  IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/geometry/libgeometry.a"
  )

if (TATOOINE_GL_AVAILABLE) 
  # Create imported target tatooine::gl
  add_library(tatooine::gl STATIC IMPORTED)

  set_target_properties(tatooine::gl PROPERTIES
    INTERFACE_COMPILE_DEFINITIONS "TATOOINE_GL_VERBOSE=0"
    INTERFACE_COMPILE_FEATURES "cxx_std_20"
    INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/gl/include;@CMAKE_BINARY_DIR@/gl/include;@CMAKE_SOURCE_DIR@/gl/external/imgui;@CMAKE_SOURCE_DIR@/gl/external/imgui;@CMAKE_SOURCE_DIR@/gl/external/imgui-filebrowser"
    INTERFACE_LINK_LIBRARIES "tatooine::tensor;tatooine::glad;\$<LINK_ONLY:OpenGL::OpenGL>;\$<LINK_ONLY:OpenGL::EGL>;\$<LINK_ONLY:tatooine::glfw>;\$<LINK_ONLY:tatooine::imgui>"
  )

# Create imported target tatooine::glad
add_library(tatooine::glad STATIC IMPORTED)

set_target_properties(tatooine::glad PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/gl/external/glad"
)
# Create imported target tatooine::glfw
add_library(tatooine::glfw SHARED IMPORTED)

set_target_properties(tatooine::glfw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/gl/external/glfw/include"
)
# Create imported target tatooine::imgui
add_library(tatooine::imgui STATIC IMPORTED)

set_target_properties(tatooine::imgui PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/gl/external/imgui"
)

# Create imported target tatooine::rendering
add_library(tatooine::rendering INTERFACE IMPORTED)

set_target_properties(tatooine::rendering PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/rendering/include"
  INTERFACE_LINK_LIBRARIES "tatooine::gl;tatooine::geometry"
)
endif()

# Create imported target tatooine::base
add_library(tatooine::base INTERFACE IMPORTED)

set(base_interface_link_libraries "OpenMP::OpenMP_CXX;/usr/lib/libpng.so;/usr/lib/libz.so;/usr/lib/libhdf5.so;/usr/lib/libsz.so;/usr/lib/libz.so;/usr/lib/libdl.a;/usr/lib/libm.so;/usr/lib/libnetcdf.so;/usr/lib/libnetcdf_c++4.so;tatooine::preprocessor")
if (TATOOINE_STD_FILESYSTEM_AVAILABLE)
  string(PREPEND base_interface_link_libraries "stdc++fs;")
endif()
set_target_properties(tatooine::base PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TATOOINE_STD_FILESYSTEM_AVAILABLE=@TATOOINE_STD_FILESYSTEM_AVAILABLE@;TATOOINE_OPENMP_AVAILABLE;TATOOINE_PNG_AVAILABLE=1;_FORTIFY_SOURCE=2;_FORTIFY_SOURCE=2;TATOOINE_HDF5_AVAILABLE=1;TATOOINE_NETCDF_AVAILABLE=1"
  INTERFACE_COMPILE_OPTIONS "-Wall;-Wextra;-Wpedantic"
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/include;@CMAKE_BINARY_DIR@/include;@CMAKE_SOURCE_DIR@/external/indicators/include;@CMAKE_SOURCE_DIR@/external/vcode/include;@CMAKE_SOURCE_DIR@/external/gcem/include;@CMAKE_SOURCE_DIR@/external/rapidxml;/usr/include;/usr/include;/usr/include/png++;/usr/include;/usr/include;/usr/include"
  INTERFACE_LINK_LIBRARIES "${base_interface_link_libraries}"
)

# Create imported target tatooine::multidim_array
add_library(tatooine::multidim_array INTERFACE IMPORTED)

set_target_properties(tatooine::multidim_array PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/multidim_array/include"
  INTERFACE_LINK_LIBRARIES "tatooine::base"
)

# Create imported target tatooine::fields
add_library(tatooine::fields INTERFACE IMPORTED)

set_target_properties(tatooine::fields PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/fields/include"
  INTERFACE_LINK_LIBRARIES "tatooine::tensor;tatooine::geometry"
)

# Create imported target tatooine::preprocessor
add_library(tatooine::preprocessor INTERFACE IMPORTED)

set_target_properties(tatooine::preprocessor PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/preprocessor/include;@CMAKE_BINARY_DIR@/preprocessor/include"
)

# Create imported target tatooine::tensor
add_library(tatooine::tensor INTERFACE IMPORTED)

set_target_properties(tatooine::tensor PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "LAPACK_COMPLEX_CPP"
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "@CMAKE_SOURCE_DIR@/tensor/include"
  INTERFACE_LINK_LIBRARIES "tatooine::base;tatooine::multidim_array;lapackpp"
)

# Create imported target blaspp
add_library(blaspp SHARED IMPORTED)

set_target_properties(blaspp PROPERTIES
  INTERFACE_COMPILE_FEATURES "@BLASPP_COMPILE_FEATURES@"
  INTERFACE_COMPILE_OPTIONS "@BLASPP_COMPILE_OPTIONS@"
  INTERFACE_INCLUDE_DIRECTORIES "@BLASPP_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@BLASPP_LINK_LIBRARIES@"
)

# Create imported target lapackpp
add_library(lapackpp SHARED IMPORTED)

set_target_properties(lapackpp PROPERTIES
  INTERFACE_COMPILE_FEATURES "@LAPACKPP_COMPILE_FEATURES@"
  INTERFACE_COMPILE_OPTIONS "@LAPACKPP_COMPILE_OPTIONS@"
  INTERFACE_INCLUDE_DIRECTORIES "@LAPACKPP_INCLUDE_DIRECTORIES@"
  INTERFACE_LINK_LIBRARIES "@LAPACKPP_LINK_LIBRARIES@"
)

if (TATOOINE_CDT_AVAILABLE)
  # Import target "tatooine::CDT" for configuration "Release"
  set_property(TARGET tatooine::CDT APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties(tatooine::CDT PROPERTIES
    IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/geometry/external/CDT/CDT/libCDT.so.1.0.0"
    IMPORTED_SONAME_RELEASE "libCDT.so.1.0.0"
    )
endif()

if(TATOOINE_GL_AVAILABLE)
  # Import target "tatooine::gl" for configuration "Release"
  set_property(TARGET tatooine::gl APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties(tatooine::gl PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
    IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/gl/libgl.a"
    )
  # Import target "tatooine::glad" for configuration "Release"
  set_property(TARGET tatooine::glad APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties(tatooine::glad PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "C"
    IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/gl/libglad.a"
    )

  # Import target "tatooine::glfw" for configuration "Release"
  set_property(TARGET tatooine::glfw APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties(tatooine::glfw PROPERTIES
    IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/gl/external/glfw/src/libglfw.so.3.4"
    IMPORTED_SONAME_RELEASE "libglfw.so.3"
    )

  # Import target "tatooine::imgui" for configuration "Release"
  set_property(TARGET tatooine::imgui APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
  set_target_properties(tatooine::imgui PROPERTIES
    IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
    IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/gl/libimgui.a"
    )
endif()

# Import target "blaspp" for configuration "Release"
set_property(TARGET blaspp APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(blaspp PROPERTIES
  IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/tensor/external/blaspp/libblaspp.so"
  IMPORTED_SONAME_RELEASE "libblaspp.so"
  )

# Import target "lapackpp" for configuration "Release"
set_property(TARGET lapackpp APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(lapackpp PROPERTIES
  IMPORTED_LOCATION_RELEASE "@CMAKE_BINARY_DIR@/tensor/external/lapackpp/liblapackpp.so"
  IMPORTED_SONAME_RELEASE "liblapackpp.so"
  )

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "blaspp" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
