#ifndef TATOOINE_STEADIFICATION_SHADERS_H
#define TATOOINE_STEADIFICATION_SHADERS_H
//==============================================================================
#include <string>
#include <yavin>
//==============================================================================
namespace tatooine::steadification {
//==============================================================================
struct vert_frag_shader : yavin::shader {
  vert_frag_shader(const std::string_view& vert, const std::string_view& frag);
  void set_projection(const yavin::mat4&);
  void set_modelview(const yavin::mat4&);
};
//==============================================================================
struct comp_shader : yavin::shader {
  comp_shader(const std::string_view& comp);
  void dispatch(GLuint w, GLuint h);
};
//==============================================================================
struct ssf_rasterization_shader : vert_frag_shader {
  static constexpr std::string_view vert_path =
      "@TATOOINE_STEADIFICATION_SSF_RASTERIZATION_VERT@";
  static constexpr std::string_view frag_path =
      "@TATOOINE_STEADIFICATION_SSF_RASTERIZATION_FRAG@";
  ssf_rasterization_shader();
  void set_count(GLboolean);
  void set_width(GLuint);
  void set_render_index(GLuint render_index);
  void set_layer(GLuint l);
};
//==============================================================================
struct tex_rasterization_to_buffer_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_TEX_RASTERIZATION_TO_BUFFER_COMP@";
  tex_rasterization_to_buffer_shader();
};
//==============================================================================
struct lic_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_LIC_COMP@";
  lic_shader();
  void set_domain_min(GLfloat x, GLfloat y);
  void set_domain_max(GLfloat x, GLfloat y);
  void set_min_t(GLfloat min_t);
  void set_max_t(GLfloat max_t);
  void set_v_tex_bind_point(GLint b);
  void set_noise_tex_bind_point(GLint b);
  void set_color_scale_bind_point(GLint b);
  void set_num_samples(GLuint n);
  void set_stepsize(GLfloat s);
  void set_max_curvature(GLfloat max_curvature);
};
//==============================================================================
struct ll_to_v_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_LL_TO_V_TEX_COMP@";
  ll_to_v_shader();
};
//==============================================================================
struct ll_to_curvature_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_LL_TO_CURV_TEX_COMP@";
  ll_to_curvature_shader();
};
//==============================================================================
struct fragment_count_shader : vert_frag_shader {
  static constexpr std::string_view vert_path =
      "@TATOOINE_STEADIFICATION_SSF_RASTERIZATION_VERT@";
  static constexpr std::string_view frag_path =
      "@TATOOINE_STEADIFICATION_FRAGMENT_COUNT_FRAG@";
  fragment_count_shader();
};
//==============================================================================
struct seedcurve_shader : vert_frag_shader {
  static constexpr std::string_view vert_path =
      "@TATOOINE_STEADIFICATION_SEEDCURVE_VERT@";
  static constexpr std::string_view frag_path =
      "@TATOOINE_STEADIFICATION_SEEDCURVE_FRAG@";
  seedcurve_shader();
  void set_color_scale_bind_point(GLint b);
  void set_min_t(GLfloat t);
  void set_max_t(GLfloat t);
  void use_color_scale(GLboolean b);
  void set_color(GLfloat r, GLfloat g, GLfloat b, GLfloat a);
};
//==============================================================================
struct weight_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_WEIGHT_COMP@";
  weight_shader();
  void set_layer(GLuint n);
  void set_size(GLuint n);
  void set_penalty(GLfloat penalty);
  void set_max_curvature(GLfloat max_curvature);
  void set_t_center(GLfloat t_center);
  void use_tau(GLboolean use_tau);
};
//==============================================================================
struct combine_rasterizations_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_COMBINE_RASTERIZATIONS_COMP@";
  combine_rasterizations_shader();
  void set_resolution(GLuint w, GLuint h);
};
//==============================================================================
struct coverage_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_COVERAGE_COMP@";
  coverage_shader();
  void set_linked_list_size(unsigned int n);
};
//==============================================================================
struct dual_coverage_shader : comp_shader {
  static constexpr std::string_view comp_path =
      "@TATOOINE_STEADIFICATION_DUAL_COVERAGE_COMP@";
  dual_coverage_shader();
  void set_linked_list0_size(unsigned int n);
  void set_linked_list1_size(unsigned int n);
};
//==============================================================================
}  // namespace tatooine::steadification
//==============================================================================
#endif
