#version 450
//==============================================================================
#include "node.glsl"
//==============================================================================
layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 0, std430) buffer result_rast_buffer {
  node result_rast[];
};
layout(binding = 1, std430) buffer working_rast_buffer {
  node working_rast[];
};
layout(binding = 2, std430) buffer result_size_buffer {
  uint result_list_size[];
};
layout(binding = 3, std430) buffer working_size_buffer {
  uint working_list_size[];
};
layout(binding = 4, std430) buffer weight_buffer {
  float weights[];
};
layout(binding = 7, rgba32f) uniform image2D v_tex;
//==============================================================================
const float nan = 0.0 / 0.0;
const uvec2 resolution = uvec2(imageSize(v_tex));
//==============================================================================
void main() {
  const ivec2 texpos = ivec2(gl_GlobalInvocationID.xy);
  if (texpos.x >= resolution.x || texpos.y >= resolution.y) {
    return;
  }
  const uint li = (texpos.x + texpos.y * resolution.x);
  if (result_list_size[li] == 0) {
    imageStore(v_tex, texpos, vec4(nan));
  } else {
    const uint fi = li * 2;
    const uint bi = fi + 1;
    node nf = result_rast[fi];
    node nb = result_rast[bi];
    if (abs(nf.t - nf.t0) > abs(nb.t - nb.t0)) {
      imageStore(v_tex, texpos, vec4(nf.v, nf.t - nf.t0, float(nf.renderindex)));
    } else {
      imageStore(v_tex, texpos, vec4(nb.v, nb.t - nb.t0, float(nb.renderindex)));
    }
  }
}
