#version 450
//==============================================================================
layout(local_size_x = 32, local_size_y = 32) in;
layout(binding = 6, rgba32f) uniform image2D lic_tex;
layout(binding = 7, rgba32f) uniform image2D color_lic_tex;
layout(binding = 5, rgba32f) uniform image2D curvature_lic_tex;
//==============================================================================
uniform sampler2D v_tex;
uniform sampler2D noise_tex;
uniform sampler2D color_scale;
uniform vec2      domain_min;
uniform vec2      domain_max;
uniform float     min_t;
uniform float     max_t;
uniform uint      num_samples;
uniform float     stepsize;
uniform float     max_curvature;
//==============================================================================
const uvec2 lic_tex_res   = uvec2(imageSize(lic_tex));
const ivec2 v_tex_res     = textureSize(v_tex, 0);
const ivec2 noise_tex_res = textureSize(noise_tex, 0);
const float pi            = 3.1415926535897932384626433832795;
const float pi4           = pi / 4.0;
//==============================================================================
vec2 idx_to_uv(uvec2 image_pos, uvec2 res) {
  // calculate normalized texture coordinates
  return ((image_pos / vec2(res - 1) * (res * 2 - 2)) + 1) / vec2(res * 2);
}
//------------------------------------------------------------------------------
vec2 domain_pos_to_uv(vec2 domain_pos, vec2 min, vec2 max, uvec2 res) {
  const vec2 grid_pos = (domain_pos - min) / (max - min);
  return (grid_pos * (res * 2 - 2) + 1) / (vec2(res * 2));
}
//------------------------------------------------------------------------------
vec2 idx_to_domain_pos(uvec2 image_pos, vec2 min, vec2 max, uvec2 res) {
  return image_pos / vec2(res - 1) * (max - min) + min;
}
//------------------------------------------------------------------------------
vec3 v(vec2 pos) {
  vec4 v_sample =
      texture(v_tex, domain_pos_to_uv(pos, domain_min, domain_max, v_tex_res));
  if (isnan(v_sample.x) || isnan(v_sample.y)) {
    return v_sample.xya;
  } else {
    return vec3(normalize(v_sample.xy), v_sample.a);
  }
}
//------------------------------------------------------------------------------
float noise(vec2 pos) {
  vec2 fres      = vec2(lic_tex_res);
  vec2 fnoiseres = vec2(noise_tex_res);
  return texture(noise_tex,
                 domain_pos_to_uv(pos, domain_min, domain_max, noise_tex_res) *
                     fres / fnoiseres).r;
}

//------------------------------------------------------------------------------
vec2 rungekutta4_step(vec2 x1, float stepsize) {
  const vec3  kri1 = v(x1);
  const vec2  k1   = kri1.xy;
  //const float ri1  = kri1.z;
  if (isnan(k1.x) || isnan(k1.y)) { return vec2(0.0 / 0.0, 0.0 / 0.0); }

  const vec2 x2 = x1 + k1 * stepsize * 0.5;
  if (x2.x < domain_min.x || x2.x > domain_max.x ||
      x2.y < domain_min.y || x2.y > domain_max.y) {
    return vec2(0.0 / 0.0, 0.0 / 0.0);
  }
  const vec3  kri2 = v(x2);
  const vec2  k2   = kri2.xy;
  //const float ri2  = kri2.z;
  //if (ri2 != ri1) { return vec2(0.0 / 0.0, 0.0 / 0.0); }
  if (isnan(k2.x) || isnan(k2.y)) { return vec2(0.0 / 0.0, 0.0 / 0.0); }

  const vec2 x3 = x1 + k2 * stepsize * 0.5;
  if (x3.x < domain_min.x || x3.x > domain_max.x ||
      x3.y < domain_min.y || x3.y > domain_max.y) {
    return vec2(0.0 / 0.0, 0.0 / 0.0);
  }
  const vec3  kri3 = v(x3);
  const vec2  k3   = kri3.xy;
  //const float ri3  = kri3.z;
  //if (ri3 != ri1) { return vec2(0.0 / 0.0, 0.0 / 0.0); }
  if (isnan(k3.x) || isnan(k3.y)) { return vec2(0.0 / 0.0, 0.0 / 0.0); }

  const vec2 x4 = x1 + k3 * stepsize;
  if (x4.x < domain_min.x || x4.x > domain_max.x ||
      x4.y < domain_min.y || x4.y > domain_max.y) {
    return vec2(0.0 / 0.0, 0.0 / 0.0);
  }
  const vec3  kri4 = v(x4);
  const vec2  k4   = kri4.xy;
  //const float ri4  = kri4.z;
  //if (ri4 != ri1) { return vec2(0.0 / 0.0, 0.0 / 0.0); }
  if (isnan(k4.x) || isnan(k4.y)) { return vec2(0.0 / 0.0, 0.0 / 0.0); }

  const vec2 stepped = x1 + (k1 + 2 * k2 + 2 * k3 + k4) * stepsize / 6.0;
  if (stepped.x < domain_min.x || stepped.x > domain_max.x ||
      stepped.y < domain_min.y || stepped.y > domain_max.y) {
    return vec2(0.0 / 0.0, 0.0 / 0.0);
  }
  return stepped;
}
//==============================================================================
void main() {
  const ivec2 idx = ivec2(gl_GlobalInvocationID.xy);
  if (idx.x >= lic_tex_res.x || idx.y >= lic_tex_res.y) { return; }
  const vec2 pos = idx_to_domain_pos(idx, domain_min, domain_max, lic_tex_res);

  vec2 v0 = v(pos).xy;
  if (isnan(v0.x) || isnan(v0.y)) {
    imageStore(lic_tex, idx, vec4(1, 1, 1, 0));
    imageStore(color_lic_tex, idx, vec4(1, 1, 1, 0));
    return;
  }
  float out_val = noise(pos);
  uint  cnt     = 1;
  vec2  pos_integrated;

  // forward integration
  pos_integrated = pos;
  for (uint i = 0; i < num_samples; ++i) {
    pos_integrated = rungekutta4_step(pos_integrated, stepsize);
    if (isnan(pos_integrated.x) || isnan(pos_integrated.y)) { break; }
    out_val += noise(pos_integrated);
    ++cnt;
  }
  
  // backward integration
  pos_integrated = pos;
  for (uint i = 0; i < num_samples; ++i) {
    pos_integrated = rungekutta4_step(pos_integrated, -stepsize);
    if (isnan(pos_integrated.x) || isnan(pos_integrated.y)) { break; }
    out_val += noise(pos_integrated);
    ++cnt;
  }

  // contrast stretch
  out_val /= float(cnt);
  out_val = out_val * 3 - 1;
  if (out_val < 0) { out_val = 0; }
  if (out_val > 1) { out_val = 1; }

  vec2 t_curv =
      texture(v_tex, domain_pos_to_uv(pos, domain_min, domain_max, v_tex_res))
          .zw;

  imageStore(
      color_lic_tex, idx,
      vec4(out_val * texture(color_scale,
                             1 - vec2((t_curv.x - min_t) / (max_t - min_t), 0.5))
                         .rgb,
           1));
  imageStore(lic_tex, idx, vec4(vec3(out_val), 1));
  imageStore(
      curvature_lic_tex, idx,
      vec4(out_val *
               texture(color_scale, 1 - vec2(min(max_curvature, t_curv.y) / max_curvature, 0.5)).rgb,
           1));

  const vec2 uv           = vec2(idx) / (vec2(lic_tex_res) - 1);
  const float t       = texture(v_tex, uv).z;
  const ivec2 offsets[4] =
      ivec2[](ivec2(1, 0), ivec2(1, 1), ivec2(1, -1), ivec2(0, 1));
  for (uint i = 0; i < 2; ++i) {
    const ivec2 idx_off_pos = idx + offsets[i];
    const ivec2 idx_off_neg = idx - offsets[i];
    if (idx.x > 0 && idx.y > 0 &&
        idx.x < lic_tex_res.x - 1 &&
        idx.y < lic_tex_res.y - 1) {
      const vec2 uv_offset_pos  = vec2(idx_off_pos) / (vec2(lic_tex_res) - 1);
      const vec2 uv_offset_neg  = vec2(idx_off_neg) / (vec2(lic_tex_res) - 1);
      const float t_pos = texture(v_tex, uv_offset_pos).z;
      const float t_neg = texture(v_tex, uv_offset_neg).z;
      if (abs(t - t_neg - (t_pos - t)) > 0.5) {
        imageStore(color_lic_tex, idx, vec4(1, 1, 1, 1));
        imageStore(lic_tex, idx, vec4(1, 0, 0, 1));
      }
    }
  }
}
