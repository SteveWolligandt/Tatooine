#ifndef TATOOINE_FLOWEXPLORER_NODES_AUTONOMOUS_PARTICLES_RENDERER_H
#define TATOOINE_FLOWEXPLORER_NODES_AUTONOMOUS_PARTICLES_RENDERER_H
//==============================================================================
#include <tatooine/flowexplorer/renderable.h>
#include <yavin/glfunctions.h>
#include <yavin/vertexbuffer.h>

#include <memory>
#include <thread>
//==============================================================================
namespace tatooine::flowexplorer::nodes {
//==============================================================================
struct autonomous_particles_renderer2d
    : renderable<autonomous_particles_renderer2d> {
  struct shader : yavin::shader {
    shader();
    //------------------------------------------------------------------------------
    void set_view_projection_matrix(mat4f const& A);
  };
  //============================================================================
  static constexpr std::string_view vertex_shader_path =
      "@TATOOINE_FLOWEXPLORER_SHADERS_AUTONOMOUS_PARTICLES_RENDERER_2D_VERT@";
  static constexpr std::string_view geometry_shader_path =
      "@TATOOINE_FLOWEXPLORER_SHADERS_AUTONOMOUS_PARTICLES_RENDERER_2D_GEOM@";
  static constexpr std::string_view fragment_shader_path =
      "@TATOOINE_FLOWEXPLORER_SHADERS_AUTONOMOUS_PARTICLES_RENDERER_2D_FRAG@";
  //============================================================================
  yavin::vertexbuffer<vec2f, vec2f, vec2f> m_gpu_Ss;
  yavin::indexbuffer                       m_gpu_Is;
  shader                                   m_shader;
  bool                                     m_currently_reading = false;
  std::mutex                               m_gpu_data_mutex;
  //----------------------------------------------------------------------------
  autonomous_particles_renderer2d(flowexplorer::scene& s);
  virtual ~autonomous_particles_renderer2d() = default;
  //----------------------------------------------------------------------------
  auto render(mat4f const& P, mat4f const& V) -> void override;
  //----------------------------------------------------------------------------
  auto draw_properties() -> bool override;
  //----------------------------------------------------------------------------
  auto load_initial() -> void;
  auto load_advection() -> void;
  auto load_back_calculation() -> void;
  auto load_data(std::string_view const& file) -> void;
  //----------------------------------------------------------------------------
  auto is_transparent() const -> bool override;
};
//==============================================================================
struct autonomous_particles_renderer3d
    : renderable<autonomous_particles_renderer3d> {
  struct shader : yavin::shader {
    shader();
    //------------------------------------------------------------------------------
    void set_view_projection_matrix(mat4f const& A);
  };
  //============================================================================
  static constexpr std::string_view vertex_shader_path =
      "@TATOOINE_FLOWEXPLORER_SHADERS_AUTONOMOUS_PARTICLES_RENDERER_3D_VERT@";
  static constexpr std::string_view geometry_shader_path =
      "@TATOOINE_FLOWEXPLORER_SHADERS_AUTONOMOUS_PARTICLES_RENDERER_3D_GEOM@";
  static constexpr std::string_view fragment_shader_path =
      "@TATOOINE_FLOWEXPLORER_SHADERS_AUTONOMOUS_PARTICLES_RENDERER_3D_FRAG@";
  //============================================================================
  yavin::vertexbuffer<vec3f, vec3f, vec3f, vec3f> m_gpu_Ss;
  yavin::indexbuffer                              m_gpu_Is;
  shader                                          m_shader;
  bool                                            m_currently_reading = false;
  std::mutex                                      m_gpu_data_mutex;
  //----------------------------------------------------------------------------
  autonomous_particles_renderer3d(flowexplorer::scene& s);
  virtual ~autonomous_particles_renderer3d() = default;
  //----------------------------------------------------------------------------
  auto render(mat4f const& P, mat4f const& V) -> void override;
  //----------------------------------------------------------------------------
  auto draw_properties() -> bool override;
  //----------------------------------------------------------------------------
  auto load_initial() -> void;
  auto load_advection() -> void;
  auto load_back_calculation() -> void;
  auto load_data(std::string_view const& file) -> void;
  //----------------------------------------------------------------------------
  auto is_transparent() const -> bool override;
};
//==============================================================================
}  // namespace tatooine::flowexplorer::nodes
//==============================================================================
TATOOINE_FLOWEXPLORER_REGISTER_RENDERABLE(
    tatooine::flowexplorer::nodes::autonomous_particles_renderer2d)
TATOOINE_FLOWEXPLORER_REGISTER_RENDERABLE(
    tatooine::flowexplorer::nodes::autonomous_particles_renderer3d)
#endif
