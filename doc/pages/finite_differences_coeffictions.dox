/**
\addtogroup finite_differences_coefficients Finite Differences Coefficients

\remark The following is based on the one by Cameron Taylor: http://web.media.mit.edu/~crtaylor/calculator.html

\section fin_diff_tool Interactive Tool
\htmlonly
<table>
<tr>
  <div class="form-group" >
    <td><h4>Locations of Sampled Points:</h4></td>
    <td><input type="text"
           class="form-control"
           id="points"
           value="-2,-1,0,1,2"
           placeholder="e.g. -4,-1,7,11,15"
           onkeyup="calculateEverything();" >
  </div></td>
  </tr>

  <tr>
    <td><h4>Derivative Order:</h4></td>
  <td><div class="input">
    <input type="text"
           class="form-control"
           id="order" value="1"
           placeholder="e.g. 4"
           onkeyup="calculateEverything();">
    <br> 
  </div></td>
  </tr>
  </table>

  <div id="stencil" style="color:#000000">
  $\frac{\partial^{(1)}f}{\partial x^{(1)}}\approx$
  </div>
  <h1></h1>
<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_CHTML"></script>
<script>
  var myPoints
  var myOrder
  var rowVectorString
  var matrixString
  var colVectorString
  var solution

  function calculateEverything(){

    myPoints = $("#points").val()
    myPoints = myPoints.split('[').join('')
    myPoints = myPoints.split(']').join('')
    myPoints = myPoints.split('{').join('')
    myPoints = myPoints.split('}').join('')
    myPoints = myPoints.split('(').join('')
    myPoints = myPoints.split(')').join('')
    myPoints = myPoints.split('<').join('')
    myPoints = myPoints.split('>').join('')
    myPoints = myPoints.split(';').join(',')
    myPoints = myPoints.split('- ').join('')
    myPoints = myPoints.split('--').join('')
    myPoints = myPoints.split(' ').join(',')
    for (i=0; i<10; i++) {
      myPoints = myPoints.split(",,").join(',')
    }
    if (myPoints.slice(-1)=="-") {
      myPoints = myPoints.slice(0, -1);
    }
    if (myPoints.slice(-1)==",") {
      myPoints = myPoints.slice(0, -1);
    }
    while(myPoints.charAt(0) === ',')
        myPoints = myPoints.substr(1);
    myPoints = "[" + myPoints + "]";
    // Check for characters other than commas, periods, minus signs, integers, and brackets.
    if (myPoints.match(/[^,-.\d[]]/)) {
      document.getElementById("stencil").innerHTML = "$$\\mbox{Please enter a comma-separated list of values for the locations of sampled points.}$$";
      document.getElementById("code").innerHTML = "";
      MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
      return;
    }
    myPoints = JSON.parse(myPoints);

    // Sort by amplitude then by sign (this increases the accuracy of the inverse matrix calculation in MathJS).
    myPoints.sort(function(a,b) {
      if (Math.abs(a) == Math.abs(b)) {
          return Math.sign(a);
        } else {
        return Math.abs(a) - Math.abs(b);
        }
    });

    // Remove duplicates (http://stackoverflow.com/a/9229932/4541374)
    var uniquePoints = [];
    $.each(myPoints, function(i, el){
        if($.inArray(el, uniquePoints) === -1) uniquePoints.push(el);
    });
    myPoints = uniquePoints;

    myOrder = $("#order").val()
    if (myOrder.match(/[^\d]/)) {
      document.getElementById("stencil").innerHTML = "$$\\mbox{Please enter a non-negative integer derivative order.}$$";
      document.getElementById("code").innerHTML = "";
      MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
      return;
    }
    myOrder = "[" + myOrder + "]"; 
    myOrder = JSON.parse(myOrder);

    if (myOrder[0]>=myPoints.length) {
      document.getElementById("stencil").innerHTML = "$$\\mbox{Please enter a derivative order that is less than the number of points in your stencil.}$$";
      document.getElementById("code").innerHTML = "";
      MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
      return;
    } else if (!isInt(myOrder[0])) {
      document.getElementById("stencil").innerHTML = "$$\\mbox{Please enter a derivative order.}$$";
      document.getElementById("code").innerHTML = "";
      MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
      return;
    }

    rowVectorString = "a = ["
    for (i = 0; i < myPoints.length; i++) { 
        rowVectorString += myPoints[i]
        if (i < myPoints.length-1) {
          rowVectorString += ","
        }
    }
    rowVectorString += "]"

    matrixString = "A = ["
    for (i = 0; i < myPoints.length; i++)  {
      for (j = 1; j <= myPoints.length; j++) {
        matrixString += "a[" + j + "]^" + i
        if (j < myPoints.length) {
          matrixString += ","
        }
      }
      if (i < myPoints.length-1) {
        matrixString += "; "
      }
    }
    matrixString += "]"

    colVectorString = "b = ["
    for (i = 0; i < myPoints.length; i++) {
      if (Math.abs(i-myOrder)<1) {
        colVectorString += "factorial(" + myOrder + ")"
      }
      else {
        colVectorString += "0"
      }
      if (i<myPoints.length-1) {
        colVectorString += "; "
      }
    }
    colVectorString += "]"

    var postData = {
         "expr": [
           rowVectorString,
           matrixString,
           colVectorString,
           "x = multiply(inv(A),b)",
         ],
         "precision": 30
        };
    getMatrixInverse(postData);
  }

  function getMatrixInverse(data){
    $.ajax({
      url: "https://api.mathjs.org/v1/",
      type: 'POST',
      data: JSON.stringify(data),
      success: function(response){
        var N = [];
        var D = [];
        var int_frac = [];
        //var solution = [];
        solution = response.result[3]
        solution = solution.split('[').join('')
        solution = solution.split(']').join('')
        solution = "[" + solution +"]"
        solution = JSON.parse(solution);
        for (i=0; i<solution.length; i++) {
          int_frac = approximateFractions(solution[i]);
          N[i] = Math.sign(solution[i])*int_frac[0]
          D[i] = int_frac[1]
        }
        denVectorString = "xLCM = lcm("
        for (i = 0; i <  D.length; i++) { 
            denVectorString += D[i]
            if (i < D.length-1) {
              denVectorString += ","
            }
        }
        denVectorString += ")"
        var postData2 = {
          "expr": [
          denVectorString,
         ],
         "precision": 30
        };
        getLCM(postData2);
      },
      error: function(response){
        console.log("Error loading data");
      }
    });
  };

  function getLCM(data){
    $.ajax({
      url: "https://api.mathjs.org/v1/",
      type: 'POST',
      data: JSON.stringify(data),
      success: function(response){
        xLCM = JSON.parse("[" + response.result[0] + "]");
        var denominator = xLCM
        var numeratorCoefficients = []
        for (i=0; i<solution.length; i++) numeratorCoefficients[i]=Math.round(solution[i]*xLCM);
        // Combine points and coefficients, sort by points, and separate them back out (http://stackoverflow.com/a/11499391/4541374)
        var list = [];
        for (var j in myPoints) 
            list.push({'point': myPoints[j], 'numeratorCoefficient': numeratorCoefficients[j]});
        list.sort(function(a, b) {
            return ((a.point < b.point) ? -1 : ((a.point == b.point) ? 0 : 1));
        });
        var myPoints2 = []
        var numeratorCoefficients2 = []
        for (var k = 0; k < list.length; k++) {
            myPoints2[k] = list[k].point;
            numeratorCoefficients2[k] = list[k].numeratorCoefficient;
        }
        redrawEquation(myPoints2,myOrder,numeratorCoefficients2,denominator)
      },
      error: function(response){
        console.log("Error loading data");
      }
    });
  };

  function redrawEquation(myPoints,myOrder,numeratorCoefficients,denominator) {
    var myEquation = "$$\\frac{\\partial^{(" + myOrder + ")}f}{\\partial x^{(" + myOrder + ")}}\\approx"
    myEquation += "\\frac{"
    for (i=0; i<myPoints.length; i++) {
      var numeratorSign = (numeratorCoefficients[i]>=0 && i!=0 ? "+" : "");
      var pointSign = (myPoints[i]>=0 ? "+" : "")

      myEquation += numeratorSign + numeratorCoefficients[i] + "f(x" + pointSign + myPoints[i] + "h)"
    }
    myEquation += "}{"
    myEquation += denominator + "h^{" + myOrder + "}}$$"
    document.getElementById("stencil").innerHTML = myEquation;
    MathJax.Hub.Queue(["Typeset",MathJax.Hub]);

    var myCode = "f_"
    if (myOrder>6) {
      myCode = "f_x" + myOrder;
    } else {
      for (i=0; i<myOrder; i++) {
      myCode += "x"
      }
    }
    myCode += " = ("
    for (i=0; i<myPoints.length; i++) {
      var numeratorSign = (numeratorCoefficients[i]>=0 && i!=0 ? "+" : "");
      var pointSign = (myPoints[i]>=0 ? "+" : "")
      myCode += numeratorSign + numeratorCoefficients[i] + "*f[i" + pointSign + myPoints[i] + "]"
    }
    myCode += ")/(" + denominator + "*1.0*h**" + myOrder + ")"
    document.getElementById("code").innerHTML = myCode;

  }

  function approximateFractions(d) {
    // Credit: http://www.mindspring.com/~alanh/fracs.html
    var d = Math.abs(d)

      var numerators = [0, 1];
      var denominators = [1, 0];
      var frac = [];
    
      var maxNumerator = getMaxNumerator(d);
      var d2 = d;
      var calcD, prevCalcD = NaN;

      for (var i = 2; i < 1000; i++)  {
          var L2 = Math.floor(d2);
          numerators[i] = L2 * numerators[i-1] + numerators[i-2];
      
          if (Math.abs(numerators[i]) > maxNumerator) return frac;
      
          denominators[i] = L2 * denominators[i-1] + denominators[i-2];
      
          calcD = numerators[i] / denominators[i];
          if (calcD == prevCalcD) return frac;
      
          currentNumerator = numerators[i];
          currentDenominator = denominators[i]
          frac = [currentNumerator, currentDenominator];
      
          if (Math.abs(calcD - d)<1e-12*d) return frac;
    
          if (calcD == d) return frac;
      
          prevCalcD = calcD;
      
          d2 = 1/(d2-L2);
      }
  }
  
  function getMaxNumerator(f) {
    // Credit: http://www.mindspring.com/~alanh/fracs.html
     var f2 = null;
     var ixe = f.toString().indexOf("E");
     if (ixe==-1) ixe = f.toString().indexOf("e");
     if (ixe == -1) f2 = f.toString();
     else f2 = f.toString().substring(0, ixe);
  
     var digits = null;
     var ix = f2.toString().indexOf(".");
     if (ix==-1) digits = f2;
     else if (ix==0) digits = f2.substring(1, f2.length);
     else if (ix < f2.length) digits = f2.substring(0, ix) + f2.substring(ix + 1, f2.length);
  
     var L = digits;
  
     var numDigits = L.toString().length;
     var L2 = f;
     var numIntDigits = L2.toString().length;
     if (L2 == 0) numIntDigits = 0;
     var numDigitsPastDecimal = numDigits - numIntDigits;
  
     for (var i=numDigitsPastDecimal; i>0 && L%2==0; i--) L/=2;
     for (var i=numDigitsPastDecimal; i>0 && L%5==0; i--) L/=5;
  
     return L;
  }

  function isInt(n){
    //Credit: http://stackoverflow.com/a/3886106/4541374
      return Number(n) === n && n % 1 === 0;
  }

  document.addEventListener('DOMContentLoaded', function() {
    calculateEverything(); },
  false);
</script>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-81863704-1', 'auto');
  ga('send', 'pageview');

</script>
  \endhtmlonly


\section fin_dif_what_is_this What is this?

Finite difference equations enable you to take derivatives of any order at any
point using any given sufficiently-large selection of points.  By inputting the
locations of your sampled points below, you will generate a finite difference
equation which will approximate the derivative at any desired location. 

To take a numerical derivative, you calculate the slope at a point using the
values and relative locations of surrounding points.  The locations of these
sampled points are collectively called the finite difference stencil.  This
calculator accepts as input any finite difference stencil and desired
derivative order and dynamically calculates the coefficients for the finite
difference equation.  You may be familiar with the backward difference
derivative

\f[\frac{\partial f}{\partial x}=\frac{f(x)-f(x-h)}{h}\f]

This is a special case of a finite difference equation (where \f$f(x)-f(x-h)\f$
is the finite difference and \f$h\f$ is the spacing between the points) and can
be displayed below by entering the finite difference stencil
<strong>{-1,0}</strong> for <strong>Locations of Sampled Points</strong> and
<strong>1</strong> for <strong>Derivative Order</strong>.

The finite difference coefficients calculator can be used generally for any
finite difference stencil and any derivative order.  Notable cases include the
forward difference derivative, <strong>{0,1} and 1</strong>, the second-order
central difference, <strong>{-1,0,1} and 2</strong>, and the fourth-order
five-point stencil, <strong>{-2,-1,0,1,2} and 4</strong>.  However, it is
encouraged that you explore additional combinations of forward, backward,
central, and otherwise offset stencils, as well as irregular and non-integer
sampling stencils, such as <strong>{-7.1,-4.2,2.4,3.14,4.7} and 4</strong>.

\section fin_dif_how_does_it_work How does it work?

I was taking Gilbert Strang's Computational Science and Engineering Class from
Norbert Stoop, and Professor Stoop asked us to determine the coefficients for
the difference equation

\f[\frac{\partial^4f}{\partial x^4} \approx Af(x-2h) + Bf(x-h) + Cf(x) + Df(x+h)
+ Ef(x+2h) \f]

I asked him after class if he could recommend a strategy for solving the
problem methodically, and he suggested I consider Taylor expansions.  The
formula for a Taylor expansion is

\f[f(b)=f(a)+\frac{f'(a)}{1!}(b-a)+\frac{f''(a)}{2!}(b-a)^2+\ldots\f]

so, after some serious thought, I began by expanding the first term,
\f$Af(x-2h)\f$, with \f$b=x-2h\f$ and \f$a=x\f$, getting

\f[ A                f(x) +A               f'(x)     (-2h) +A \frac{1}{2}
f''(x)    (-2h)^2 +A \frac{1}{6}   f'''(x) (-2h)^3 +A \frac{1}{24}  f''''(x)
(-2h)^4 +A \frac{1}{120} f'''''(x) (-2h)^5 +\ldots \f]

I then did the same for all of the other terms in the numerator

\f[ +B               f(x) +B               f'(x)     (-h) +B \frac{1}{2}
f''(x)    (-h)^2 +B \frac{1}{6}   f'''(x) (-h)^3 +B \frac{1}{24}  f''''(x)
(-h)^4 +B \frac{1}{120} f'''''(x) (-h)^5 +\ldots \f]

\f[ +C               f(x) \f]

\f[ +D               f(x) +D               f'(x)     (h) +D \frac{1}{2}   f''(x)
(h)^2 +D \frac{1}{6}   f'''(x)   (h)^3 +D \frac{1}{24}  f''''(x)  (h)^4 +D
\frac{1}{120} f'''''(x) (h)^5 +\ldots \f]

\f[ +E               f(x) +E               f'(x)     (2h) +E \frac{1}{2}
f''(x)    (2h)^2 +E \frac{1}{6}   f'''(x) (2h)^3 +E \frac{1}{24}  f''''(x)
(2h)^4 +E \frac{1}{120} f'''''(x) (2h)^5 +\ldots \f]

Now since I needed to choose \f$A, B, C, D\f$ and \f$E\f$ such that the summation
of all of these terms results in the cancellation of all \f$f(x)\f$, \f$f'(x)\f$,
\f$f''(x)\f$, and \f$f'''(x)\f$ terms and results in the \f$f''''(x)\f$ coefficients
summing to one, this requires us to fulfill the equations

\f[A+B+C+D+E=0 \f]

\f[-2A-B+D+2E=0 \f]

\f[4A+B+D+4E=0 \f]

\f[-8A-B+D+8E=0 \f]

\f[16A+B+D+16E=\frac{24}{h^4} \f]

These can be rewritten in general form as 

\f[(-2)^nA+(-1)^nB+C\delta(n)+1^nD+2^nE=\frac{4!}{h^4}\delta(n-4) \mbox{ for }
0\leq n\leq4 \f]

or in matrix form as

\f[ \begin{bmatrix} 1  & 1  & 1 & 1 & 1 \\ -2 & -1 & 0 & 1 & 2 \\ 4  & 1  & 0 &
1 & 4 \\ -8 & -1 & 0 & 1 & 8 \\ 16 & 1  & 0 & 1 & 16 \\ \end{bmatrix}
\begin{bmatrix} A \\ B \\ C \\ D \\ E \end{bmatrix} = \frac{1}{h^4}
\begin{bmatrix} 0 \\ 0 \\ 0 \\ 0 \\ 24 \end{bmatrix} \f]

Now this matrix is invertible, and the solution is

\f[ \begin{bmatrix} A \\ B \\ C \\ D \\ E \end{bmatrix} = \frac{1}{h^4}
\begin{bmatrix} 1  & 1  & 1 & 1 & 1 \\ -2 & -1 & 0 & 1 & 2 \\ 4  & 1  & 0 & 1 &
4 \\ -8 & -1 & 0 & 1 & 8 \\ 16 & 1  & 0 & 1 & 16 \\ \end{bmatrix}^{-1}
\begin{bmatrix} 0 \\ 0 \\ 0 \\ 0 \\ 24 \end{bmatrix} = \frac{1}{h^4}
\begin{bmatrix} 1 \\ -4 \\ 6  \\ -4 \\ 1  \\ \end{bmatrix} \f]

Substituting these values back into the original equation, we have the
difference equation

\f[\frac{\partial^4f}{\partial x^4} \approx \frac{ f(x-2h) + -4f(x-h) + 6f(x) +
-4f(x+h) + f(x+2h) } {h^4} \f]

Carefully considering the general form above, it is noticed that this equation
can be generalized to obtain the finite difference equation from any finite
difference stencil given the desired derivative order (provided the desired
finite difference equation exists for the given derivative order). Given a
stencil \(s\) of length \(N\) and derivative order \(d< N\), the coefficients
\(c\) are given by the finite difference coefficients equation

\f[s_1^nc_1 + \ldots + s_N^nc_N = \frac{d!}{h^d}\delta(n-d) \mbox{ for } 0 \leq
n \leq N-1 \f]

The solution to this equation can be written in matrix form as

\f[ \begin{bmatrix} c_1 \\ \vdots \\ c_N \end{bmatrix} = \frac{1}{h^d}
\begin{bmatrix} s_1^0 &  \ldots & s_N^0 \\ \vdots &  \ddots & \vdots \\
s_1^{N-1} &   \ldots & s_N^{N-1} \\ \end{bmatrix}^{-1} \begin{bmatrix} 0 \\
\vdots \\ d! \\ \vdots \\ 0 \end{bmatrix} \f]

Each time \(s\) and \(d\) are altered in the calculator above, this matrix
equation is solved and the resulting finite difference equation is displayed.


*/
