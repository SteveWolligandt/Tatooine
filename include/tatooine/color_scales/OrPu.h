#ifndef TATOOINE_COLOR_SCALES_ORPU_H
#define TATOOINE_COLOR_SCALES_ORPU_H
//==============================================================================
#include <tatooine/concepts.h>
#include <tatooine/vec.h>

#include <memory>
//==============================================================================
namespace tatooine::color_scales {
//==============================================================================
template <floating_point Real>
struct OrPu {
  using real_type  = Real;
  using this_type  = OrPu<Real>;
  using color_type = vec<Real, 3>;
  static constexpr std::size_t num_samples() { return 17; }
  //==============================================================================
 private:
  std::unique_ptr<color_type[]> m_data;

 public:
  auto data_container() -> color_type* { return m_data; }
  auto data_container() const -> color_type const* { return m_data; }
  auto data() -> color_type* { return m_data.get(); }
  auto data() const -> color_type const* { return m_data.get(); }
  //==============================================================================
  OrPu()
      : m_data{new color_type[]{
            {0.17647099999999999, 0, 0.29411799999999999},
            {0.27243400000000001, 0.095963000000000007, 0.444214},
            {0.37339499999999998, 0.228912, 0.56932000000000005},
            {0.48166100000000001, 0.41591699999999998, 0.65790099999999996},
            {0.60192199999999996, 0.56293700000000002, 0.75048099999999995},
            {0.71849300000000005, 0.695886, 0.83698600000000001},
            {0.81199500000000002, 0.81153399999999998, 0.89850099999999999},
            {0.894733, 0.89949999999999997, 0.94002300000000005},
            {0.96916599999999997, 0.96685900000000002, 0.96362899999999996},
            {0.98638999999999999, 0.91026499999999999, 0.80369100000000004},
            {0.99500200000000005, 0.83537099999999997, 0.62437500000000001},
            {0.99254100000000001, 0.73694700000000002, 0.42014600000000002},
            {0.93194900000000003, 0.60945800000000006, 0.224221},
            {0.85075000000000001, 0.48396800000000001, 0.069819000000000006},
            {0.74002299999999999, 0.38062299999999999, 0.035371},
            {0.61799300000000001, 0.29826999999999998, 0.026759000000000002},
            {0.49803900000000001, 0.231373, 0.031372999999999998}}} {}
  //----------------------------------------------------------------------------
  auto sample(real_type const t) const {
    if (t <= 0) {
      return m_data[0];
    }
    if (t >= 1) {
      return m_data[(num_samples() - 1)];
    }
    t *= num_samples() - 1;
    auto const i = static_cast<std::size_t>(std::floor(t));
    t            = t - i;
    return m_data[i] * (1 - t) + m_data[i + 1] * t;
  }
  auto operator()(real_type const t) const { return sample(t); }
};
//==============================================================================
OrPu()->OrPu<real_number>;
//==============================================================================
}  // namespace tatooine::color_scales
//==============================================================================
#endif

