#ifndef TATOOINE_COLOR_SCALES_BRBG_H
#define TATOOINE_COLOR_SCALES_BRBG_H
//==============================================================================
#include <tatooine/concepts.h>
#include <tatooine/vec.h>

#include <memory>
//==============================================================================
namespace tatooine::color_scales {
//==============================================================================
template <floating_point Real>
struct BrBG {
  using real_type  = Real;
  using this_type  = BrBG<Real>;
  using color_type = vec<Real, 3>;
  static constexpr std::size_t num_samples() { return 17; }
  //==============================================================================
 private:
  std::unique_ptr<color_type[]> m_data;

 public:
  auto data_container() -> color_type* { return m_data; }
  auto data_container() const -> color_type const* { return m_data; }
  auto data() -> color_type* { return m_data.get(); }
  auto data() const -> color_type const* { return m_data.get(); }
  //==============================================================================
  BrBG()
      : m_data{new color_type[]{
            {0.32941199999999998, 0.18823500000000001, 0.019608},
            {0.46720499999999998, 0.26943499999999998, 0.031911000000000002},
            {0.59999999999999998, 0.36562899999999998, 0.074202000000000004},
            {0.72548999999999997, 0.48373699999999997, 0.16032299999999999},
            {0.81299500000000002, 0.63583199999999995, 0.33640900000000001},
            {0.88688999999999996, 0.78123799999999999, 0.52787399999999995},
            {0.94348299999999996, 0.87473999999999996, 0.70011500000000004},
            {0.96316800000000002, 0.92979599999999996, 0.84159899999999999},
            {0.95724699999999996, 0.95993799999999996, 0.95955400000000002},
            {0.84406000000000003, 0.93287200000000003, 0.92018500000000003},
            {0.70396000000000003, 0.88642799999999999, 0.85928499999999997},
            {0.52925800000000001, 0.81507099999999999, 0.77070399999999994},
            {0.34625099999999998, 0.69181099999999995, 0.653057},
            {0.17585500000000001, 0.56201500000000004, 0.53064199999999995},
            {0.047905000000000003, 0.44144600000000001, 0.41007300000000002},
            {0.002307, 0.33217999999999998, 0.294348},
            {0, 0.235294, 0.18823500000000001}}} {}
  //----------------------------------------------------------------------------
  auto sample(real_type const t) const {
    if (t <= 0) {
      return m_data[0];
    }
    if (t >= 1) {
      return m_data[(num_samples() - 1)];
    }
    t *= num_samples() - 1;
    auto const i = static_cast<std::size_t>(std::floor(t));
    t            = t - i;
    return m_data[i] * (1 - t) + m_data[i + 1] * t;
  }
  auto operator()(real_type const t) const { return sample(t); }
};
//==============================================================================
BrBG()->BrBG<real_number>;
//==============================================================================
}  // namespace tatooine::color_scales
//==============================================================================
#endif

