#ifndef TATOOINE_LINE_SHADER_H
#define TATOOINE_LINE_SHADER_H
//==============================================================================
#include <yavin/shader.h>
#include <tatooine/mat.h>

#include <string_view>
#include <tatooine/filesystem.h>
//==============================================================================
namespace tatooine::gpu {
//==============================================================================
struct line_shader : yavin::shader {
  static constexpr std::string_view vert_shader_path =
      "@TATOOINE_LINE_SHADER_VERT_PATH@";
  static constexpr std::string_view geom_shader_path =
      "@TATOOINE_LINE_SHADER_GEOM_PATH@";
  static constexpr std::string_view frag_shader_path =
      "@TATOOINE_LINE_SHADER_FRAG_PATH@";
  const filesystem::file_time_type vert_last_write;
  const filesystem::file_time_type geom_last_write;
  const filesystem::file_time_type frag_last_write;
  //==============================================================================
  line_shader(float lr = 1, float lg = 0, float lb = 0, float cr = 0,
              float cg = 0, float cb = 0, float line_width = 10,
              float contour_width = 2, float ambient_factor = 0.5,
              float diffuse_factor = 0.5, float specular_factor = 1,
              float shininess = 10)
      : vert_last_write{filesystem::last_write_time(vert_shader_path)},
        geom_last_write{filesystem::last_write_time(geom_shader_path)},
        frag_last_write{filesystem::last_write_time(frag_shader_path)} {
    add_stage<yavin::vertexshader>(vert_shader_path.data());
    add_stage<yavin::geometryshader>(geom_shader_path.data());
    add_stage<yavin::fragmentshader>(frag_shader_path.data());
    create();
    set_line_color(lr, lg, lb);
    set_contour_color(cr, cg, cb);
    set_line_width(line_width);
    set_contour_width(contour_width);
    set_ambient_factor(ambient_factor);
    set_diffuse_factor(diffuse_factor);
    set_specular_factor(specular_factor);
    set_shininess(shininess);
  }
  //------------------------------------------------------------------------------
  bool files_changed() const {
    if (filesystem::last_write_time(vert_shader_path) > vert_last_write) {
      return true;
    }
    if (filesystem::last_write_time(geom_shader_path) > geom_last_write) {
      return true;
    }
    if (filesystem::last_write_time(frag_shader_path) > frag_last_write) {
      return true;
    }
    return false;
  }
  //------------------------------------------------------------------------------
  void set_projection_matrix(mat<float, 4, 4> const& projection_matrix) {
    set_uniform_mat4("projection_matrix", projection_matrix.data_ptr());
  }
  //------------------------------------------------------------------------------
  void set_modelview_matrix(mat<float, 4, 4> const& modelview_matrix) {
    set_uniform_mat4("modelview_matrix", modelview_matrix.data_ptr());
  }
  //------------------------------------------------------------------------------
  void set_line_color(float r, float g, float b) {
    set_uniform("line_color", r, g, b);
  }
  //------------------------------------------------------------------------------
  void set_contour_color(float r, float g, float b) {
    set_uniform("contour_color", r, g, b);
  }
  //------------------------------------------------------------------------------
  void set_line_width(float line_width) {
    set_uniform("line_width", line_width);
  }
  //------------------------------------------------------------------------------
  void set_contour_width(float contour_width) {
    set_uniform("contour_width", contour_width);
  }
  //------------------------------------------------------------------------------
  void set_ambient_factor(float ambient_factor) {
    set_uniform("ambient_factor", ambient_factor);
  }
  //------------------------------------------------------------------------------
  void set_diffuse_factor(float diffuse_factor) {
    set_uniform("diffuse_factor", diffuse_factor);
  }
  //------------------------------------------------------------------------------
  void set_specular_factor(float specular_factor) {
    set_uniform("specular_factor", specular_factor);
  }
  //------------------------------------------------------------------------------
  void set_shininess(float shininess) { set_uniform("shininess", shininess); }
  //------------------------------------------------------------------------------
  void set_animate(int animate) { set_uniform("animate", animate); }
  //------------------------------------------------------------------------------
  void set_animation_min_alpha(float animation_min_alpha) {
    set_uniform("animation_min_alpha", animation_min_alpha);
  }
  //------------------------------------------------------------------------------
  void set_general_alpha(float general_alpha) {
    set_uniform("general_alpha", general_alpha);
  }
  //------------------------------------------------------------------------------
  void set_fade_length(float fade_length) {
    set_uniform("fade_length", fade_length);
  }
  //------------------------------------------------------------------------------
  void set_time(float time) { set_uniform("time", time); }
};
//==============================================================================
}  // namespace tatooine::gpu
//==============================================================================
#endif
