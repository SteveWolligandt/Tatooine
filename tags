!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/6ad4e957/
A	include/tatooine/doublegyre.h	/^  Real                epsilon, omega, A;$/;"	m	struct:tatooine::numerical::doublegyre	typeref:typename:Real
A	include/tatooine/interpolation.h	/^  static constexpr mat<Real, 2, 2> A{{1, 0}, {-1, 1}};$/;"	m	struct:tatooine::interpolation::linear	typeref:typename:mat<Real,2,2>
A	include/tatooine/interpolation.h	/^  static constexpr mat<Real, 4, 4> A{{ 1,  0,  0,  0},$/;"	m	struct:tatooine::interpolation::hermite	typeref:typename:mat<Real,4,4>
A	include/tatooine/modified_doublegyre.h	/^  static constexpr Real A       = 0.1;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
ASCII	include/tatooine/vtk_legacy.h	/^enum Format { UNKNOWN_FORMAT, ASCII, BINARY };$/;"	e	enum:tatooine::vtk::Format
BINARY	include/tatooine/vtk_legacy.h	/^enum Format { UNKNOWN_FORMAT, ASCII, BINARY };$/;"	e	enum:tatooine::vtk::Format
CELL_DATA	include/tatooine/vtk_legacy.h	/^enum ReaderData { POINT_DATA, CELL_DATA, UNSPECIFIED_DATA };$/;"	e	enum:tatooine::vtk::ReaderData
CHAR	include/tatooine/vtk_legacy.h	/^  CHAR,$/;"	e	enum:tatooine::vtk::DataType
CellType	include/tatooine/vtk_legacy.h	/^enum CellType {$/;"	g	namespace:tatooine::vtk
DELETE	include/tatooine/grid.h	/^    enum Op { MOVE, DELETE, INSERT_BEFORE, INSERT_AFTER };$/;"	e	enum:tatooine::grid::mutate_seq::Op
DOUBLE	include/tatooine/vtk_legacy.h	/^  DOUBLE$/;"	e	enum:tatooine::vtk::DataType
DataType	include/tatooine/vtk_legacy.h	/^enum DataType {$/;"	g	namespace:tatooine::vtk
DatasetType	include/tatooine/vtk_legacy.h	/^enum DatasetType {$/;"	g	namespace:tatooine::vtk
Energy	include/tatooine/simulated_annealing.h	/^  using Energy = decltype(energy_fun(std::declval<Status>()));$/;"	t	function:tatooine::simulated_annealing
FIELD	include/tatooine/vtk_legacy.h	/^  FIELD$/;"	e	enum:tatooine::vtk::DatasetType
FLOAT	include/tatooine/vtk_legacy.h	/^  FLOAT,$/;"	e	enum:tatooine::vtk::DataType
Format	include/tatooine/vtk_legacy.h	/^enum Format { UNKNOWN_FORMAT, ASCII, BINARY };$/;"	g	namespace:tatooine::vtk
HEADS	include/tatooine/random.h	/^enum coin { HEADS, TAILS };$/;"	e	enum:tatooine::coin
HEXAHEDRON	include/tatooine/vtk_legacy.h	/^  HEXAHEDRON        = 12,$/;"	e	enum:tatooine::vtk::CellType
INSERT_AFTER	include/tatooine/grid.h	/^    enum Op { MOVE, DELETE, INSERT_BEFORE, INSERT_AFTER };$/;"	e	enum:tatooine::grid::mutate_seq::Op
INSERT_BEFORE	include/tatooine/grid.h	/^    enum Op { MOVE, DELETE, INSERT_BEFORE, INSERT_AFTER };$/;"	e	enum:tatooine::grid::mutate_seq::Op
INT	include/tatooine/vtk_legacy.h	/^  INT,$/;"	e	enum:tatooine::vtk::DataType
LINE	include/tatooine/vtk_legacy.h	/^  LINE              = 3,$/;"	e	enum:tatooine::vtk::CellType
LONG	include/tatooine/vtk_legacy.h	/^  LONG,$/;"	e	enum:tatooine::vtk::DataType
MOVE	include/tatooine/grid.h	/^    enum Op { MOVE, DELETE, INSERT_BEFORE, INSERT_AFTER };$/;"	e	enum:tatooine::grid::mutate_seq::Op
Op	include/tatooine/grid.h	/^    enum Op { MOVE, DELETE, INSERT_BEFORE, INSERT_AFTER };$/;"	g	function:tatooine::grid::mutate_seq
PIXEL	include/tatooine/vtk_legacy.h	/^  PIXEL             = 8,$/;"	e	enum:tatooine::vtk::CellType
POINT_DATA	include/tatooine/vtk_legacy.h	/^enum ReaderData { POINT_DATA, CELL_DATA, UNSPECIFIED_DATA };$/;"	e	enum:tatooine::vtk::ReaderData
POLYDATA	include/tatooine/vtk_legacy.h	/^  POLYDATA,$/;"	e	enum:tatooine::vtk::DatasetType
POLYGON	include/tatooine/vtk_legacy.h	/^  POLYGON           = 7,$/;"	e	enum:tatooine::vtk::CellType
POLY_LINE	include/tatooine/vtk_legacy.h	/^  POLY_LINE         = 4,$/;"	e	enum:tatooine::vtk::CellType
POLY_VERTEX	include/tatooine/vtk_legacy.h	/^  POLY_VERTEX       = 2,$/;"	e	enum:tatooine::vtk::CellType
PYRAMID	include/tatooine/vtk_legacy.h	/^  PYRAMID           = 14$/;"	e	enum:tatooine::vtk::CellType
QUAD	include/tatooine/vtk_legacy.h	/^  QUAD              = 9,$/;"	e	enum:tatooine::vtk::CellType
RECTILINEAR_GRID	include/tatooine/vtk_legacy.h	/^  RECTILINEAR_GRID,$/;"	e	enum:tatooine::vtk::DatasetType
ReaderData	include/tatooine/vtk_legacy.h	/^enum ReaderData { POINT_DATA, CELL_DATA, UNSPECIFIED_DATA };$/;"	g	namespace:tatooine::vtk
RealOut	include/tatooine/tensor.h	/^  using RealOut            = typename std::result_of<decltype(f)(Real)>::type;$/;"	t	function:tatooine::unary_operation
RealOut	include/tatooine/tensor.h	/^  using RealOut         = typename std::result_of<decltype(f)(Real)>::type;$/;"	t	function:tatooine::unary_operation
RealOut	include/tatooine/tensor.h	/^  using RealOut = typename std::result_of<decltype(f)(LhsReal, RhsReal)>::type;$/;"	t	function:tatooine::binary_operation
RealOut	include/tatooine/tensor.h	/^  using RealOut = typename std::result_of<decltype(f)(Real)>::type;$/;"	t	function:tatooine::unary_operation
SHORT	include/tatooine/vtk_legacy.h	/^  SHORT,$/;"	e	enum:tatooine::vtk::DataType
STRUCTURED_GRID	include/tatooine/vtk_legacy.h	/^  STRUCTURED_GRID,$/;"	e	enum:tatooine::vtk::DatasetType
STRUCTURED_POINTS	include/tatooine/vtk_legacy.h	/^  STRUCTURED_POINTS,$/;"	e	enum:tatooine::vtk::DatasetType
Status	include/tatooine/simulated_annealing.h	/^  using Status = std::decay_t<InitialStatus>;$/;"	t	function:tatooine::simulated_annealing	typeref:typename:std::decay_t<InitialStatus>
T	include/tatooine/chunked_data.h	/^  using T = decltype(create_chunk<S, N, R>());$/;"	t	struct:tatooine::create_chunk_type
TAILS	include/tatooine/random.h	/^enum coin { HEADS, TAILS };$/;"	e	enum:tatooine::coin
TATOOINE_ABCFLOW_H	include/tatooine/abcflow.h	/^#define TATOOINE_ABCFLOW_H$/;"	d
TATOOINE_ALGORITHM_H	include/tatooine/algorithm.h	/^#define TATOOINE_ALGORITHM_H$/;"	d
TATOOINE_BASE_BOOST_INTEGRATOR_H	include/tatooine/integration/boost/boostintegrator.h	/^#define TATOOINE_BASE_BOOST_INTEGRATOR_H$/;"	d
TATOOINE_BIND_H	include/tatooine/bind.h	/^#define TATOOINE_BIND_H$/;"	d
TATOOINE_BOOST_RK4_INTEGRATOR_H	include/tatooine/integration/boost/rungekutta4.h	/^#define TATOOINE_BOOST_RK4_INTEGRATOR_H$/;"	d
TATOOINE_BOOST_RKCK54_INTEGRATOR_H	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^#define TATOOINE_BOOST_RKCK54_INTEGRATOR_H$/;"	d
TATOOINE_BOUNDARY_SWITCH_H	include/tatooine/boundary_switch.h	/^#define TATOOINE_BOUNDARY_SWITCH_H$/;"	d
TATOOINE_BOUNDINGBOX_H	include/tatooine/boundingbox.h	/^#define TATOOINE_BOUNDINGBOX_H$/;"	d
TATOOINE_BOUSSINESQ_H	include/tatooine/boussinesq.h	/^#define TATOOINE_BOUSSINESQ_H$/;"	d
TATOOINE_CACHE_H	include/tatooine/cache.h	/^#define TATOOINE_CACHE_H$/;"	d
TATOOINE_CAVITY_H	include/tatooine/cavity.h	/^#define TATOOINE_CAVITY_H$/;"	d
TATOOINE_CELL_PARTITION_H	include/tatooine/cell_partition.h	/^#define TATOOINE_CELL_PARTITION_H$/;"	d
TATOOINE_CHRONO_H	include/tatooine/chrono.h	/^#define TATOOINE_CHRONO_H$/;"	d
TATOOINE_CHUNKED_DATA_H	include/tatooine/chunked_data.h	/^#define TATOOINE_CHUNKED_DATA_H$/;"	d
TATOOINE_CLONABLE_H	include/tatooine/clonable.h	/^#define TATOOINE_CLONABLE_H$/;"	d
TATOOINE_COMPUTE_SHADER_LAYOUT1D	include/tatooine/gpu/compute_shader_layout_literal.h	/^#define TATOOINE_COMPUTE_SHADER_LAYOUT1D(/;"	d
TATOOINE_COMPUTE_SHADER_LAYOUT2D	include/tatooine/gpu/compute_shader_layout_literal.h	/^#define TATOOINE_COMPUTE_SHADER_LAYOUT2D(/;"	d
TATOOINE_COMPUTE_SHADER_LAYOUT3D	include/tatooine/gpu/compute_shader_layout_literal.h	/^#define TATOOINE_COMPUTE_SHADER_LAYOUT3D(/;"	d
TATOOINE_CONCAT_STRING_VIEW_H	include/tatooine/concat_string_view.h	/^#define TATOOINE_CONCAT_STRING_VIEW_H$/;"	d
TATOOINE_CONSTANTS_H	include/tatooine/constants.h	/^#define TATOOINE_CONSTANTS_H$/;"	d
TATOOINE_CONSTANT_VECTORFIELD_H	include/tatooine/constant_vectorfield.h	/^#define TATOOINE_CONSTANT_VECTORFIELD_H$/;"	d
TATOOINE_COUNTEREXAMPLE_SADLO_H	include/tatooine/counterexample_sadlo.h	/^#define TATOOINE_COUNTEREXAMPLE_SADLO_H$/;"	d
TATOOINE_CRITICAL_POINTS_H	include/tatooine/critical_points.h	/^#define TATOOINE_CRITICAL_POINTS_H$/;"	d
TATOOINE_CRTP_H	include/tatooine/crtp.h	/^#define TATOOINE_CRTP_H$/;"	d
TATOOINE_CURVATURE_FIELD_H	include/tatooine/curvature_field.h	/^#define TATOOINE_CURVATURE_FIELD_H$/;"	d
TATOOINE_CURVE_TO_STREAMLINE_H	include/tatooine/curve_to_streamline.h	/^#define TATOOINE_CURVE_TO_STREAMLINE_H$/;"	d
TATOOINE_CXX	include/tatooine/cxxstd.h	/^  #define TATOOINE_CXX /;"	d
TATOOINE_CXX11	include/tatooine/cxxstd.h	/^  #define TATOOINE_CXX11 /;"	d
TATOOINE_CXX14	include/tatooine/cxxstd.h	/^  #define TATOOINE_CXX14 /;"	d
TATOOINE_CXX17	include/tatooine/cxxstd.h	/^  #define TATOOINE_CXX17 /;"	d
TATOOINE_CXX20	include/tatooine/cxxstd.h	/^  #define TATOOINE_CXX20 /;"	d
TATOOINE_CXX98	include/tatooine/cxxstd.h	/^  #define TATOOINE_CXX98 /;"	d
TATOOINE_CXXSTD	include/tatooine/cxxstd.h	/^    #define TATOOINE_CXXSTD /;"	d
TATOOINE_CXXSTD_H	include/tatooine/cxxstd.h	/^#define TATOOINE_CXXSTD_H$/;"	d
TATOOINE_DIFF_H	include/tatooine/diff.h	/^#define TATOOINE_DIFF_H$/;"	d
TATOOINE_DOUBLEGYRE_H	include/tatooine/doublegyre.h	/^#define TATOOINE_DOUBLEGYRE_H$/;"	d
TATOOINE_DUFFING_OSCILLATOR_H	include/tatooine/duffing_oscillator.h	/^#define TATOOINE_DUFFING_OSCILLATOR_H$/;"	d
TATOOINE_EDGESET_H	include/tatooine/edgeset.h	/^#define TATOOINE_EDGESET_H$/;"	d
TATOOINE_EDGE_H	include/tatooine/grid_edge.h	/^#define TATOOINE_EDGE_H$/;"	d
TATOOINE_EXTRACT_H	include/tatooine/extract.h	/^#define TATOOINE_EXTRACT_H$/;"	d
TATOOINE_FIELD_H	include/tatooine/field.h	/^#define TATOOINE_FIELD_H$/;"	d
TATOOINE_FIRST_PERSON_WINDOW_H	include/tatooine/gpu/first_person_window.h	/^#define TATOOINE_FIRST_PERSON_WINDOW_H$/;"	d
TATOOINE_FIXED_TIME_FIELD_H	include/tatooine/fixed_time_field.h	/^#define TATOOINE_FIXED_TIME_FIELD_H$/;"	d
TATOOINE_FLOWMAP_H	include/tatooine/flowmap.h	/^#define TATOOINE_FLOWMAP_H$/;"	d
TATOOINE_FOR_LOOP_H	include/tatooine/for_loop.h	/^#define TATOOINE_FOR_LOOP_H$/;"	d
TATOOINE_FTLE_H	include/tatooine/ftle.h	/^#define TATOOINE_FTLE_H$/;"	d
TATOOINE_FUNCTIONAL_H	include/tatooine/functional.h	/^#define TATOOINE_FUNCTIONAL_H$/;"	d
TATOOINE_GEOMETRY_CIRCLE_H	include/tatooine/geometry/circle.h	/^#define TATOOINE_GEOMETRY_CIRCLE_H$/;"	d
TATOOINE_GEOMETRY_PRIMITIVE_H	include/tatooine/geometry/primitive.h	/^#define TATOOINE_GEOMETRY_PRIMITIVE_H$/;"	d
TATOOINE_GPU_COMPUTE_SHADER_LAYOUT_LITERAL_H	include/tatooine/gpu/compute_shader_layout_literal.h	/^#define TATOOINE_GPU_COMPUTE_SHADER_LAYOUT_LITERAL_H$/;"	d
TATOOINE_GPU_FIELD_TO_GPU_H	include/tatooine/gpu/upload.h	/^#define TATOOINE_GPU_FIELD_TO_GPU_H$/;"	d
TATOOINE_GPU_LIC_H	include/tatooine/gpu/lic.h.in	/^#define TATOOINE_GPU_LIC_H$/;"	d	file:
TATOOINE_GPU_PATHLINE_RENDER_WINDOW_H	include/tatooine/gpu/pathline_render_window.h	/^#define TATOOINE_GPU_PATHLINE_RENDER_WINDOW_H$/;"	d
TATOOINE_GPU_REDUCE_H	include/tatooine/gpu/reduce.h.in	/^#define TATOOINE_GPU_REDUCE_H$/;"	d	file:
TATOOINE_GRID_H	include/tatooine/grid.h	/^#define TATOOINE_GRID_H$/;"	d
TATOOINE_GRID_SAMPLER_H	include/tatooine/grid_sampler.h	/^#define TATOOINE_GRID_SAMPLER_H$/;"	d
TATOOINE_GRID_VERTEX_EDGES_H	include/tatooine/grid_vertex_edges.h	/^#define TATOOINE_GRID_VERTEX_EDGES_H$/;"	d
TATOOINE_GRID_VERTEX_NEIGHBORS_H	include/tatooine/grid_vertex_neighbors.h	/^#define TATOOINE_GRID_VERTEX_NEIGHBORS_H$/;"	d
TATOOINE_HANDLE_H	include/tatooine/handle.h	/^#define TATOOINE_HANDLE_H$/;"	d
TATOOINE_HDF5_H	include/tatooine/hdf5.h	/^#define TATOOINE_HDF5_H$/;"	d
TATOOINE_HELICITY_FIELD_H	include/tatooine/helicity_field.h	/^#define TATOOINE_HELICITY_FIELD_H$/;"	d
TATOOINE_HOLDER_H	include/tatooine/holder.h	/^#define TATOOINE_HOLDER_H$/;"	d
TATOOINE_INDEX_ORDERING_H	include/tatooine/index_ordering.h	/^#define TATOOINE_INDEX_ORDERING_H$/;"	d
TATOOINE_INTEGRATION_INTEGRATOR_H	include/tatooine/integration/integrator.h	/^#define TATOOINE_INTEGRATION_INTEGRATOR_H$/;"	d
TATOOINE_INTEGRATION_VCLIBS_RK43_H	include/tatooine/integration/vclibs/rungekutta43.h	/^#define TATOOINE_INTEGRATION_VCLIBS_RK43_H$/;"	d
TATOOINE_INTERPOLATION_H	include/tatooine/interpolation.h	/^#define TATOOINE_INTERPOLATION_H$/;"	d
TATOOINE_INVOKE_OMITTED_H	include/tatooine/invoke_omitted.h	/^#define TATOOINE_INVOKE_OMITTED_H$/;"	d
TATOOINE_INVOKE_UNPACKED_H	include/tatooine/invoke_unpacked.h	/^#define TATOOINE_INVOKE_UNPACKED_H$/;"	d
TATOOINE_LAMBDA2_FIELD_H	include/tatooine/lambda2_field.h	/^#define TATOOINE_LAMBDA2_FIELD_H$/;"	d
TATOOINE_LAMBDA2_FIELD_H	include/tatooine/okubo_weiss_field.h	/^#define TATOOINE_LAMBDA2_FIELD_H$/;"	d
TATOOINE_LINE_H	include/tatooine/line.h	/^#define TATOOINE_LINE_H$/;"	d
TATOOINE_LINE_RENDERER_H	include/tatooine/gpu/line_renderer.h	/^#define TATOOINE_LINE_RENDERER_H$/;"	d
TATOOINE_LINE_SHADER_H	include/tatooine/gpu/line_shader.h.in	/^#define TATOOINE_LINE_SHADER_H$/;"	d	file:
TATOOINE_LINSPACE_H	include/tatooine/linspace.h	/^#define TATOOINE_LINSPACE_H$/;"	d
TATOOINE_MAKE_ARRAY_H	include/tatooine/make_array.h	/^#define TATOOINE_MAKE_ARRAY_H$/;"	d
TATOOINE_MAP_H	include/tatooine/map.h	/^#define TATOOINE_MAP_H$/;"	d
TATOOINE_MARCHING_CUBES_H	include/tatooine/marchingcubes.h	/^#define TATOOINE_MARCHING_CUBES_H$/;"	d
TATOOINE_MARCHING_CUBES_LOOKUP_TABLE_H	include/tatooine/marchingcubeslookuptable.h	/^#define TATOOINE_MARCHING_CUBES_LOOKUP_TABLE_H$/;"	d
TATOOINE_MATH_H	include/tatooine/math.h	/^#define TATOOINE_MATH_H$/;"	d
TATOOINE_MESH_H	include/tatooine/mesh.h	/^#define TATOOINE_MESH_H$/;"	d
TATOOINE_MODIFIED_DOUBLEGYRE_H	include/tatooine/modified_doublegyre.h	/^#define TATOOINE_MODIFIED_DOUBLEGYRE_H$/;"	d
TATOOINE_MULTIDIM_ARRAY_H	include/tatooine/multidim_array.h	/^#define TATOOINE_MULTIDIM_ARRAY_H$/;"	d
TATOOINE_MULTIDIM_H	include/tatooine/multidim.h	/^#define TATOOINE_MULTIDIM_H$/;"	d
TATOOINE_MULTIDIM_RESOLUTION_H	include/tatooine/multidim_resolution.h	/^#define TATOOINE_MULTIDIM_RESOLUTION_H$/;"	d
TATOOINE_NEWTON_RAPHSON_H	include/tatooine/newton_raphson.h	/^#define TATOOINE_NEWTON_RAPHSON_H$/;"	d
TATOOINE_OPENBLAS_H	include/tatooine/openblas.h	/^#define TATOOINE_OPENBLAS_H$/;"	d
TATOOINE_ORBIT_H	include/tatooine/orbit.h	/^#define TATOOINE_ORBIT_H$/;"	d
TATOOINE_PARALLEL_VECTORS_H	include/tatooine/parallel_vectors.h	/^#define TATOOINE_PARALLEL_VECTORS_H$/;"	d
TATOOINE_PARAMETERIZED_SURFACE_H	include/tatooine/parameterized_mesh.h	/^#define TATOOINE_PARAMETERIZED_SURFACE_H$/;"	d
TATOOINE_POINTSET_H	include/tatooine/pointset.h	/^#define TATOOINE_POINTSET_H$/;"	d
TATOOINE_POLYNOMIAL_H	include/tatooine/polynomial.h	/^#define TATOOINE_POLYNOMIAL_H$/;"	d
TATOOINE_POLYNOMIAL_LINE_H	include/tatooine/polynomial_line.h	/^#define TATOOINE_POLYNOMIAL_LINE_H$/;"	d
TATOOINE_PROPERTY_H	include/tatooine/property.h	/^#define TATOOINE_PROPERTY_H$/;"	d
TATOOINE_RANDOM_H	include/tatooine/random.h	/^#define TATOOINE_RANDOM_H$/;"	d
TATOOINE_RBC_H	include/tatooine/rbc.h	/^#define TATOOINE_RBC_H$/;"	d
TATOOINE_RENDER_TOPOLOGICAL_SKELETON	include/tatooine/render_topological_skeleton.h	/^#define TATOOINE_RENDER_TOPOLOGICAL_SKELETON$/;"	d
TATOOINE_RKF78_INTEGRATOR_H	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^#define TATOOINE_RKF78_INTEGRATOR_H$/;"	d
TATOOINE_SAMPLED_FIELD_H	include/tatooine/sampled_field.h	/^#define TATOOINE_SAMPLED_FIELD_H$/;"	d
TATOOINE_SIMPLE_TRI_MESH_H	include/tatooine/simple_tri_mesh.h	/^#define TATOOINE_SIMPLE_TRI_MESH_H$/;"	d
TATOOINE_SIMULATED_ANNEALING_H	include/tatooine/simulated_annealing.h	/^#define TATOOINE_SIMULATED_ANNEALING_H$/;"	d
TATOOINE_SINUSCOSINUS_H	include/tatooine/sinuscosinus.h	/^#define TATOOINE_SINUSCOSINUS_H$/;"	d
TATOOINE_SPACETIME_H	include/tatooine/spacetime_field.h	/^#define TATOOINE_SPACETIME_H$/;"	d
TATOOINE_STREAMSURFACE_H	include/tatooine/streamsurface.h	/^#define TATOOINE_STREAMSURFACE_H$/;"	d
TATOOINE_SUBGRID_H	include/tatooine/subgrid.h	/^#define TATOOINE_SUBGRID_H$/;"	d
TATOOINE_SYMBOLIC_FIELD_H	include/tatooine/symbolic_field.h	/^#define TATOOINE_SYMBOLIC_FIELD_H$/;"	d
TATOOINE_SYMBOLIC_H	include/tatooine/symbolic.h	/^#define TATOOINE_SYMBOLIC_H$/;"	d
TATOOINE_TENSOR_H	include/tatooine/tensor.h	/^#define TATOOINE_TENSOR_H$/;"	d
TATOOINE_TOPOLIGICAL_SKELEKTON	include/tatooine/topological_skeleton.h	/^#define TATOOINE_TOPOLIGICAL_SKELEKTON$/;"	d
TATOOINE_TYPE_TO_STR_H	include/tatooine/type_to_str.h	/^#define TATOOINE_TYPE_TO_STR_H$/;"	d
TATOOINE_TYPE_TRAITS_H	include/tatooine/type_traits.h	/^#define TATOOINE_TYPE_TRAITS_H$/;"	d
TATOOINE_UTILITY_H	include/tatooine/utility.h	/^#define TATOOINE_UTILITY_H$/;"	d
TATOOINE_VARIADIC_HELPERS_H	include/tatooine/variadic_helpers.h	/^#define TATOOINE_VARIADIC_HELPERS_H$/;"	d
TATOOINE_VERTEX_H	include/tatooine/grid_vertex.h	/^#define TATOOINE_VERTEX_H$/;"	d
TATOOINE_VORTICITY_FIELD_H	include/tatooine/vorticity_field.h	/^#define TATOOINE_VORTICITY_FIELD_H$/;"	d
TATOOINE_VTK_LEGACY_H	include/tatooine/vtk_legacy.h	/^#define TATOOINE_VTK_LEGACY_H$/;"	d
TATOOINE_WRITE_PNG_H	include/tatooine/write_png.h	/^#define TATOOINE_WRITE_PNG_H$/;"	d
TETRA	include/tatooine/vtk_legacy.h	/^  TETRA             = 10,$/;"	e	enum:tatooine::vtk::CellType
TRIANGLE	include/tatooine/vtk_legacy.h	/^  TRIANGLE          = 5,$/;"	e	enum:tatooine::vtk::CellType
TRIANGLE_STRIP	include/tatooine/vtk_legacy.h	/^  TRIANGLE_STRIP    = 6,$/;"	e	enum:tatooine::vtk::CellType
UNKNOWN_CELL_TYPE	include/tatooine/vtk_legacy.h	/^  UNKNOWN_CELL_TYPE = 0,$/;"	e	enum:tatooine::vtk::CellType
UNKNOWN_DATA_TYPE	include/tatooine/vtk_legacy.h	/^  UNKNOWN_DATA_TYPE,$/;"	e	enum:tatooine::vtk::DataType
UNKNOWN_FORMAT	include/tatooine/vtk_legacy.h	/^enum Format { UNKNOWN_FORMAT, ASCII, BINARY };$/;"	e	enum:tatooine::vtk::Format
UNKNOWN_TYPE	include/tatooine/vtk_legacy.h	/^  UNKNOWN_TYPE,$/;"	e	enum:tatooine::vtk::DatasetType
UNSIGNED_CHAR	include/tatooine/vtk_legacy.h	/^  UNSIGNED_CHAR,$/;"	e	enum:tatooine::vtk::DataType
UNSIGNED_INT	include/tatooine/vtk_legacy.h	/^  UNSIGNED_INT,$/;"	e	enum:tatooine::vtk::DataType
UNSIGNED_LONG	include/tatooine/vtk_legacy.h	/^  UNSIGNED_LONG,$/;"	e	enum:tatooine::vtk::DataType
UNSIGNED_SHORT	include/tatooine/vtk_legacy.h	/^  UNSIGNED_SHORT,$/;"	e	enum:tatooine::vtk::DataType
UNSPECIFIED_DATA	include/tatooine/vtk_legacy.h	/^enum ReaderData { POINT_DATA, CELL_DATA, UNSPECIFIED_DATA };$/;"	e	enum:tatooine::vtk::ReaderData
UNSTRUCTURED_GRID	include/tatooine/vtk_legacy.h	/^  UNSTRUCTURED_GRID,$/;"	e	enum:tatooine::vtk::DatasetType
VERTEX	include/tatooine/vtk_legacy.h	/^  VERTEX            = 1,$/;"	e	enum:tatooine::vtk::CellType
VOXEL	include/tatooine/vtk_legacy.h	/^  VOXEL             = 11,$/;"	e	enum:tatooine::vtk::CellType
WEDGE	include/tatooine/vtk_legacy.h	/^  WEDGE             = 13,$/;"	e	enum:tatooine::vtk::CellType
_Q_IN_NULL	include/tatooine/bidiagonal_system_solver.h	/^#define _Q_IN_NULL$/;"	d
__TATOOINE_AMIRA_READER_H__	include/tatooine/amira_file.h	/^#define __TATOOINE_AMIRA_READER_H__$/;"	d
__TATOOINE_BIDIAGONAL_SYSTEM_QR_SOLVER_H	include/tatooine/bidiagonal_system_solver.h	/^#define __TATOOINE_BIDIAGONAL_SYSTEM_QR_SOLVER_H$/;"	d
__TATOOINE_BOOSTRESIZER__	include/tatooine/integration/boost/boostresizer.h	/^#define __TATOOINE_BOOSTRESIZER__$/;"	d
__TATOOINE_MEMORY_USAGE_H__	include/tatooine/memory_usage.h	/^#define __TATOOINE_MEMORY_USAGE_H__$/;"	d
__TATOOINE_RKD5_INTEGRATOR_H__	include/tatooine/integration/boost/rungekuttadopri5.h	/^#define __TATOOINE_RKD5_INTEGRATOR_H__$/;"	d
__TATOOINE_STRING_CONVERSION_H__	include/tatooine/string_conversion.h	/^#define __TATOOINE_STRING_CONVERSION_H__$/;"	d
__TATOOINE_SWAP_ENDIANESS_H__	include/tatooine/swap_endianess.h	/^#define __TATOOINE_SWAP_ENDIANESS_H__$/;"	d
__TATOOINE_TEMPLATE_HELPER_H__	include/tatooine/template_helper.h	/^#define __TATOOINE_TEMPLATE_HELPER_H__$/;"	d
__anon0206fcdb0102	include/tatooine/marchingcubes.h	/^  auto process_cube = [&](auto ix, auto iy, auto iz) {$/;"	f	function:tatooine::marchingcubes	file:
__anon0206fcdb0202	include/tatooine/marchingcubes.h	/^      [&](auto ix, auto iy, auto iz, const auto & \/*ps*\/) -> const auto& {$/;"	f	function:tatooine::marchingcubes	typeref:typename:const auto &	file:
__anon0206fcdb0302	include/tatooine/marchingcubes.h	/^      grid{linspace{bb.min(0), bb.max(0), data.size(0)},$/;"	f	function:tatooine::marchingcubes	typeref:typename:const auto &{},grid	file:
__anon0206fcdb0402	include/tatooine/marchingcubes.h	/^      [&](auto ix, auto iy, auto iz, const auto & \/*ps*\/) -> const auto& {$/;"	f	function:tatooine::marchingcubes	typeref:typename:const auto &	file:
__anon0206fcdb0502	include/tatooine/marchingcubes.h	/^      grid{linspace{bb.min(0), bb.max(0), data.size(0)},$/;"	f	function:tatooine::marchingcubes	typeref:typename:const auto &{},grid	file:
__anon0206fcdb0602	include/tatooine/marchingcubes.h	/^                                      const auto& pos) { return sf(pos, t); },$/;"	f	function:tatooine::marchingcubes	file:
__anon036163190102	include/tatooine/grid_sampler.h	/^        [&pos, this](const auto... xs) { return sample(xs...); }, unpack(pos));$/;"	f	function:tatooine::base_grid_sampler::sample	file:
__anon036163190202	include/tatooine/grid_sampler.h	/^        [&pos, this](const auto... xs) { return sample(xs...); }, unpack(pos));$/;"	f	function:tatooine::base_grid_sampler::sample	file:
__anon036163190302	include/tatooine/grid_sampler.h	/^    boost::transform(listener.data, begin(casted_data), [](const auto& v) {$/;"	f	function:tatooine::grid_sampler::read_vtk	file:
__anon0d3d0c240102	include/tatooine/simple_tri_mesh.h	/^        auto three_dims = [](const vec<Real, 2>& v2) {$/;"	f	function:tatooine::simple_tri_mesh::write_vtk	file:
__anon20919cf80102	include/tatooine/gpu/lic.h.in	/^  boost::generate(noise_data, [&rand] { return rand(); });$/;"	f	function:tatooine::gpu::lic	file:
__anon4938fbf60102	include/tatooine/integration/vclibs/rungekutta43.h	/^    auto dy = [&vf](Real t, const pos_t& y) -> typename ode_t::maybe_vec {$/;"	f	function:tatooine::integration::vclibs::rungekutta43::calc_forward	typeref:typename:ode_t::maybe_vec	file:
__anon4938fbf60202	include/tatooine/integration/vclibs/rungekutta43.h	/^                                                        const auto& dy) {$/;"	f	function:tatooine::integration::vclibs::rungekutta43::calc_forward	file:
__anon4938fbf60302	include/tatooine/integration/vclibs/rungekutta43.h	/^    auto dy = [&vf](Real t, const pos_t& y) -> typename ode_t::maybe_vec {$/;"	f	function:tatooine::integration::vclibs::rungekutta43::calc_backward	typeref:typename:ode_t::maybe_vec	file:
__anon4938fbf60402	include/tatooine/integration/vclibs/rungekutta43.h	/^                                                   const auto& dy) {$/;"	f	function:tatooine::integration::vclibs::rungekutta43::calc_backward	file:
__anon5d8bc2a10102	include/tatooine/random.h	/^  boost::generate(rand_data, [&] { return rand(); });$/;"	f	function:tatooine::random_uniform_vector	file:
__anon61df9ae40102	include/tatooine/field.h	/^      lhs, rhs, [](const auto& lhs, const auto& rhs) { return dot(lhs, rhs); });$/;"	f	function:tatooine::dot	file:
__anon61df9ae40202	include/tatooine/field.h	/^      f, [](const auto& v) { return -v; });$/;"	f	function:tatooine::operator -	file:
__anon61df9ae40302	include/tatooine/field.h	/^      f, [](const auto& v) { return normalize(v); });$/;"	f	function:tatooine::normalize	file:
__anon61df9ae40402	include/tatooine/field.h	/^      f, [](const auto& v) { return length(v); });$/;"	f	function:tatooine::length	file:
__anon61df9ae40502	include/tatooine/field.h	/^      lhs, rhs, [](const auto& lhs, const auto& rhs) { return lhs + rhs; });$/;"	f	function:tatooine::operator +	file:
__anon61df9ae40602	include/tatooine/field.h	/^      lhs, rhs, [](const auto& lhs, const auto& rhs) { return lhs * rhs; });$/;"	f	function:tatooine::operator *	file:
__anon61df9ae40702	include/tatooine/field.h	/^      lhs, rhs, [](const auto& lhs, const auto& rhs) { return lhs * rhs; });$/;"	f	function:tatooine::operator *	file:
__anon6b07e43b0102	include/tatooine/tensor.h	/^    for_indices([this, &f](const auto... is) { at(is...) = f(at(is...)); });$/;"	f	function:tatooine::base_tensor::unary_operation	file:
__anon6b07e43b0202	include/tatooine/tensor.h	/^    for_indices([this, &f, &other](const auto... is) {$/;"	f	function:tatooine::base_tensor::binary_operation	file:
__anon6b07e43b0302	include/tatooine/tensor.h	/^    for_indices([this, &other](const auto... is) { at(is...) = other(is...); });$/;"	f	function:tatooine::base_tensor::assign_other_tensor	file:
__anon6b07e43b0402	include/tatooine/tensor.h	/^    for_indices([&](const auto... is) { at(is...) += other(is...); });$/;"	f	function:tatooine::base_tensor::operator +=	file:
__anon6b07e43b0502	include/tatooine/tensor.h	/^    for_indices([&](const auto... is) { at(is...) += other; });$/;"	f	function:tatooine::base_tensor::operator +=	file:
__anon6b07e43b0602	include/tatooine/tensor.h	/^    for_indices([&](const auto... is) { at(is...) -= other(is...); });$/;"	f	function:tatooine::base_tensor::operator -=	file:
__anon6b07e43b0702	include/tatooine/tensor.h	/^    for_indices([&](const auto... is) { at(is...) -= other; });$/;"	f	function:tatooine::base_tensor::operator -=	file:
__anon6b07e43b0802	include/tatooine/tensor.h	/^    for_indices([&](const auto... is) { at(is...) *= other; });$/;"	f	function:tatooine::base_tensor::operator *=	file:
__anon6b07e43b0902	include/tatooine/tensor.h	/^    for_indices([&](const auto... is) { at(is...) \/= other; });$/;"	f	function:tatooine::base_tensor::operator /=	file:
__anon6b07e43b0a02	include/tatooine/tensor.h	/^    auto insert_row = [r = 0UL, this](const auto& row) mutable {$/;"	f	struct:tatooine::mat	file:
__anon6b07e43b0b02	include/tatooine/tensor.h	/^  t.for_indices([&](const auto... is) { m = std::min(m, t(is...)); });$/;"	f	function:tatooine::min	file:
__anon6b07e43b0c02	include/tatooine/tensor.h	/^  t.for_indices([&](const auto... is) { m = std::max(m, t(is...)); });$/;"	f	function:tatooine::max	file:
__anon6b07e43b0d02	include/tatooine/tensor.h	/^  return unary_operation([](const auto& c) { return -c; }, t);$/;"	f	function:tatooine::operator -	file:
__anon6b07e43b0e02	include/tatooine/tensor.h	/^  return unary_operation([scalar](const auto& c) { return c + scalar; }, lhs);$/;"	f	function:tatooine::operator +	file:
__anon6b07e43b0f02	include/tatooine/tensor.h	/^      [scalar](const auto& component) { return component * scalar; }, t);$/;"	f	function:tatooine::operator *	file:
__anon6b07e43b1002	include/tatooine/tensor.h	/^      [scalar](const auto& component) { return component * scalar; }, t);$/;"	f	function:tatooine::operator *	file:
__anon6b07e43b1102	include/tatooine/tensor.h	/^      [scalar](const auto& component) { return component \/ scalar; }, t);$/;"	f	function:tatooine::operator /	file:
__anon6b07e43b1202	include/tatooine/tensor.h	/^      [scalar](const auto& component) { return scalar \/ component; }, t);$/;"	f	function:tatooine::operator /	file:
__anon6b07e43b1302	include/tatooine/tensor.h	/^  lhs.for_indices([&](const auto... is) {$/;"	f	function:tatooine::approx_equal	file:
__anon6b07e43b1402	include/tatooine/tensor.h	/^  t_out.for_indices([&](const auto... is) {$/;"	f	function:tatooine::evtod	file:
__anon6b07e43b1502	include/tatooine/tensor.h	/^      [&](const auto& component) { return component.diff(symbol, nth); }, t_in);$/;"	f	function:tatooine::diff	file:
__anon6b07e43b1602	include/tatooine/tensor.h	/^  m_in.for_indices([&](const auto... is) { m_out(is...) = m_in(is...); });$/;"	f	function:tatooine::to_ginac_matrix	file:
__anon6b07e43b1702	include/tatooine/tensor.h	/^  m_out.for_indices([&](const auto... is) { m_out(is...) = m_in(is...); });$/;"	f	function:tatooine::to_mat	file:
__anon6b07e43b1802	include/tatooine/tensor.h	/^  m.for_indices([&m](const auto... is) { m(is...) = m(is...).eval(); });$/;"	f	function:tatooine::eval	file:
__anon6b07e43b1902	include/tatooine/tensor.h	/^  m.for_indices([&m](const auto... is) { m(is...) = m(is...).evalf(); });$/;"	f	function:tatooine::evalf	file:
__anon6b07e43b1a02	include/tatooine/tensor.h	/^  m.for_indices([&m](const auto... is) { m(is...) = m(is...).evalm(); });$/;"	f	function:tatooine::evalm	file:
__anon6b07e43b1b02	include/tatooine/tensor.h	/^  m.for_indices([&m](const auto... is) { m(is...) = m(is...).expand(); });$/;"	f	function:tatooine::expand	file:
__anon6b07e43b1c02	include/tatooine/tensor.h	/^  m.for_indices([&m](const auto... is) { m(is...).normal(); });$/;"	f	function:tatooine::normal	file:
__anon6e1861120102	include/tatooine/parallel_vectors.h	/^      [&line_segments, &getv, &getw, &g, &mutex, &preds...](size_t ix, size_t iy, size_t iz) {$/;"	f	function:tatooine::detail::calc	file:
__anon6e1861120202	include/tatooine/parallel_vectors.h	/^      [&vf, t](auto \/*ix*\/, auto \/*iy*\/, auto \/*iz*\/, const auto& p) {$/;"	f	function:tatooine::parallel_vectors	file:
__anon6e1861120302	include/tatooine/parallel_vectors.h	/^      [&wf, t](auto \/*ix*\/, auto \/*iy*\/, auto \/*iz*\/, const auto& p) {$/;"	f	function:tatooine::parallel_vectors	file:
__anon6e1861120402	include/tatooine/parallel_vectors.h	/^      [&vf](auto ix, auto iy, auto iz, const auto & \/*p*\/) -> const auto& {$/;"	f	function:tatooine::parallel_vectors	typeref:typename:const auto &	file:
__anon6e1861120502	include/tatooine/parallel_vectors.h	/^      [&wf](auto ix, auto iy, auto iz, const auto & \/*p*\/) -> const auto& {$/;"	f	function:tatooine::parallel_vectors	typeref:typename:const auto &	file:
__anon6e1861120602	include/tatooine/parallel_vectors.h	/^      grid{linspace{bb.min(0), bb.max(0), vf.size(0)},$/;"	f	function:tatooine::parallel_vectors	typeref:typename:const auto &{},grid	file:
__anon78cf3e660102	include/tatooine/gpu/pathline_render_window.h	/^    add_key_pressed_event([&](auto k) {$/;"	f	function:tatooine::gpu::pathline_render_window::pathline_render_window	file:
__anon78cf3e660202	include/tatooine/gpu/pathline_render_window.h	/^    render_loop([&](const auto& dt) {$/;"	f	function:tatooine::gpu::pathline_render_window::start	file:
__anon89d248e60102	include/tatooine/grid.h	/^    return invoke_unpacked([&](auto... is) { return vertex_at(is...); },$/;"	f	function:tatooine::grid::vertex_at	file:
__anon89d248e60202	include/tatooine/grid.h	/^    auto first_vertex = [&] {$/;"	f	function:tatooine::grid::edge_at	file:
__anon89d248e60302	include/tatooine/grid.h	/^        [&](const auto& vn) { return boost::find(seq, vn) == end(seq); });$/;"	f	function:tatooine::grid::free_neighbors	file:
__anon89d248e60402	include/tatooine/grid.h	/^          auto angle_straight = [&](const auto& right_vertex) {$/;"	f	function:tatooine::grid::random_straight_vertex_sequence	file:
__anon89d248e60502	include/tatooine/grid.h	/^      const vertex_set prev_intersection = [&]() {$/;"	f	function:tatooine::grid::mutate_seq	file:
__anon89d248e60602	include/tatooine/grid.h	/^      const vertex_set next_intersection = [&]() {$/;"	f	function:tatooine::grid::mutate_seq	file:
__anon89d248e60702	include/tatooine/grid.h	/^        auto angle_straight = [&](const auto& left_vertex) {$/;"	f	function:tatooine::grid::mutate_seq_straight_prev_at	file:
__anon89d248e60802	include/tatooine/grid.h	/^        auto angle_straight = [&](const auto& right_vertex) {$/;"	f	function:tatooine::grid::mutate_seq_straight_next_at	file:
__anon94c425c30102	include/tatooine/multidim_array.h	/^        [&](const auto& \/*c*\/) { return static_cast<T>(rand.get()); });$/;"	f	function:tatooine::static_multidim_array::static_multidim_array	file:
__anon94c425c30202	include/tatooine/multidim_array.h	/^        [&](const auto& \/*c*\/) { return static_cast<T>(rand.get()); });$/;"	f	function:tatooine::static_multidim_array::static_multidim_array	file:
__anon94c425c30302	include/tatooine/multidim_array.h	/^        [&](const auto& \/*c*\/) { return static_cast<T>(rand.get()); });$/;"	f	function:tatooine::dynamic_multidim_array::dynamic_multidim_array	file:
__anon94c425c30402	include/tatooine/multidim_array.h	/^        [&](const auto& \/*c*\/) { return static_cast<T>(rand.get()); });$/;"	f	function:tatooine::dynamic_multidim_array::dynamic_multidim_array	file:
__anon94c425c30502	include/tatooine/multidim_array.h	/^        [&](const auto& \/*c*\/) { return static_cast<T>(rand.get()); });$/;"	f	function:tatooine::dynamic_multidim_array::dynamic_multidim_array	file:
__anon94c425c30602	include/tatooine/multidim_array.h	/^        [&](const auto& \/*c*\/) { return static_cast<T>(rand.get()); });$/;"	f	function:tatooine::dynamic_multidim_array::dynamic_multidim_array	file:
__anon94dbf9a80102	include/tatooine/line.h	/^          [&]() {$/;"	f	function:tatooine::parameterized_line::resample_properties	file:
__anon94dbf9a80202	include/tatooine/line.h	/^    const auto& x0 = [&]() {$/;"	f	function:tatooine::parameterized_line::tangent_at	file:
__anon94dbf9a80302	include/tatooine/line.h	/^    const auto& x1 = [&]() {$/;"	f	function:tatooine::parameterized_line::tangent_at	file:
__anon94dbf9a80402	include/tatooine/line.h	/^    const auto& x2 = [&]() {$/;"	f	function:tatooine::parameterized_line::tangent_at	file:
__anon94dbf9a80502	include/tatooine/line.h	/^    const auto& t0 = [&]() -> const auto& {$/;"	f	function:tatooine::parameterized_line::tangent_at	typeref:typename:const auto &	file:
__anon94dbf9a80602	include/tatooine/line.h	/^    const auto& t1 = [&]() -> const auto& {$/;"	f	function:tatooine::parameterized_line::tangent_at	typeref:typename:const auto &	file:
__anon94dbf9a80702	include/tatooine/line.h	/^    const auto& t2 = [&]() -> const auto& {$/;"	f	function:tatooine::parameterized_line::tangent_at	typeref:typename:const auto &	file:
__anon99a07b350102	include/tatooine/streamsurface.h	/^    auto find_best_predecessor = [this](const auto v, const auto& pred_range) {$/;"	f	function:tatooine::front_evolving_streamsurface_discretization::subdivide	file:
__anon99a07b350202	include/tatooine/streamsurface.h	/^          auto d = [&] {$/;"	f	function:tatooine::front_evolving_streamsurface_discretization::reduce	file:
__anona005acd80102	include/tatooine/multidim_resolution.h	/^    return invoke_unpacked([](auto... is) { return in_range(is...); },$/;"	f	function:tatooine::static_multidim_resolution::in_range	file:
__anona005acd80202	include/tatooine/multidim_resolution.h	/^    return invoke_unpacked([](auto... is) { return plain_index(is...); },$/;"	f	function:tatooine::static_multidim_resolution::plain_index	file:
__anona005acd80302	include/tatooine/multidim_resolution.h	/^    return invoke_unpacked([this](auto... is) { return in_range(is...); },$/;"	f	function:tatooine::dynamic_multidim_resolution::in_range	file:
__anona005acd80402	include/tatooine/multidim_resolution.h	/^        [&](auto&&... is) { return Indexing::plain_index(m_size, is...); },$/;"	f	function:tatooine::dynamic_multidim_resolution::plain_index	file:
__anona04ce85c0102	include/tatooine/make_array.h	/^  return invoke_unpacked([](auto&&... data) { return make_array<T>(data...); },$/;"	f	function:tatooine::make_array	file:
__anona6bc4c490102	include/tatooine/sampled_field.h	/^          [&](const auto... xs) { return m_sampler->sample(xs...); },$/;"	f	struct:tatooine::sampled_field	file:
__anona6bc4c490202	include/tatooine/sampled_field.h	/^          [&](const auto... xs) { return m_sampler->sample(xs..., t); },$/;"	f	struct:tatooine::sampled_field	file:
__anona6bc4c490302	include/tatooine/sampled_field.h	/^    auto on_grid = [&] {$/;"	f	struct:tatooine::sampled_field	file:
__anona6bc4c490402	include/tatooine/sampled_field.h	/^            [&](const auto... xs) { return m_sampler->in_domain(xs...); },$/;"	f	function:tatooine::sampled_field::__anona6bc4c490302	file:
__anona6bc4c490502	include/tatooine/sampled_field.h	/^            [&](const auto... xs) { return m_sampler->in_domain(xs..., t); },$/;"	f	function:tatooine::sampled_field::__anona6bc4c490302	file:
__anonb20f54d90102	include/tatooine/parameterized_mesh.h	/^      bary.for_indices([&](const auto... is) {$/;"	f	function:tatooine::parameterized_mesh::sample	file:
__anonc1bb5a7b0102	include/tatooine/chunked_data.h	/^        [this, &new_chunk_structure, &new_chunks](auto... is) {$/;"	f	function:tatooine::chunked_data::resize	file:
__anond62d37cf0102	include/tatooine/integration/boost/boostintegrator.h	/^        [&v, tau, t0](const pos_t &x, pos_t &sample, Real t) {$/;"	f	function:tatooine::integration::boost::integrator::calc_forward	file:
__anond62d37cf0202	include/tatooine/integration/boost/boostintegrator.h	/^        [&integral, tau, t0](const pos_t &x, Real t) {$/;"	f	function:tatooine::integration::boost::integrator::calc_forward	file:
__anond62d37cf0302	include/tatooine/integration/boost/boostintegrator.h	/^        [&v, tau, t0](const pos_t &x, pos_t &sample, Real t) {$/;"	f	function:tatooine::integration::boost::integrator::calc_backward	file:
__anond62d37cf0402	include/tatooine/integration/boost/boostintegrator.h	/^        [&integral, tau, t0](const pos_t &x, Real t) {$/;"	f	function:tatooine::integration::boost::integrator::calc_backward	file:
__anondf1ecfd10102	include/tatooine/index_ordering.h	/^        [&](auto i) {$/;"	f	function:tatooine::x_fastest::plain_index	file:
__anondf44ab070102	include/tatooine/critical_points.h	/^               transformed([x, y, &sampler](const auto& st) {$/;"	f	function:tatooine::find_critical_points	file:
_cxx	include/tatooine/cxxstd.h	/^struct _cxx {};$/;"	s	namespace:tatooine
_cxx11	include/tatooine/cxxstd.h	/^struct _cxx11 {};$/;"	s	namespace:tatooine
_cxx14	include/tatooine/cxxstd.h	/^struct _cxx14 {};$/;"	s	namespace:tatooine
_cxx17	include/tatooine/cxxstd.h	/^struct _cxx17 {};$/;"	s	namespace:tatooine
_cxx20	include/tatooine/cxxstd.h	/^struct _cxx20 {};$/;"	s	namespace:tatooine
_cxx98	include/tatooine/cxxstd.h	/^struct _cxx98 {};$/;"	s	namespace:tatooine
_planerot	include/tatooine/bidiagonal_system_solver.h	/^void _planerot(T _c, T _s, T* __restrict__ _x) {$/;"	f	namespace:tatooine	typeref:typename:void
abcflow	include/tatooine/abcflow.h	/^  constexpr abcflow(const real_t a = 1, const real_t b = 1, const real_t c = 1)$/;"	f	struct:tatooine::numerical::abcflow
abcflow	include/tatooine/abcflow.h	/^  constexpr abcflow(const real_t a = 1, const real_t b = 1,$/;"	f	struct:tatooine::symbolic::abcflow
abcflow	include/tatooine/abcflow.h	/^struct abcflow : field<abcflow<real_t>, real_t, 3, 3> {$/;"	s	namespace:tatooine::numerical
abcflow	include/tatooine/abcflow.h	/^struct abcflow : field<real_t, 3, 3> {$/;"	s	namespace:tatooine::symbolic
abs_tol	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto abs_tol       = VC::odeint::AbsTol;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
add_dimension	include/tatooine/grid.h	/^  auto add_dimension(const linspace<OtherReal>& additional_dimension) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
add_dimension	include/tatooine/grid.h	/^  auto add_dimension(const linspace<OtherReal>& additional_dimension,$/;"	f	class:tatooine::grid	typeref:typename:auto
add_edge_property	include/tatooine/edgeset.h	/^  auto& add_edge_property(const std::string& name, const T& value = T{}) {$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
add_face_property	include/tatooine/mesh.h	/^  auto& add_face_property(const std::string& name, const T& value = T{}) {$/;"	f	class:tatooine::mesh	typeref:typename:auto &
add_face_property	include/tatooine/simple_tri_mesh.h	/^  auto& add_face_property(const std::string& name, const T& value = T{}) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto &
add_key_pressed_event	include/tatooine/gpu/first_person_window.h	/^  void add_key_pressed_event(F&& f) {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
add_key_released_event	include/tatooine/gpu/first_person_window.h	/^  void add_key_released_event(F&& f) {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
add_link_properties	include/tatooine/edgeset.h	/^  void add_link_properties() {$/;"	f	class:tatooine::edgeset	typeref:typename:void
add_link_properties	include/tatooine/mesh.h	/^  void add_link_properties() {$/;"	f	class:tatooine::mesh	typeref:typename:void
add_listener	include/tatooine/vtk_legacy.h	/^  void add_listener(legacy_file_listener &listener) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
add_obstacle	include/tatooine/sampled_field.h	/^  auto& add_obstacle(const Obstacle& obstacle) {$/;"	f	struct:tatooine::sampled_field	typeref:typename:auto &
add_uv_prop	include/tatooine/parameterized_mesh.h	/^  auto add_uv_prop() {$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto
add_uv_prop	include/tatooine/streamsurface.h	/^  auto& add_uv_prop() { return this->template add_vertex_property<uv_t>("uv"); }$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto &
add_vertex_property	include/tatooine/line.h	/^  auto& add_vertex_property(const std::string& name, const T& value = T{}) {$/;"	f	struct:tatooine::line	typeref:typename:auto &
add_vertex_property	include/tatooine/pointset.h	/^  auto& add_vertex_property(const std::string& name, const T& value = T{}) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
adjacent_faces	include/tatooine/mesh.h	/^  auto adjacent_faces(const face_cont_t& faces) {$/;"	f	class:tatooine::mesh	typeref:typename:auto
advance	include/tatooine/line.h	/^  auto& advance(const size_t inc = 1) const {$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:auto &
advance	include/tatooine/line.h	/^  auto& advance(const size_t inc = 1) const {$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:auto &
advance	include/tatooine/line.h	/^auto& advance($/;"	f	namespace:tatooine	typeref:typename:auto &
advance	include/tatooine/line.h	/^auto& advance(line_vertex_iterator<Line, Real, N, Handle, Value, Reference>& it,$/;"	f	namespace:tatooine	typeref:typename:auto &
advance	include/tatooine/linspace.h	/^inline auto& advance(linspace_iterator<Real>& l, long n = 1) {$/;"	f	namespace:tatooine	typeref:typename:auto &
all_same	include/tatooine/template_helper.h	/^static constexpr bool all_same = all_same_t<Ts...>::value;$/;"	v	namespace:tatooine::template_helper	typeref:typename:bool
all_same_t	include/tatooine/template_helper.h	/^struct all_same_t<T0, T1, Ts...> {$/;"	s	namespace:tatooine::template_helper
all_same_t	include/tatooine/template_helper.h	/^struct all_same_t<T> {$/;"	s	namespace:tatooine::template_helper
allocator_type	include/tatooine/property.h	/^  using allocator_type         = typename container_t::allocator_type;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::allocator_type
allocator_type	include/tatooine/property.h	/^  using allocator_type         = typename container_t::allocator_type;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::allocator_type
ambient_factor	include/tatooine/gpu/pathline_render_window.h	/^  float                             ambient_factor;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
amira	include/tatooine/amira_file.h	/^namespace tatooine::amira {$/;"	n	namespace:tatooine
angle	include/tatooine/tensor.h	/^auto angle(const base_tensor<Tensor0, Real0, N>& v0,$/;"	f	namespace:tatooine	typeref:typename:auto
animate	include/tatooine/gpu/pathline_render_window.h	/^  bool                              animate;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:bool
animation_min_alpha	include/tatooine/gpu/pathline_render_window.h	/^  float                             animation_min_alpha;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
approx_equal	include/tatooine/tensor.h	/^constexpr bool approx_equal(const base_tensor<LhsTensor, LhsReal, Dims...>& lhs,$/;"	f	namespace:tatooine	typeref:typename:bool
arc_length	include/tatooine/line.h	/^  auto arc_length() const {$/;"	f	struct:tatooine::line	typeref:typename:auto
arc_length	include/tatooine/line.h	/^  auto arc_length() const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
arc_length	include/tatooine/polynomial_line.h	/^  constexpr auto arc_length(const linspace<Real>& range) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
are_arithmetic	include/tatooine/type_traits.h	/^struct are_arithmetic<> : std::false_type {};$/;"	s	namespace:tatooine
are_arithmetic	include/tatooine/type_traits.h	/^struct are_arithmetic<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_arithmetic	include/tatooine/type_traits.h	/^struct are_arithmetic<T>$/;"	s	namespace:tatooine
are_arithmetic_complex_or_symbolic	include/tatooine/type_traits.h	/^struct are_arithmetic_complex_or_symbolic$/;"	s	namespace:tatooine
are_arithmetic_complex_or_symbolic_v	include/tatooine/type_traits.h	/^static constexpr auto are_arithmetic_complex_or_symbolic_v =$/;"	v	namespace:tatooine	typeref:typename:auto
are_arithmetic_or_complex	include/tatooine/type_traits.h	/^struct are_arithmetic_or_complex$/;"	s	namespace:tatooine
are_arithmetic_or_complex_v	include/tatooine/type_traits.h	/^static constexpr auto are_arithmetic_or_complex_v =$/;"	v	namespace:tatooine	typeref:typename:auto
are_arithmetic_or_symbolic	include/tatooine/type_traits.h	/^struct are_arithmetic_or_symbolic$/;"	s	namespace:tatooine
are_arithmetic_or_symbolic_v	include/tatooine/type_traits.h	/^static constexpr auto are_arithmetic_or_symbolic_v =$/;"	v	namespace:tatooine	typeref:typename:auto
are_arithmetic_v	include/tatooine/type_traits.h	/^static constexpr auto are_arithmetic_v = are_arithmetic<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_complex	include/tatooine/type_traits.h	/^struct are_complex<> : std::false_type {};$/;"	s	namespace:tatooine
are_complex	include/tatooine/type_traits.h	/^struct are_complex<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_complex	include/tatooine/type_traits.h	/^struct are_complex<T> : std::integral_constant<bool, is_complex_v<T>> {};$/;"	s	namespace:tatooine
are_complex_v	include/tatooine/type_traits.h	/^static constexpr auto are_complex_v = are_complex<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_direct_neighbors	include/tatooine/grid.h	/^  auto are_direct_neighbors(const vertex_t& v0, const vertex_t& v1) {$/;"	f	class:tatooine::grid	typeref:typename:auto
are_floating_point	include/tatooine/type_traits.h	/^struct are_floating_point<> : std::false_type {};$/;"	s	namespace:tatooine
are_floating_point	include/tatooine/type_traits.h	/^struct are_floating_point<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_floating_point	include/tatooine/type_traits.h	/^struct are_floating_point<T>$/;"	s	namespace:tatooine
are_floating_point_v	include/tatooine/type_traits.h	/^static constexpr auto are_floating_point_v = are_floating_point<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_integral	include/tatooine/type_traits.h	/^struct are_integral<> : std::false_type {};$/;"	s	namespace:tatooine
are_integral	include/tatooine/type_traits.h	/^struct are_integral<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_integral	include/tatooine/type_traits.h	/^struct are_integral<T> : std::integral_constant<bool, std::is_integral_v<T>> {};$/;"	s	namespace:tatooine
are_integral_v	include/tatooine/type_traits.h	/^static constexpr auto are_integral_v = are_integral<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_iterators	include/tatooine/type_traits.h	/^struct are_iterators<> : std::false_type {};$/;"	s	namespace:tatooine
are_iterators	include/tatooine/type_traits.h	/^struct are_iterators<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_iterators	include/tatooine/type_traits.h	/^struct are_iterators<T> : std::integral_constant<bool, is_iterator<T>::value> {$/;"	s	namespace:tatooine
are_iterators_v	include/tatooine/type_traits.h	/^static constexpr auto are_iterators_v = are_iterators<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_neighbors	include/tatooine/grid.h	/^  auto are_neighbors(const vertex_t& v0, const vertex_t& v1) {$/;"	f	class:tatooine::grid	typeref:typename:auto
are_neighbors	include/tatooine/mesh.h	/^  bool are_neighbors(face f0, face f1) {$/;"	f	class:tatooine::mesh	typeref:typename:bool
are_polynomial	include/tatooine/polynomial.h	/^struct are_polynomial<> : std::false_type {};$/;"	s	namespace:tatooine
are_polynomial	include/tatooine/polynomial.h	/^struct are_polynomial<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_polynomial	include/tatooine/polynomial.h	/^struct are_polynomial<T>$/;"	s	namespace:tatooine
are_polynomial_v	include/tatooine/polynomial.h	/^static constexpr auto are_polynomial_v = are_polynomial<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_symbolic	include/tatooine/type_traits.h	/^struct are_symbolic<> : std::false_type {};$/;"	s	namespace:tatooine
are_symbolic	include/tatooine/type_traits.h	/^struct are_symbolic<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_symbolic	include/tatooine/type_traits.h	/^struct are_symbolic<T> : std::integral_constant<bool, is_symbolic_v<T>> {};$/;"	s	namespace:tatooine
are_symbolic_v	include/tatooine/type_traits.h	/^static constexpr auto are_symbolic_v = are_symbolic<Ts...>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
are_unsigned_integral	include/tatooine/type_traits.h	/^struct are_unsigned_integral<> : std::false_type {};$/;"	s	namespace:tatooine
are_unsigned_integral	include/tatooine/type_traits.h	/^struct are_unsigned_integral<T0, T1, Ts...>$/;"	s	namespace:tatooine
are_unsigned_integral	include/tatooine/type_traits.h	/^struct are_unsigned_integral<T>$/;"	s	namespace:tatooine
are_unsigned_integral_v	include/tatooine/type_traits.h	/^static constexpr auto are_unsigned_integral_v =$/;"	v	namespace:tatooine	typeref:typename:auto
array_index	include/tatooine/tensor.h	/^  static constexpr auto array_index(const Is... is) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
array_parent_t	include/tatooine/tensor.h	/^  using array_parent_t = static_multidim_array<Real, x_fastest, stack, Dims...>;$/;"	t	struct:tatooine::tensor	typeref:typename:static_multidim_array<Real,x_fastest,stack,Dims...>
as_derived	include/tatooine/crtp.h	/^  constexpr auto &as_derived() const {$/;"	f	struct:tatooine::crtp	typeref:typename:auto &
as_derived	include/tatooine/crtp.h	/^  constexpr auto &as_derived() { return static_cast<Derived &>(*this); }$/;"	f	struct:tatooine::crtp	typeref:typename:auto &
as_position_pair	include/tatooine/grid_edge.h	/^  auto as_position_pair() const {$/;"	f	struct:tatooine::grid_edge	typeref:typename:auto
assign_other_tensor	include/tatooine/tensor.h	/^  constexpr void assign_other_tensor($/;"	f	struct:tatooine::base_tensor	typeref:typename:void
at	include/tatooine/cache.h	/^  auto& at(const Key& key) {$/;"	f	class:tatooine::cache	typeref:typename:auto &
at	include/tatooine/cache.h	/^  const auto& at(const Key& key) const {$/;"	f	class:tatooine::cache	typeref:typename:const auto &
at	include/tatooine/chunked_data.h	/^  T at(Indices... indices) const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T
at	include/tatooine/chunked_data.h	/^  T at(const std::array<S, N>& indices) const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T
at	include/tatooine/chunked_data.h	/^  T& at(Indices... indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
at	include/tatooine/chunked_data.h	/^  T& at(const base_tensor<Tensor, S, N>& indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
at	include/tatooine/chunked_data.h	/^  T& at(const std::array<S, N>& indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
at	include/tatooine/chunked_data.h	/^  T& at(const std::vector<S>& indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
at	include/tatooine/chunked_data.h	/^  auto at(const std::vector<S>& indices) const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
at	include/tatooine/counterexample_sadlo.h	/^    vec<Real, 2> at(Real t) const { return {std::cos(t), std::sin(t)}; }$/;"	f	struct:tatooine::numerical::counterexample_sadlo::bifurcationline_t	typeref:typename:vec<Real,2>
at	include/tatooine/counterexample_sadlo.h	/^    vec<Real, 3> at(Real t) const {$/;"	f	struct:tatooine::numerical::counterexample_sadlo::bifurcationline_spacetime_t	typeref:typename:vec<Real,3>
at	include/tatooine/edgeset.h	/^    auto&       at(edge e) { return property_type<T>::at(e.i); }$/;"	f	struct:tatooine::edgeset::edge_prop	typeref:typename:auto &
at	include/tatooine/edgeset.h	/^    const auto& at(edge e) const { return property_type<T>::at(e.i); }$/;"	f	struct:tatooine::edgeset::edge_prop	typeref:typename:const auto &
at	include/tatooine/edgeset.h	/^  auto&       at(const edge& e) { return m_edges[e.i]; }$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
at	include/tatooine/edgeset.h	/^  const auto& at(const edge& e) const { return m_edges[e.i]; }$/;"	f	class:tatooine::edgeset	typeref:typename:const auto &
at	include/tatooine/grid.h	/^  auto at(Is... is) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
at	include/tatooine/grid.h	/^  vec<Real, N> at(std::index_sequence<DIs...>, Is... is) const {$/;"	f	class:tatooine::grid	typeref:typename:vec<Real,N>
at	include/tatooine/grid_sampler.h	/^  auto at(size_t i) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
at	include/tatooine/grid_sampler.h	/^  decltype(auto) at(size_t i) {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:decltype (auto)
at	include/tatooine/line.h	/^  auto at(tangent_idx i, backward_t tag) const { return tangent_at(i.i, tag); }$/;"	f	struct:tatooine::line	typeref:typename:auto
at	include/tatooine/line.h	/^  auto at(tangent_idx i, bool prefer_calc = false) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
at	include/tatooine/line.h	/^  auto at(tangent_idx i, bool prefer_calc = false) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
at	include/tatooine/line.h	/^  auto at(tangent_idx i, central_t tag) const { return tangent_at(i.i, tag); }$/;"	f	struct:tatooine::line	typeref:typename:auto
at	include/tatooine/line.h	/^  auto at(tangent_idx i, forward_t tag) const { return tangent_at(i.i, tag); }$/;"	f	struct:tatooine::line	typeref:typename:auto
at	include/tatooine/line.h	/^  auto&       at(vertex_idx i) { return m_vertices[i.i]; }$/;"	f	struct:tatooine::line	typeref:typename:auto &
at	include/tatooine/line.h	/^  const auto& at(vertex_idx i) const { return m_vertices[i.i]; }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
at	include/tatooine/line.h	/^  std::pair<const pos_t&, const Real&> at(vertex_idx i) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:std::pair<const pos_t &,const Real &>
at	include/tatooine/line.h	/^  std::pair<pos_t&, Real&> at(vertex_idx i) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:std::pair<pos_t &,Real &>
at	include/tatooine/linspace.h	/^  constexpr Real at(size_t i) const {$/;"	f	struct:tatooine::linspace	typeref:typename:Real
at	include/tatooine/mesh.h	/^    auto&       at(face f) { return property_type<T>::at(f.i); }$/;"	f	struct:tatooine::mesh::face_prop	typeref:typename:auto &
at	include/tatooine/mesh.h	/^    const auto& at(face f) const { return property_type<T>::at(f.i); }$/;"	f	struct:tatooine::mesh::face_prop	typeref:typename:const auto &
at	include/tatooine/mesh.h	/^  constexpr auto&       at(face f) { return m_faces[f.i]; }$/;"	f	class:tatooine::mesh	typeref:typename:auto &
at	include/tatooine/mesh.h	/^  constexpr const auto& at(face f) const { return m_faces[f.i]; }$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
at	include/tatooine/modified_doublegyre.h	/^    auto at(Real t) const {$/;"	f	struct:tatooine::numerical::modified_doublegyre::bifurcationline_spacetime_t	typeref:typename:auto
at	include/tatooine/modified_doublegyre.h	/^    auto at(Real t) const {$/;"	f	struct:tatooine::numerical::modified_doublegyre::bifurcationline_t	typeref:typename:auto
at	include/tatooine/multidim_array.h	/^  auto& at(Is... is) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
at	include/tatooine/multidim_array.h	/^  auto& at(const std::array<UInt, N>& is) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
at	include/tatooine/multidim_array.h	/^  auto& at(const std::vector<UInt>& is) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
at	include/tatooine/multidim_array.h	/^  const auto& at(Is... is) const {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
at	include/tatooine/multidim_array.h	/^  const auto& at(const std::array<UInt, N>& is) const {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
at	include/tatooine/multidim_array.h	/^  const auto& at(const std::vector<UInt>& is) const {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
at	include/tatooine/multidim_array.h	/^  constexpr auto& at(Is... is) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
at	include/tatooine/multidim_array.h	/^  constexpr auto& at(const std::array<UInt, num_dimensions()>& is) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
at	include/tatooine/multidim_array.h	/^  constexpr auto& at(const std::vector<UInt>& is) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
at	include/tatooine/multidim_array.h	/^  constexpr const auto& at(Is... is) const {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
at	include/tatooine/multidim_array.h	/^  constexpr const auto& at(const std::array<UInt, num_dimensions()>& is) const {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
at	include/tatooine/multidim_array.h	/^  constexpr const auto& at(const std::vector<UInt>& is) const {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
at	include/tatooine/pointset.h	/^  auto&       at(vertex v) { return m_vertices[v.i]; }$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
at	include/tatooine/pointset.h	/^  const auto& at(vertex v) const { return m_vertices[v.i]; }$/;"	f	struct:tatooine::pointset	typeref:typename:const auto &
at	include/tatooine/property.h	/^  auto& at(Handle handle) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto &
at	include/tatooine/property.h	/^  auto& at(Handle handle) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto &
at	include/tatooine/property.h	/^  const auto& at(Handle handle) const {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:const auto &
at	include/tatooine/property.h	/^  const auto& at(Handle handle) const {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:const auto &
at	include/tatooine/simple_tri_mesh.h	/^  auto& at(face f) {return m_faces[f.i];}$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto &
at	include/tatooine/simple_tri_mesh.h	/^  const auto& at(face f) const {return m_faces[f.i];}$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:const auto &
at	include/tatooine/tensor.h	/^  constexpr auto& at(const size_t r, const size_t c) {$/;"	f	struct:tatooine::transposed_matrix	typeref:typename:auto &
at	include/tatooine/tensor.h	/^  constexpr const auto& at(const Is... is) const {$/;"	f	struct:tatooine::tensor_slice	typeref:typename:const auto &
at	include/tatooine/tensor.h	/^  constexpr const auto& at(const size_t r, const size_t c) const {$/;"	f	struct:tatooine::const_transposed_matrix	typeref:typename:const auto &
at	include/tatooine/tensor.h	/^  constexpr const auto& at(const size_t r, const size_t c) const {$/;"	f	struct:tatooine::transposed_matrix	typeref:typename:const auto &
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Indices... indices) const {$/;"	f	struct:tatooine::const_imag_complex_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Indices... indices) const {$/;"	f	struct:tatooine::const_real_complex_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Indices... indices) const {$/;"	f	struct:tatooine::imag_complex_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Indices... indices) const {$/;"	f	struct:tatooine::real_complex_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Indices... indices) {$/;"	f	struct:tatooine::imag_complex_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Indices... indices) {$/;"	f	struct:tatooine::real_complex_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Is... is) const {$/;"	f	struct:tatooine::base_tensor	typeref:typename:decltype (auto)
at	include/tatooine/tensor.h	/^  constexpr decltype(auto) at(const Is... is) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:decltype (auto)
attracting_foci	include/tatooine/topological_skeleton.h	/^      attracting_foci, boundary_switch_points;$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
attribute	include/tatooine/hdf5.h	/^  attribute(const std::shared_ptr<H5::H5File>& p_file, const H5::Group& p_group,$/;"	f	struct:tatooine::h5::attribute
attribute	include/tatooine/hdf5.h	/^  auto attribute(const char* attr_name) const {$/;"	f	struct:tatooine::h5::group	typeref:typename:auto
attribute	include/tatooine/hdf5.h	/^  auto attribute(const std::string& attr_name) const {$/;"	f	struct:tatooine::h5::group	typeref:typename:auto
attribute	include/tatooine/hdf5.h	/^  auto attribute(const std::string_view& attr_name) const {$/;"	f	struct:tatooine::h5::group	typeref:typename:auto
attribute	include/tatooine/hdf5.h	/^struct attribute {$/;"	s	namespace:tatooine::h5
automatic	include/tatooine/line.h	/^static constexpr automatic_t automatic;$/;"	v	namespace:tatooine	typeref:typename:automatic_t
automatic_t	include/tatooine/line.h	/^struct automatic_t {};$/;"	s	namespace:tatooine
average_segment_length	include/tatooine/streamsurface.h	/^  Real average_segment_length(const subfront_t& subfront) const {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:Real
average_segment_length	include/tatooine/streamsurface.h	/^  Real average_segment_length(const vertex_list_t& vs) const {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:Real
back	include/tatooine/grid.h	/^  constexpr auto back(size_t i) const { return dimension(i).back(); }$/;"	f	class:tatooine::grid	typeref:typename:auto
back	include/tatooine/line.h	/^  auto& back() { return m_line.at(Handle{m_line.num_vertices() - 1}, m_prefer_calc); }$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:auto &
back	include/tatooine/line.h	/^  const auto& back() const {$/;"	f	struct:tatooine::const_line_vertex_container	typeref:typename:const auto &
back	include/tatooine/line.h	/^  const auto& back() const {$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:const auto &
back	include/tatooine/line.h	/^  std::pair<const pos_t&, const Real&> back() const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:std::pair<const pos_t &,const Real &>
back	include/tatooine/line.h	/^  std::pair<pos_t&, Real&> back() {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:std::pair<pos_t &,Real &>
back	include/tatooine/linspace.h	/^  constexpr auto back() const { return m_max; }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
back	include/tatooine/property.h	/^  auto&       back() { return m_data.back(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto &
back	include/tatooine/property.h	/^  auto&       back() { return m_data.back(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto &
back	include/tatooine/property.h	/^  const auto& back() const { return m_data.back(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:const auto &
back	include/tatooine/property.h	/^  const auto& back() const { return m_data.back(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:const auto &
back	include/tatooine/template_helper.h	/^using back = typename back_t<Ts...>::type;$/;"	t	namespace:tatooine::template_helper	typeref:typename:back_t<Ts...>::type
back	include/tatooine/variadic_helpers.h	/^struct back<T, Ts...> {$/;"	s	namespace:tatooine
back	include/tatooine/variadic_helpers.h	/^struct back<T> {$/;"	s	namespace:tatooine
back_param	include/tatooine/functional.h	/^decltype(auto) back_param(T&& t) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
back_param	include/tatooine/functional.h	/^decltype(auto) back_param(T0&& \/*t0*\/, T1&& t1, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
back_parameterization	include/tatooine/line.h	/^  auto&       back_parameterization() { return m_parameterization->back(); }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
back_parameterization	include/tatooine/line.h	/^  const auto& back_parameterization() const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:const auto &
back_t	include/tatooine/template_helper.h	/^struct back_t<T0, T1, Ts...> {$/;"	s	namespace:tatooine::template_helper
back_t	include/tatooine/template_helper.h	/^struct back_t<T> {$/;"	s	namespace:tatooine::template_helper
back_t	include/tatooine/variadic_helpers.h	/^using back_t = typename back<Ts...>::type;$/;"	t	namespace:tatooine	typeref:typename:back<Ts...>::type
back_tangent	include/tatooine/line.h	/^  auto back_tangent(bool prefer_calc = false) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
back_tangent	include/tatooine/line.h	/^  auto back_tangent(bool prefer_calc = false) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
back_vertex	include/tatooine/grid.h	/^  auto back_vertex() { return back_vertex(std::make_index_sequence<N>()); }$/;"	f	class:tatooine::grid	typeref:typename:auto
back_vertex	include/tatooine/grid.h	/^  auto back_vertex(std::index_sequence<Is...> \/*is*\/) {$/;"	f	class:tatooine::grid	typeref:typename:auto
back_vertex	include/tatooine/line.h	/^  auto&       back_vertex() { return m_vertices.back(); }$/;"	f	struct:tatooine::line	typeref:typename:auto &
back_vertex	include/tatooine/line.h	/^  const auto& back_vertex() const { return m_vertices.back(); }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
backward	include/tatooine/line.h	/^static constexpr backward_t backward;$/;"	v	namespace:tatooine	typeref:typename:backward_t
backward_t	include/tatooine/line.h	/^struct backward_t {};$/;"	s	namespace:tatooine
base_grid_sampler	include/tatooine/grid_sampler.h	/^  base_grid_sampler(base_grid_sampler&& other) noexcept$/;"	f	struct:tatooine::base_grid_sampler
base_grid_sampler	include/tatooine/grid_sampler.h	/^  base_grid_sampler(const base_grid_sampler& other) : parent_t{other} {}$/;"	f	struct:tatooine::base_grid_sampler
base_grid_sampler	include/tatooine/grid_sampler.h	/^  base_grid_sampler(const linspace<real_ts>&... linspaces)$/;"	f	struct:tatooine::base_grid_sampler
base_grid_sampler	include/tatooine/grid_sampler.h	/^  base_grid_sampler(const parent_t& g) : parent_t{g} {}$/;"	f	struct:tatooine::base_grid_sampler
base_grid_sampler	include/tatooine/grid_sampler.h	/^  base_grid_sampler(parent_t&& g) : parent_t{std::move(g)} {}$/;"	f	struct:tatooine::base_grid_sampler
base_grid_sampler	include/tatooine/grid_sampler.h	/^struct base_grid_sampler : crtp<Derived>, grid<Real, N> {$/;"	s	namespace:tatooine
base_grid_sampler_at	include/tatooine/grid_sampler.h	/^struct base_grid_sampler_at {$/;"	s	namespace:tatooine
base_grid_sampler_at	include/tatooine/grid_sampler.h	/^struct base_grid_sampler_at<Real, 1, Data, Grid, Interpolators...> {$/;"	s	namespace:tatooine
base_grid_sampler_at_ct	include/tatooine/grid_sampler.h	/^using base_grid_sampler_at_ct =$/;"	t	namespace:tatooine	typeref:typename:base_grid_sampler_at<Real,N,Data,T,Interpolators...>::const_type
base_grid_sampler_at_t	include/tatooine/grid_sampler.h	/^using base_grid_sampler_at_t =$/;"	t	namespace:tatooine	typeref:typename:base_grid_sampler_at<Real,N,Data,T,Interpolators...>::type
base_holder	include/tatooine/holder.h	/^struct base_holder {$/;"	s	namespace:tatooine
base_tensor	include/tatooine/tensor.h	/^  constexpr base_tensor($/;"	f	struct:tatooine::base_tensor
base_tensor	include/tatooine/tensor.h	/^struct base_tensor : crtp<Tensor> {$/;"	s	namespace:tatooine
bases	include/tatooine/curve_to_streamline.h	/^  std::vector<mat32> bases;$/;"	m	struct:tatooine::curve_to_streamline	typeref:typename:std::vector<mat32>
bdsvl	include/tatooine/bidiagonal_system_solver.h	/^bool bdsvl(int _n, int _nrhs, const T* __restrict__ _dl,$/;"	f	namespace:tatooine	typeref:typename:bool
bdsvu	include/tatooine/bidiagonal_system_solver.h	/^bool bdsvu(int _n, int _nrhs, const T* __restrict__ _d,$/;"	f	namespace:tatooine	typeref:typename:bool
begin	include/tatooine/edgeset.h	/^    auto           begin() const {$/;"	f	struct:tatooine::edgeset::edge_container	typeref:typename:auto
begin	include/tatooine/grid.h	/^  auto        begin() const { return g->vertex_begin(); }$/;"	f	struct:tatooine::grid::vertex_container	typeref:typename:auto
begin	include/tatooine/grid_sampler.h	/^  auto begin() const { return iterator{this, 0}; }$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
begin	include/tatooine/grid_vertex_edges.h	/^  auto begin() {$/;"	f	struct:tatooine::grid_vertex_edges	typeref:typename:auto
begin	include/tatooine/grid_vertex_neighbors.h	/^  auto begin() {$/;"	f	struct:tatooine::grid_vertex_neighbors	typeref:typename:auto
begin	include/tatooine/line.h	/^  auto begin() const { return const_iterator{Handle{0}, m_line, m_prefer_calc}; }$/;"	f	struct:tatooine::const_line_vertex_container	typeref:typename:auto
begin	include/tatooine/line.h	/^  auto begin() const { return const_iterator{Handle{0}, m_line, m_prefer_calc}; }$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:auto
begin	include/tatooine/line.h	/^  auto begin() { return iterator{Handle{0}, m_line, m_prefer_calc}; }$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:auto
begin	include/tatooine/line.h	/^auto begin($/;"	f	namespace:tatooine	typeref:typename:auto
begin	include/tatooine/line.h	/^auto begin(const const_line_vertex_container<Line, Real, N, Handle, Value,$/;"	f	namespace:tatooine	typeref:typename:auto
begin	include/tatooine/line.h	/^auto begin(line_vertex_container<Line, Real, N, Handle, Value, Reference>& it) {$/;"	f	namespace:tatooine	typeref:typename:auto
begin	include/tatooine/linspace.h	/^  auto begin() const { return m_lin->begin(); }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:auto
begin	include/tatooine/linspace.h	/^  constexpr auto begin() const { return iterator{this, 0}; }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
begin	include/tatooine/linspace.h	/^constexpr auto begin(const linspace<Real>& l) {$/;"	f	namespace:tatooine	typeref:typename:auto
begin	include/tatooine/mesh.h	/^    auto begin() const {$/;"	f	struct:tatooine::mesh::face_container	typeref:typename:auto
begin	include/tatooine/multidim.h	/^  auto begin() {$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:auto
begin	include/tatooine/multidim.h	/^  constexpr auto begin() {$/;"	f	struct:tatooine::static_multidim	typeref:typename:auto
begin	include/tatooine/pointset.h	/^    auto begin() const {$/;"	f	struct:tatooine::pointset::vertex_container	typeref:typename:auto
begin	include/tatooine/pointset.h	/^auto begin(const typename pointset<Real, N>::vertex_container& verts) {$/;"	f	namespace:tatooine	typeref:typename:auto
begin	include/tatooine/property.h	/^  auto begin() const { return m_data.begin(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
begin	include/tatooine/property.h	/^  auto begin() const { return m_data.begin(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
begin	include/tatooine/property.h	/^  auto begin() { return m_data.begin(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
begin	include/tatooine/property.h	/^  auto begin() { return m_data.begin(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
begin	include/tatooine/simple_tri_mesh.h	/^    auto begin() const {$/;"	f	struct:tatooine::simple_tri_mesh::face_container	typeref:typename:auto
begin	include/tatooine/subgrid.h	/^  auto begin() { return vertex_iterator{m_begin_vertex, this}; }$/;"	f	struct:tatooine::subgrid	typeref:typename:auto
bifurcationline	include/tatooine/counterexample_sadlo.h	/^  auto bifurcationline() const { return bifurcationline_t{};}$/;"	f	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:auto
bifurcationline	include/tatooine/modified_doublegyre.h	/^  constexpr auto bifurcationline() const { return bifurcationline_t{}; }$/;"	f	struct:tatooine::numerical::modified_doublegyre	typeref:typename:auto
bifurcationline	include/tatooine/modified_doublegyre.h	/^  constexpr auto bifurcationline(Real t) const { return bifurcationline_t{}(t); }$/;"	f	struct:tatooine::numerical::modified_doublegyre	typeref:typename:auto
bifurcationline	include/tatooine/modified_doublegyre.h	/^  static GiNaC::ex bifurcationline()  {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:GiNaC::ex
bifurcationline	include/tatooine/modified_doublegyre.h	/^  static auto bifurcationline(Real time)  {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:auto
bifurcationline	include/tatooine/modified_doublegyre.h	/^  static auto bifurcationline(const linspace<Real>& domain) {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:auto
bifurcationline_spacetime	include/tatooine/counterexample_sadlo.h	/^  auto bifurcationline_spacetime() const { return bifurcationline_spacetime_t{};}$/;"	f	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:auto
bifurcationline_spacetime	include/tatooine/modified_doublegyre.h	/^  constexpr auto bifurcationline_spacetime() const {$/;"	f	struct:tatooine::numerical::modified_doublegyre	typeref:typename:auto
bifurcationline_spacetime	include/tatooine/modified_doublegyre.h	/^  static auto bifurcationline_spacetime(const linspace<Real>& domain) {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:auto
bifurcationline_spacetime_t	include/tatooine/counterexample_sadlo.h	/^  struct bifurcationline_spacetime_t {$/;"	s	struct:tatooine::numerical::counterexample_sadlo
bifurcationline_spacetime_t	include/tatooine/modified_doublegyre.h	/^  struct bifurcationline_spacetime_t {$/;"	s	struct:tatooine::numerical::modified_doublegyre
bifurcationline_t	include/tatooine/counterexample_sadlo.h	/^  struct bifurcationline_t{$/;"	s	struct:tatooine::numerical::counterexample_sadlo
bifurcationline_t	include/tatooine/modified_doublegyre.h	/^  struct bifurcationline_t {$/;"	s	struct:tatooine::numerical::modified_doublegyre
binary_operation	include/tatooine/multidim_array.h	/^  constexpr void binary_operation($/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:void
binary_operation	include/tatooine/multidim_array.h	/^  constexpr void binary_operation($/;"	f	class:tatooine::static_multidim_array	typeref:typename:void
binary_operation	include/tatooine/tensor.h	/^  decltype(auto) binary_operation($/;"	f	struct:tatooine::base_tensor	typeref:typename:decltype (auto)
binary_operation	include/tatooine/tensor.h	/^  decltype(auto) binary_operation($/;"	f	struct:tatooine::tensor	typeref:typename:decltype (auto)
binary_operation	include/tatooine/tensor.h	/^constexpr auto binary_operation($/;"	f	namespace:tatooine	typeref:typename:auto
binary_operation	include/tatooine/tensor.h	/^constexpr auto binary_operation(F&&                                       f,$/;"	f	namespace:tatooine	typeref:typename:auto
binary_operation_field	include/tatooine/field.h	/^  constexpr binary_operation_field(const LhsField& lhs_field,$/;"	f	struct:tatooine::binary_operation_field
binary_operation_field	include/tatooine/field.h	/^struct binary_operation_field$/;"	s	namespace:tatooine
binary_search_index	include/tatooine/line.h	/^  auto binary_search_index(Real t) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
bind	include/tatooine/bind.h	/^constexpr auto bind(F&& f, Args&&... args) {$/;"	f	namespace:tatooine	typeref:typename:auto
boltzmann	include/tatooine/constants.h	/^static constexpr double boltzmann = 1.38064852e-23;$/;"	v	namespace:tatooine::constants	typeref:typename:double
boost	include/tatooine/integration/boost/boostintegrator.h	/^namespace boost::numeric::odeint {$/;"	n
boost	include/tatooine/integration/boost/boostintegrator.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine::integration
boost	include/tatooine/integration/boost/boostresizer.h	/^namespace boost::numeric::odeint {$/;"	n
boost	include/tatooine/integration/boost/rungekutta4.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine::integration
boost	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine::integration
boost	include/tatooine/integration/boost/rungekuttadopri5.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine::integration
boost	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine::integration
border_edges	include/tatooine/mesh.h	/^  auto border_edges(const face_cont_t& faces) const {$/;"	f	class:tatooine::mesh	typeref:typename:auto
border_edges_to_vertices	include/tatooine/mesh.h	/^  auto border_edges_to_vertices(const edge_cont_t& edges) {$/;"	f	class:tatooine::mesh	typeref:typename:auto
border_polygons	include/tatooine/mesh.h	/^  auto border_polygons(const face_cont_t& faces,$/;"	f	class:tatooine::mesh	typeref:typename:auto
boundary_switch_points	include/tatooine/topological_skeleton.h	/^      attracting_foci, boundary_switch_points;$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
boundingbox	include/tatooine/boundingbox.h	/^  constexpr boundingbox(const base_tensor<Tensor0, Real0, N>& _min,$/;"	f	struct:tatooine::boundingbox
boundingbox	include/tatooine/boundingbox.h	/^  constexpr boundingbox(const vec<Real0, N>& _min, const vec<Real1, N>& _max)$/;"	f	struct:tatooine::boundingbox
boundingbox	include/tatooine/boundingbox.h	/^  constexpr boundingbox(vec<Real0, N>&& _min,$/;"	f	struct:tatooine::boundingbox
boundingbox	include/tatooine/boundingbox.h	/^struct boundingbox {$/;"	s	namespace:tatooine
boundingbox	include/tatooine/grid.h	/^  constexpr auto boundingbox() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
boundingbox	include/tatooine/grid.h	/^  constexpr auto boundingbox(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
boussinesq	include/tatooine/boussinesq.h	/^  boussinesq(const std::string& filepath) : sampler{filepath} {}$/;"	f	struct:tatooine::boussinesq
boussinesq	include/tatooine/boussinesq.h	/^struct boussinesq : field<boussinesq, double, 2, 2> {$/;"	s	namespace:tatooine
break_down_durations	include/tatooine/chrono.h	/^auto break_down_durations(DurationIn d) {$/;"	f	namespace:tatooine	typeref:typename:auto
btau	include/tatooine/gpu/pathline_render_window.h	/^  double                            btau, ftau;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:double
buffer	include/tatooine/vtk_legacy.h	/^  char        buffer[256];$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:char[256]
c	include/tatooine/modified_doublegyre.h	/^  static GiNaC::numeric c() { return -0.2040811331; }$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:GiNaC::numeric
c	include/tatooine/modified_doublegyre.h	/^  static constexpr Real c       = -0.2040811331;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
c	include/tatooine/polynomial.h	/^  auto&       c(size_t i) { return m_coefficients[i]; }$/;"	f	struct:tatooine::polynomial	typeref:typename:auto &
c	include/tatooine/polynomial.h	/^  const auto& c(size_t i) const { return m_coefficients[i]; }$/;"	f	struct:tatooine::polynomial	typeref:typename:const auto &
c_str_assembler	include/tatooine/concat_string_view.h	/^struct c_str_assembler {$/;"	s	namespace:tatooine
c_str_assembler_v	include/tatooine/concat_string_view.h	/^static constexpr std::string_view c_str_assembler_v = c_str_assembler<cs...>::value;$/;"	v	namespace:tatooine	typeref:typename:std::string_view
cache	include/tatooine/cache.h	/^  cache(const cache& other)$/;"	f	class:tatooine::cache
cache	include/tatooine/cache.h	/^  cache(uint64_t max_elements = std::numeric_limits<uint64_t>::max(),$/;"	f	class:tatooine::cache
cache	include/tatooine/cache.h	/^class cache {$/;"	c	namespace:tatooine
cache	include/tatooine/integration/integrator.h	/^  auto &      cache() { return m_cache; }$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto &
cache	include/tatooine/integration/integrator.h	/^  const auto &cache() const { return m_cache; }$/;"	f	struct:tatooine::integration::integrator	typeref:typename:const auto &
cache_t	include/tatooine/integration/integrator.h	/^  using cache_t    = cache<std::pair<Real, pos_t>, integral_t>;$/;"	t	struct:tatooine::integration::integrator	typeref:typename:cache<std::pair<Real,pos_t>,integral_t>
calc	include/tatooine/parallel_vectors.h	/^auto calc(GetV&& getv, GetW&& getw, const grid<GridReal, 3>& g,$/;"	f	namespace:tatooine::detail	typeref:typename:auto
calc_backward	include/tatooine/integration/boost/boostintegrator.h	/^  auto &calc_backward(const V &v, integral_t &integral, const pos_t &x, Real t0,$/;"	f	struct:tatooine::integration::boost::integrator	typeref:typename:auto &
calc_backward	include/tatooine/integration/integrator.h	/^  auto calc_backward(const V &v, integral_t &integral, const pos_t &y0, Real t0,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto
calc_backward	include/tatooine/integration/vclibs/rungekutta43.h	/^  auto& calc_backward(const vf_t& vf, integral_t& integral, const pos_t& y0,$/;"	f	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:auto &
calc_forward	include/tatooine/integration/boost/boostintegrator.h	/^  auto &calc_forward(const V &v, integral_t &integral, const pos_t &x, Real t0,$/;"	f	struct:tatooine::integration::boost::integrator	typeref:typename:auto &
calc_forward	include/tatooine/integration/integrator.h	/^  auto calc_forward(const V &v, integral_t &integral, const pos_t &y0, Real t0,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto
calc_forward	include/tatooine/integration/vclibs/rungekutta43.h	/^  auto& calc_forward(const vf_t& vf, integral_t& integral, const pos_t& y0,$/;"	f	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:auto &
calc_gradient_alpha	include/tatooine/curve_to_streamline.h	/^  void calc_gradient_alpha(const V& v, Real t0, const Line& line) {$/;"	f	struct:tatooine::curve_to_streamline	typeref:typename:void
calc_plane_basis	include/tatooine/curve_to_streamline.h	/^  void calc_plane_basis() {$/;"	f	struct:tatooine::curve_to_streamline	typeref:typename:void
calc_tangents	include/tatooine/curve_to_streamline.h	/^  void calc_tangents(const Line& line) {$/;"	f	struct:tatooine::curve_to_streamline	typeref:typename:void
capacity_check	include/tatooine/cache.h	/^  void capacity_check() {$/;"	f	class:tatooine::cache	typeref:typename:void
cast	include/tatooine/tensor.h	/^auto cast(const base_tensor<Tensor, Real, Dims...>& to_cast) {$/;"	f	namespace:tatooine	typeref:typename:auto
cast	include/tatooine/tensor.h	/^auto cast(const mat<Real, M, N>& to_cast) {$/;"	f	namespace:tatooine	typeref:typename:auto
cast	include/tatooine/tensor.h	/^auto cast(const vec<Real, N>& to_cast) {$/;"	f	namespace:tatooine	typeref:typename:auto
cast_tensor_real	include/tatooine/tensor.h	/^struct cast_tensor_real {$/;"	s	namespace:tatooine
cast_tensor_real_t	include/tatooine/tensor.h	/^using cast_tensor_real_t = typename cast_tensor_real<CastedReal, Tensor>::type;$/;"	t	namespace:tatooine	typeref:typename:cast_tensor_real<CastedReal,Tensor>::type
cast_tensor_type_impl	include/tatooine/tensor.h	/^auto cast_tensor_type_impl(const mat<Real, M, N>&) {$/;"	f	namespace:tatooine	typeref:typename:auto
cast_tensor_type_impl	include/tatooine/tensor.h	/^auto cast_tensor_type_impl(const tensor<Real, Dims...>&) {$/;"	f	namespace:tatooine	typeref:typename:auto
cast_tensor_type_impl	include/tatooine/tensor.h	/^auto cast_tensor_type_impl(const vec<Real, N>&) {$/;"	f	namespace:tatooine	typeref:typename:auto
cavity	include/tatooine/cavity.h	/^  cavity(const std::string& path)$/;"	f	struct:tatooine::cavity
cavity	include/tatooine/cavity.h	/^struct cavity : field<cavity, double, 2, 2> {$/;"	s	namespace:tatooine
cc	include/tatooine/modified_doublegyre.h	/^  static constexpr Real cc      = c * c;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
cell_partition	include/tatooine/cell_partition.h	/^auto cell_partition(F&& f, const grid<GridReal, 3>& g) {$/;"	f	namespace:tatooine	typeref:typename:auto
cell_type_to_str	include/tatooine/vtk_legacy.h	/^inline std::string cell_type_to_str(CellType cell_type) {$/;"	f	namespace:tatooine::vtk	typeref:typename:std::string
center	include/tatooine/boundingbox.h	/^  constexpr auto center() const { return (max + min) * Real(0.5); }$/;"	f	struct:tatooine::boundingbox	typeref:typename:auto
center	include/tatooine/boussinesq.h	/^  static constexpr vec            center{0.0, -0.4};$/;"	m	struct:tatooine::boussinesq	typeref:typename:vec
center	include/tatooine/geometry/circle.h	/^  auto&       center() { return m_center; }$/;"	f	struct:tatooine::geometry::circle	typeref:typename:auto &
center	include/tatooine/geometry/circle.h	/^  const auto& center() const { return m_center; }$/;"	f	struct:tatooine::geometry::circle	typeref:typename:const auto &
center	include/tatooine/grid_vertex_neighbors.h	/^  grid_vertex<Real, N> center;$/;"	m	struct:tatooine::grid_vertex_neighbors	typeref:typename:grid_vertex<Real,N>
centers	include/tatooine/topological_skeleton.h	/^  std::vector<vec<Real, 2>> saddles, centers, sources, sinks, repelling_foci,$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
central	include/tatooine/line.h	/^static constexpr central_t central;$/;"	v	namespace:tatooine	typeref:typename:central_t
central_t	include/tatooine/line.h	/^struct central_t {};$/;"	s	namespace:tatooine
centripetal_parameterization	include/tatooine/line.h	/^  void centripetal_parameterization(Real t0 = 0) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
check_tet	include/tatooine/parallel_vectors.h	/^static auto check_tet(const std::optional<vec<Real, 3>>& tri0,$/;"	f	namespace:tatooine::detail	typeref:typename:auto
chordal_parameterization	include/tatooine/line.h	/^  void chordal_parameterization(Real t0 = 0) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
chunk_res	include/tatooine/chunked_data.h	/^  static constexpr auto chunk_res = chunk_t::size();$/;"	m	struct:tatooine::chunked_data	typeref:typename:auto
chunk_t	include/tatooine/chunked_data.h	/^  using chunk_t   = typename create_chunk_type<T, N, ChunkRes>::T;$/;"	t	struct:tatooine::chunked_data	typeref:typename:create_chunk_type<T,N,ChunkRes>::T
chunked_data	include/tatooine/chunked_data.h	/^  chunked_data(const chunked_data& other)$/;"	f	struct:tatooine::chunked_data
chunked_data	include/tatooine/chunked_data.h	/^  chunked_data(const std::array<S, N>& data_sizes)$/;"	f	struct:tatooine::chunked_data
chunked_data	include/tatooine/chunked_data.h	/^  chunked_data(const std::array<S, N>& sizes)$/;"	f	struct:tatooine::chunked_data
chunked_data	include/tatooine/chunked_data.h	/^  chunked_data(const std::array<S, N>& sizes,$/;"	f	struct:tatooine::chunked_data
chunked_data	include/tatooine/chunked_data.h	/^struct chunked_data {$/;"	s	namespace:tatooine
circle	include/tatooine/geometry/circle.h	/^  circle(Real radius, const pos_t& center)$/;"	f	struct:tatooine::geometry::circle
circle	include/tatooine/geometry/circle.h	/^  circle(Real radius, pos_t&& center)$/;"	f	struct:tatooine::geometry::circle
circle	include/tatooine/geometry/circle.h	/^struct circle : primitive<Real, 2> {$/;"	s	namespace:tatooine::geometry
clamp	include/tatooine/algorithm.h	/^constexpr const T& clamp(const T& v, const T& lo, const T& hi) {$/;"	f	namespace:tatooine	typeref:typename:const T &
clamp	include/tatooine/algorithm.h	/^constexpr const T& clamp(const T& v, const T& lo, const T& hi, Compare comp) {$/;"	f	namespace:tatooine	typeref:typename:const T &
clear	include/tatooine/cache.h	/^  void clear() {$/;"	f	class:tatooine::cache	typeref:typename:void
clear	include/tatooine/edgeset.h	/^  void clear() {$/;"	f	class:tatooine::edgeset	typeref:typename:void
clear	include/tatooine/line.h	/^  auto clear() { return m_vertices.clear(); }$/;"	f	struct:tatooine::line	typeref:typename:auto
clear	include/tatooine/mesh.h	/^  void clear() {$/;"	f	class:tatooine::mesh	typeref:typename:void
clear	include/tatooine/pointset.h	/^  void clear() { clear_vertices(); }$/;"	f	struct:tatooine::pointset	typeref:typename:void
clear	include/tatooine/property.h	/^  void clear() override {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
clear	include/tatooine/property.h	/^  void clear() override {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
clear	include/tatooine/simple_tri_mesh.h	/^  void clear() {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:void
clear_edges	include/tatooine/edgeset.h	/^  void clear_edges() {$/;"	f	class:tatooine::edgeset	typeref:typename:void
clear_faces	include/tatooine/mesh.h	/^  constexpr void clear_faces() {$/;"	f	class:tatooine::mesh	typeref:typename:void
clear_vertices	include/tatooine/pointset.h	/^  void clear_vertices() {$/;"	f	struct:tatooine::pointset	typeref:typename:void
clonable	include/tatooine/clonable.h	/^struct clonable {$/;"	s	namespace:tatooine
clone	include/tatooine/clonable.h	/^  std::unique_ptr<Parent> clone() const override {$/;"	f	struct:tatooine::clonable	typeref:typename:std::unique_ptr<Parent>
clone	include/tatooine/edgeset.h	/^    std::unique_ptr<property> clone() const override {$/;"	f	struct:tatooine::edgeset::edge_prop	typeref:typename:std::unique_ptr<property>
clone	include/tatooine/mesh.h	/^    std::unique_ptr<property> clone() const override {$/;"	f	struct:tatooine::mesh::face_prop	typeref:typename:std::unique_ptr<property>
clone	include/tatooine/property.h	/^  virtual std::unique_ptr<parent_t> clone() const override {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:std::unique_ptr<parent_t>
clone	include/tatooine/property.h	/^  virtual std::unique_ptr<parent_t> clone() const override {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:std::unique_ptr<parent_t>
close	include/tatooine/vtk_legacy.h	/^  auto close() { m_file.close(); }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:auto
coefficient	include/tatooine/polynomial.h	/^  auto&       coefficient(size_t i) { return m_coefficients[i]; }$/;"	f	struct:tatooine::polynomial	typeref:typename:auto &
coefficient	include/tatooine/polynomial.h	/^  const auto& coefficient(size_t i) const { return m_coefficients[i]; }$/;"	f	struct:tatooine::polynomial	typeref:typename:const auto &
coefficients	include/tatooine/polynomial.h	/^  auto&       coefficients() { return m_coefficients; }$/;"	f	struct:tatooine::polynomial	typeref:typename:auto &
coefficients	include/tatooine/polynomial.h	/^  const auto& coefficients() const { return m_coefficients; }$/;"	f	struct:tatooine::polynomial	typeref:typename:const auto &
coin	include/tatooine/random.h	/^enum coin { HEADS, TAILS };$/;"	g	namespace:tatooine
col	include/tatooine/tensor.h	/^  constexpr auto col(size_t i) const { return this->template slice<1>(i); }$/;"	f	struct:tatooine::mat	typeref:typename:auto
col	include/tatooine/tensor.h	/^  constexpr auto col(size_t i) { return this->template slice<1>(i); }$/;"	f	struct:tatooine::mat	typeref:typename:auto
comp_shader_path	include/tatooine/gpu/reduce.h.in	/^  static constexpr std::string_view comp_shader_path =$/;"	m	struct:tatooine::gpu::reduce_buffer_shader	typeref:typename:std::string_view	file:
comp_shader_path	include/tatooine/gpu/reduce.h.in	/^  static constexpr std::string_view comp_shader_path =$/;"	m	struct:tatooine::gpu::reduce_tex_shader	typeref:typename:std::string_view	file:
compiled_shaders	include/tatooine/gpu/reduce.h.in	/^                                    compiled_shaders;$/;"	m	struct:tatooine::gpu::reduce_buffer_shader	typeref:typename:std::map<unsigned int,std::unique_ptr<reduce_buffer_shader>>	file:
compiled_shaders	include/tatooine/gpu/reduce.h.in	/^              compiled_shaders;$/;"	m	struct:tatooine::gpu::reduce_tex_shader	typeref:typename:std::map<std::pair<unsigned int,unsigned int>,std::unique_ptr<reduce_tex_shader>>	file:
compute_topological_skeleton	include/tatooine/topological_skeleton.h	/^auto compute_topological_skeleton($/;"	f	namespace:tatooine	typeref:typename:auto
concat	include/tatooine/concat_string_view.h	/^constexpr std::string_view const& concat() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view const &
concat	include/tatooine/concat_string_view.h	/^constexpr std::string_view const& concat(std::index_sequence<I0s...>,$/;"	f	namespace:tatooine	typeref:typename:std::string_view const &
conforming_delaunay	include/tatooine/mesh.h	/^inline auto conforming_delaunay(const edgeset<2, Real>& es,$/;"	f	namespace:tatooine	typeref:typename:auto
const_imag_complex_tensor	include/tatooine/tensor.h	/^  constexpr const_imag_complex_tensor($/;"	f	struct:tatooine::const_imag_complex_tensor
const_imag_complex_tensor	include/tatooine/tensor.h	/^struct const_imag_complex_tensor$/;"	s	namespace:tatooine
const_indexing_t	include/tatooine/grid_sampler.h	/^  using const_indexing_t =$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:base_grid_sampler_at_ct<Real,N,Data,this_t,TailInterpolators...>
const_iterator	include/tatooine/cache.h	/^  using const_iterator = typename container_t::const_iterator;$/;"	t	class:tatooine::cache	typeref:typename:container_t::const_iterator
const_iterator	include/tatooine/edgeset.h	/^    using const_iterator = edge_iterator;$/;"	t	struct:tatooine::edgeset::edge_container	typeref:typename:edge_iterator
const_iterator	include/tatooine/line.h	/^  using const_iterator =$/;"	t	struct:tatooine::const_line_vertex_container	typeref:typename:const_line_vertex_iterator<Line,Real,N,Handle,Value,Reference>
const_iterator	include/tatooine/line.h	/^  using const_iterator =$/;"	t	struct:tatooine::line_vertex_container	typeref:typename:const_line_vertex_iterator<Line,Real,N,Handle,Value,Reference>
const_iterator	include/tatooine/linspace.h	/^  using const_iterator = linspace_iterator<Real>;$/;"	t	struct:tatooine::linspace	typeref:typename:linspace_iterator<Real>
const_iterator	include/tatooine/mesh.h	/^    using const_iterator = face_iterator;$/;"	t	struct:tatooine::mesh::face_container	typeref:typename:face_iterator
const_iterator	include/tatooine/pointset.h	/^    using const_iterator = vertex_iterator;$/;"	t	struct:tatooine::pointset::vertex_container	typeref:typename:vertex_iterator
const_iterator	include/tatooine/property.h	/^  using const_iterator         = typename container_t::const_iterator;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::const_iterator
const_iterator	include/tatooine/property.h	/^  using const_iterator         = typename container_t::const_iterator;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::const_iterator
const_iterator	include/tatooine/simple_tri_mesh.h	/^    using const_iterator = face_iterator;$/;"	t	struct:tatooine::simple_tri_mesh::face_container	typeref:typename:face_iterator
const_iterator	include/tatooine/tensor.h	/^  using const_iterator =$/;"	t	struct:tatooine::vec	typeref:typename:parent_t::array_parent_t::container_t::const_iterator
const_line_vertex_container	include/tatooine/line.h	/^struct const_line_vertex_container {$/;"	s	namespace:tatooine
const_line_vertex_iterator	include/tatooine/line.h	/^  const_line_vertex_iterator(Handle handle, const Line& l, bool prefer_calc)$/;"	f	struct:tatooine::const_line_vertex_iterator
const_line_vertex_iterator	include/tatooine/line.h	/^struct const_line_vertex_iterator$/;"	s	namespace:tatooine
const_pointer	include/tatooine/property.h	/^  using const_pointer          = typename container_t::const_pointer;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::const_pointer
const_pointer	include/tatooine/property.h	/^  using const_pointer          = typename container_t::const_pointer;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::const_pointer
const_real_complex_tensor	include/tatooine/tensor.h	/^  const_real_complex_tensor($/;"	f	struct:tatooine::const_real_complex_tensor
const_real_complex_tensor	include/tatooine/tensor.h	/^struct const_real_complex_tensor$/;"	s	namespace:tatooine
const_reference	include/tatooine/property.h	/^  using const_reference        = typename container_t::const_reference;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::const_reference
const_reference	include/tatooine/property.h	/^  using const_reference        = typename container_t::const_reference;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::const_reference
const_reverse_iterator	include/tatooine/property.h	/^  using const_reverse_iterator = typename container_t::const_reverse_iterator;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::const_reverse_iterator
const_reverse_iterator	include/tatooine/property.h	/^  using const_reverse_iterator = typename container_t::const_reverse_iterator;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::const_reverse_iterator
const_tangent_container	include/tatooine/line.h	/^  using const_tangent_container =$/;"	t	struct:tatooine::line	typeref:typename:const_line_vertex_container<this_t,Real,N,tangent_idx,vec<Real,N>,vec<Real,N>>
const_transposed_matrix	include/tatooine/tensor.h	/^  const_transposed_matrix($/;"	f	struct:tatooine::const_transposed_matrix
const_transposed_matrix	include/tatooine/tensor.h	/^struct const_transposed_matrix$/;"	s	namespace:tatooine
const_type	include/tatooine/grid_sampler.h	/^  using const_type = std::decay_t<Data>;$/;"	t	struct:tatooine::base_grid_sampler_at	typeref:typename:std::decay_t<Data>
const_type	include/tatooine/grid_sampler.h	/^  using const_type =$/;"	t	struct:tatooine::base_grid_sampler_at	typeref:typename:grid_sampler_view<Real,N-1,Data,const Grid,Interpolators...>
constant_vectorfield	include/tatooine/constant_vectorfield.h	/^   constexpr constant_vectorfield()$/;"	f	struct:tatooine::constant_vectorfield
constant_vectorfield	include/tatooine/constant_vectorfield.h	/^   constexpr constant_vectorfield(const vec<Real, N>& vector)$/;"	f	struct:tatooine::constant_vectorfield
constant_vectorfield	include/tatooine/constant_vectorfield.h	/^   constexpr constant_vectorfield(std::index_sequence<Is...> \/*is*\/)$/;"	f	struct:tatooine::constant_vectorfield
constant_vectorfield	include/tatooine/constant_vectorfield.h	/^   constexpr constant_vectorfield(vec<Real, N>&& vector)$/;"	f	struct:tatooine::constant_vectorfield
constant_vectorfield	include/tatooine/constant_vectorfield.h	/^struct constant_vectorfield : field<constant_vectorfield<Real, N>, Real, N, N> {$/;"	s	namespace:tatooine
constants	include/tatooine/constants.h	/^namespace tatooine::constants {$/;"	n	namespace:tatooine
constrained_delaunay	include/tatooine/mesh.h	/^inline auto constrained_delaunay($/;"	f	namespace:tatooine	typeref:typename:auto
constrained_delaunay	include/tatooine/mesh.h	/^inline auto constrained_delaunay(const edgeset<2, Real>& es) {$/;"	f	namespace:tatooine	typeref:typename:auto
consume_trailing_break	include/tatooine/vtk_legacy.h	/^  void consume_trailing_break(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
container	include/tatooine/property.h	/^  const auto& container() const { return m_data; }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:const auto &
container	include/tatooine/property.h	/^  const auto& container() const { return m_data; }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:const auto &
container_t	include/tatooine/cache.h	/^  using container_t    = std::map<Key, Value>;$/;"	t	class:tatooine::cache	typeref:typename:std::map<Key,Value>
container_t	include/tatooine/multidim_array.h	/^  using container_t = std::vector<T>;$/;"	t	class:tatooine::dynamic_multidim_array	typeref:typename:std::vector<T>
container_t	include/tatooine/multidim_array.h	/^  using container_t =$/;"	t	class:tatooine::static_multidim_array
container_t	include/tatooine/property.h	/^  using container_t            = std::deque<T>;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:std::deque<T>
container_t	include/tatooine/property.h	/^  using container_t            = std::vector<T>;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:std::vector<T>
contains	include/tatooine/cache.h	/^  std::optional<const_iterator> contains(const Key& key) const {$/;"	f	class:tatooine::cache	typeref:typename:std::optional<const_iterator>
contains	include/tatooine/grid.h	/^  auto contains(const vertex_t& v, const edge_seq_t& seq) {$/;"	f	class:tatooine::grid	typeref:typename:auto
contains	include/tatooine/grid.h	/^  auto contains(const vertex_t& v, const edge_t& e) {$/;"	f	class:tatooine::grid	typeref:typename:auto
continue_backward	include/tatooine/integration/integrator.h	/^  auto &continue_backward(const V &v, integral_t &integral, Real tau,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto &
continue_forward	include/tatooine/integration/integrator.h	/^  auto &continue_forward(const V &v, integral_t &integral, const Real tau,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto &
contour_color	include/tatooine/gpu/pathline_render_window.h	/^  float                             contour_color[3];$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float[3]
contour_width	include/tatooine/gpu/pathline_render_window.h	/^  float                             contour_width;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
copy_chunks	include/tatooine/chunked_data.h	/^  void copy_chunks(const chunked_data& other) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:void
cos_angle	include/tatooine/tensor.h	/^constexpr auto cos_angle(const base_tensor<Tensor0, Real0, N>& v0,$/;"	f	namespace:tatooine	typeref:typename:auto
cosinussinus	include/tatooine/sinuscosinus.h	/^  constexpr cosinussinus(Real r = 0.5) noexcept : m_radius{r} {}$/;"	f	struct:tatooine::numerical::cosinussinus
cosinussinus	include/tatooine/sinuscosinus.h	/^  cosinussinus() {$/;"	f	struct:tatooine::symbolic::cosinussinus
cosinussinus	include/tatooine/sinuscosinus.h	/^struct cosinussinus : field<Real, 2, 2> {$/;"	s	namespace:tatooine::symbolic
cosinussinus	include/tatooine/sinuscosinus.h	/^struct cosinussinus : field<cosinussinus<Real>, Real, 2, 2> {$/;"	s	namespace:tatooine::numerical
counterexample_sadlo	include/tatooine/counterexample_sadlo.h	/^  constexpr counterexample_sadlo() noexcept {}$/;"	f	struct:tatooine::numerical::counterexample_sadlo
counterexample_sadlo	include/tatooine/counterexample_sadlo.h	/^  counterexample_sadlo() {$/;"	f	struct:tatooine::symbolic::counterexample_sadlo
counterexample_sadlo	include/tatooine/counterexample_sadlo.h	/^struct counterexample_sadlo : field<Real, 2, 2> {$/;"	s	namespace:tatooine::symbolic
counterexample_sadlo	include/tatooine/counterexample_sadlo.h	/^struct counterexample_sadlo$/;"	s	namespace:tatooine::numerical
create_chunk	include/tatooine/chunked_data.h	/^auto create_chunk() {$/;"	f	namespace:tatooine	typeref:typename:auto
create_chunk	include/tatooine/chunked_data.h	/^auto create_chunk(std::index_sequence<Is...> \/*is*\/) {$/;"	f	namespace:tatooine	typeref:typename:auto
create_chunk_type	include/tatooine/chunked_data.h	/^struct create_chunk_type {$/;"	s	namespace:tatooine
cross	include/tatooine/tensor.h	/^constexpr auto cross(const base_tensor<LhsTensor, LhsReal, 3>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
crtp	include/tatooine/crtp.h	/^struct crtp {$/;"	s	namespace:tatooine
curvature	include/tatooine/curvature_field.h	/^auto curvature(const field<V, Real, 2, 2>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
curvature	include/tatooine/curvature_field.h	/^auto curvature(const field<V, Real, 3, 3>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
curvature	include/tatooine/line.h	/^  Real curvature(Real t) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:Real
curvature	include/tatooine/polynomial_line.h	/^  constexpr auto curvature(Real t) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
curvature	include/tatooine/polynomial_line.h	/^  constexpr auto curvature(Real t, const vec_t& tang) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
curvature	include/tatooine/polynomial_line.h	/^  constexpr auto curvature(const vec_t& tang, const vec_t& snd_der) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
curvature_field	include/tatooine/curvature_field.h	/^  curvature_field(const field<V, Real, 2, 2>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::curvature_field
curvature_field	include/tatooine/curvature_field.h	/^  curvature_field(const field<V, Real, 3, 3>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::curvature_field
curvature_field	include/tatooine/curvature_field.h	/^class curvature_field<V, 2>$/;"	c	namespace:tatooine
curvature_field	include/tatooine/curvature_field.h	/^class curvature_field<V, 3>$/;"	c	namespace:tatooine
curve_to_streamline	include/tatooine/curve_to_streamline.h	/^struct curve_to_streamline {$/;"	s	namespace:tatooine
cxx	include/tatooine/cxxstd.h	/^static constexpr _cxx cxx;$/;"	v	namespace:tatooine	typeref:typename:_cxx
cxx11	include/tatooine/cxxstd.h	/^static constexpr _cxx11 cxx11;$/;"	v	namespace:tatooine	typeref:typename:_cxx11
cxx14	include/tatooine/cxxstd.h	/^static constexpr _cxx14 cxx14;$/;"	v	namespace:tatooine	typeref:typename:_cxx14
cxx17	include/tatooine/cxxstd.h	/^static constexpr _cxx17 cxx17;$/;"	v	namespace:tatooine	typeref:typename:_cxx17
cxx20	include/tatooine/cxxstd.h	/^static constexpr _cxx20 cxx20;$/;"	v	namespace:tatooine	typeref:typename:_cxx20
cxx98	include/tatooine/cxxstd.h	/^static constexpr _cxx98 cxx98;$/;"	v	namespace:tatooine	typeref:typename:_cxx98
cxx_standard	include/tatooine/cxxstd.h	/^constexpr inline auto cxx_standard() {$/;"	f	namespace:tatooine	typeref:typename:auto
d	include/tatooine/chunked_data.h	/^    for (const auto& d : data) { (*this)[i++] = d; }$/;"	m	struct:tatooine::chunked_data	typeref:typename:const auto &
d	include/tatooine/modified_doublegyre.h	/^  static GiNaC::numeric d() { return 9.964223388; }$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:GiNaC::numeric
d	include/tatooine/modified_doublegyre.h	/^  static constexpr Real d       = 9.964223388;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
data	include/tatooine/grid_sampler.h	/^      std::vector<std::array<Real, 3>> data;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::vector<std::array<Real,3>>
data	include/tatooine/grid_sampler.h	/^  Data data(Is... is) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:Data
data	include/tatooine/grid_sampler.h	/^  Data data(Is... is) const {$/;"	f	struct:tatooine::grid_sampler_view	typeref:typename:Data
data	include/tatooine/grid_sampler.h	/^  auto&       data() { return m_data; }$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto &
data	include/tatooine/grid_sampler.h	/^  const auto& data() const { return m_data; }$/;"	f	struct:tatooine::grid_sampler	typeref:typename:const auto &
data	include/tatooine/grid_sampler.h	/^  decltype(auto) data(Is... is) {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:decltype (auto)
data	include/tatooine/multidim_array.h	/^  constexpr auto&       data() { return m_data; }$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
data	include/tatooine/multidim_array.h	/^  constexpr auto&       data() { return m_data; }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
data	include/tatooine/multidim_array.h	/^  constexpr const auto& data() const { return m_data; }$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
data	include/tatooine/multidim_array.h	/^  constexpr const auto& data() const { return m_data; }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
data	include/tatooine/property.h	/^  auto data() const { return m_data.data(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
data	include/tatooine/property.h	/^  auto data() const { return m_data.data(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
data_ptr	include/tatooine/multidim_array.h	/^  constexpr T*       data_ptr() { return m_data.data(); }$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:T *
data_ptr	include/tatooine/multidim_array.h	/^  constexpr T*       data_ptr() { return m_data.data(); }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:T *
data_ptr	include/tatooine/multidim_array.h	/^  constexpr const T* data_ptr() const { return m_data.data(); }$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const T *
data_ptr	include/tatooine/multidim_array.h	/^  constexpr const T* data_ptr() const { return m_data.data(); }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const T *
data_t	include/tatooine/grid_sampler.h	/^  using data_t                           = Data;$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:Data
data_t	include/tatooine/grid_sampler.h	/^  using data_t = Data;$/;"	t	struct:tatooine::grid_sampler	typeref:typename:Data
dataset	include/tatooine/hdf5.h	/^  auto dataset(const char* dataset_name) const {$/;"	f	struct:tatooine::h5::ifile	typeref:typename:auto
dataset	include/tatooine/hdf5.h	/^  auto dataset(const std::string& dataset_name) const {$/;"	f	struct:tatooine::h5::ifile	typeref:typename:auto
dataset	include/tatooine/hdf5.h	/^  auto dataset(const std::string_view& dataset_name) const {$/;"	f	struct:tatooine::h5::ifile	typeref:typename:auto
dataset	include/tatooine/hdf5.h	/^  dataset(const std::shared_ptr<H5::H5File>& p_file, const char* p_dataset_name)$/;"	f	struct:tatooine::h5::dataset
dataset	include/tatooine/hdf5.h	/^  dataset(const std::shared_ptr<H5::H5File>& p_file,$/;"	f	struct:tatooine::h5::dataset
dataset	include/tatooine/hdf5.h	/^struct dataset {$/;"	s	namespace:tatooine::h5
debug_mode	include/tatooine/utility.h	/^inline constexpr auto debug_mode() {$/;"	f	namespace:tatooine	typeref:typename:auto
decrement	include/tatooine/edgeset.h	/^    void decrement() {$/;"	f	struct:tatooine::edgeset::edge_iterator	typeref:typename:void
decrement	include/tatooine/line.h	/^  void decrement() { --m_handle; }$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:void
decrement	include/tatooine/line.h	/^  void decrement() { --m_handle; }$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:void
decrement	include/tatooine/linspace.h	/^  void decrement() { --m_i; }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:void
decrement	include/tatooine/mesh.h	/^    void decrement() {$/;"	f	struct:tatooine::mesh::face_iterator	typeref:typename:void
decrement	include/tatooine/pointset.h	/^    void decrement() {$/;"	f	struct:tatooine::pointset::vertex_iterator	typeref:typename:void
decrement	include/tatooine/simple_tri_mesh.h	/^    void decrement() {$/;"	f	struct:tatooine::simple_tri_mesh::face_iterator	typeref:typename:void
degree	include/tatooine/polynomial.h	/^  static constexpr size_t degree() { return Degree; }$/;"	f	struct:tatooine::polynomial	typeref:typename:size_t
degree	include/tatooine/polynomial_line.h	/^  static constexpr auto degree() { return Degree; }$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
delaunay	include/tatooine/mesh.h	/^inline auto delaunay($/;"	f	namespace:tatooine	typeref:typename:auto
delaunay	include/tatooine/mesh.h	/^inline auto delaunay(const pointset<2, Real>& ps) {$/;"	f	namespace:tatooine	typeref:typename:auto
deque_property	include/tatooine/property.h	/^struct deque_property {$/;"	s	namespace:tatooine
deque_property_impl	include/tatooine/property.h	/^  deque_property_impl(const T& value = T{}) : m_value{value} {}$/;"	f	struct:tatooine::deque_property_impl
deque_property_impl	include/tatooine/property.h	/^  deque_property_impl(const deque_property_impl& other)$/;"	f	struct:tatooine::deque_property_impl
deque_property_impl	include/tatooine/property.h	/^  deque_property_impl(deque_property_impl&& other)$/;"	f	struct:tatooine::deque_property_impl
deque_property_impl	include/tatooine/property.h	/^struct deque_property_impl : deque_property<Handle> {$/;"	s	namespace:tatooine
dereference	include/tatooine/edgeset.h	/^    auto dereference() const { return e; }$/;"	f	struct:tatooine::edgeset::edge_iterator	typeref:typename:auto
dereference	include/tatooine/line.h	/^  Reference dereference() { return m_line.at(m_handle, m_prefer_calc); }$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:Reference
dereference	include/tatooine/line.h	/^  const Reference dereference() const { return m_line.at(m_handle, m_prefer_calc); }$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:const Reference
dereference	include/tatooine/linspace.h	/^  auto dereference() const { return m_lin->at(m_i); }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:auto
dereference	include/tatooine/mesh.h	/^    auto dereference() const { return f; }$/;"	f	struct:tatooine::mesh::face_iterator	typeref:typename:auto
dereference	include/tatooine/pointset.h	/^    auto dereference() const { return v; }$/;"	f	struct:tatooine::pointset::vertex_iterator	typeref:typename:auto
dereference	include/tatooine/simple_tri_mesh.h	/^    auto dereference() const { return f; }$/;"	f	struct:tatooine::simple_tri_mesh::face_iterator	typeref:typename:auto
derived_field	include/tatooine/diff.h	/^  derived_field(const field<Field, Real, N, FieldTensorDims...>& f,$/;"	f	struct:tatooine::derived_field
derived_field	include/tatooine/diff.h	/^struct derived_field : field<derived_field<Field, TensorDims...>, typename Field::real_t,$/;"	s	namespace:tatooine
derived_t	include/tatooine/crtp.h	/^  using derived_t = Derived;$/;"	t	struct:tatooine::crtp	typeref:typename:Derived
det	include/tatooine/tensor.h	/^constexpr Real det(const base_tensor<Tensor, Real, 2, 2>& m) {$/;"	f	namespace:tatooine	typeref:typename:Real
det	include/tatooine/tensor.h	/^constexpr Real det(const base_tensor<Tensor, Real, 3, 3>& m) {$/;"	f	namespace:tatooine	typeref:typename:Real
detAtA	include/tatooine/tensor.h	/^constexpr Real detAtA(const base_tensor<Tensor, Real, 2, 2>& m) {$/;"	f	namespace:tatooine	typeref:typename:Real
detail	include/tatooine/critical_points_bilinear.h	/^namespace detail {$/;"	n	namespace:tatooine
detail	include/tatooine/for_loop.h	/^namespace detail {$/;"	n	namespace:tatooine
detail	include/tatooine/line.h	/^namespace detail {$/;"	n	namespace:tatooine
detail	include/tatooine/parallel_vectors.h	/^namespace detail {$/;"	n	namespace:tatooine
diff	include/tatooine/diff.h	/^auto diff(const field<Field, Real, N, TensorDims...>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto
diff	include/tatooine/diff.h	/^auto diff(const symbolic::field<Real, N, TensorDims...>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto
diff	include/tatooine/line.h	/^auto diff(const line<Real, N>& l) {$/;"	f	namespace:tatooine	typeref:typename:auto
diff	include/tatooine/line.h	/^auto diff(const parameterized_line<Real, N, InterpolationKernel>& l) {$/;"	f	namespace:tatooine	typeref:typename:auto
diff	include/tatooine/polynomial.h	/^  constexpr auto diff() const {$/;"	f	struct:tatooine::polynomial	typeref:typename:auto
diff	include/tatooine/polynomial.h	/^  constexpr auto diff(std::index_sequence<Is...>) const {$/;"	f	struct:tatooine::polynomial	typeref:typename:auto
diff	include/tatooine/polynomial.h	/^constexpr auto diff(const polynomial<Real, Degree>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto
diff	include/tatooine/polynomial_line.h	/^  constexpr auto diff() const { return diff(std::make_index_sequence<N>{}); }$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
diff	include/tatooine/polynomial_line.h	/^  constexpr auto diff(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
diff	include/tatooine/tensor.h	/^auto diff(const base_tensor<Tensor, GiNaC::ex, Dims...>& t_in,$/;"	f	namespace:tatooine	typeref:typename:auto
difference_type	include/tatooine/grid_vertex.h	/^  using difference_type   = size_t;$/;"	t	struct:tatooine::grid_vertex_iterator	typeref:typename:size_t
difference_type	include/tatooine/property.h	/^  using difference_type        = typename container_t::difference_type;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::difference_type
difference_type	include/tatooine/property.h	/^  using difference_type        = typename container_t::difference_type;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::difference_type
different_rotation	include/tatooine/mesh.h	/^    static bool different_rotation(const std::vector<vertex>& lhs,$/;"	f	struct:tatooine::mesh::rotation_independent_face_equal	typeref:typename:bool
diffuse_factor	include/tatooine/gpu/pathline_render_window.h	/^  float                             diffuse_factor;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
dim	include/tatooine/rbc.h	/^  static constexpr std::array dim{512ul, 128ul, 201ul};$/;"	m	struct:tatooine::rbc	typeref:typename:std::array
dimension	include/tatooine/grid.h	/^  constexpr auto&       dimension(size_t i) { return m_dimensions[i]; }$/;"	f	class:tatooine::grid	typeref:typename:auto &
dimension	include/tatooine/grid.h	/^  constexpr const auto& dimension(size_t i) const { return m_dimensions[i]; }$/;"	f	class:tatooine::grid	typeref:typename:const auto &
dimension	include/tatooine/tensor.h	/^  static constexpr auto dimension(const size_t i) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
dimensions	include/tatooine/grid.h	/^  constexpr auto&       dimensions() { return m_dimensions; }$/;"	f	class:tatooine::grid	typeref:typename:auto &
dimensions	include/tatooine/grid.h	/^  constexpr const auto& dimensions() const { return m_dimensions; }$/;"	f	class:tatooine::grid	typeref:typename:const auto &
dimensions	include/tatooine/tensor.h	/^  static constexpr auto dimensions() {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
dims	include/tatooine/grid_sampler.h	/^      std::array<size_t, 3>            dims;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::array<size_t,3>
dims	include/tatooine/grid_sampler.h	/^      std::array<size_t, 3>            dims;$/;"	m	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:std::array<size_t,3>
discretize	include/tatooine/streamsurface.h	/^  auto discretize(Args&&... args) {$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
dispatch	include/tatooine/gpu/lic.h.in	/^  void dispatch(const vec<size_t, 2>& resolution) {$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
distance	include/tatooine/linspace.h	/^constexpr long distance(const linspace_iterator<Real>& it0,$/;"	f	namespace:tatooine	typeref:typename:long
distance	include/tatooine/streamsurface.h	/^  auto distance(const vec2& uv0, const vec2& uv1, size_t num_samples,$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
distance	include/tatooine/tensor.h	/^constexpr auto distance(const base_tensor<LhsTensor, LhsReal, N>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
distribution	include/tatooine/random.h	/^  distribution_t distribution;$/;"	m	struct:tatooine::random_normal	typeref:typename:distribution_t
distribution	include/tatooine/random.h	/^  distribution_t distribution;$/;"	m	struct:tatooine::random_uniform	typeref:typename:distribution_t
distribution_t	include/tatooine/random.h	/^  using distribution_t = std::normal_distribution<T>;$/;"	t	struct:tatooine::random_normal	typeref:typename:std::normal_distribution<T>
distribution_t	include/tatooine/random.h	/^  using distribution_t =$/;"	t	struct:tatooine::random_uniform	typeref:typename:std::conditional_t<std::is_floating_point<T>::value,std::uniform_real_distribution<T>,std::uniform_int_distribution<T>>
domain	include/tatooine/boussinesq.h	/^  static constexpr grid           domain{linspace{-0.5, 0.5, 100},$/;"	m	struct:tatooine::boussinesq	typeref:typename:grid
domain	include/tatooine/rbc.h	/^  static constexpr grid       domain{linspace{0.00390625, 3.99609375, dim[0]},$/;"	m	struct:tatooine::rbc	typeref:typename:grid
domain_to_global	include/tatooine/grid_sampler.h	/^  auto domain_to_global(Real x, size_t i) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
dot	include/tatooine/field.h	/^constexpr auto dot(const field<LhsField, LhsReal, N, D>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
dot	include/tatooine/symbolic_field.h	/^constexpr auto dot(const field<LhsReal, N, D>& lhs,$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
dot	include/tatooine/tensor.h	/^constexpr auto dot(const base_tensor<LhsTensor, LhsReal, N>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
doublegyre	include/tatooine/doublegyre.h	/^  constexpr doublegyre(Real p_epsilon = 0.25, Real p_omega = 2 * pi * 0.1,$/;"	f	struct:tatooine::numerical::doublegyre
doublegyre	include/tatooine/doublegyre.h	/^  doublegyre(const GiNaC::ex& eps   = GiNaC::numeric{1, 4},$/;"	f	struct:tatooine::symbolic::doublegyre
doublegyre	include/tatooine/doublegyre.h	/^struct doublegyre : field<Real, 2, 2> {$/;"	s	namespace:tatooine::symbolic
doublegyre	include/tatooine/doublegyre.h	/^struct doublegyre : vectorfield<doublegyre<Real>, Real, 2> {$/;"	s	namespace:tatooine::numerical
download	include/tatooine/gpu/upload.h	/^auto download(const yavin::texture<2, GPUReal, yavin::R>& tex) {$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
download	include/tatooine/gpu/upload.h	/^auto download(const yavin::texture<2, GPUReal, yavin::RG>& tex) {$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
download	include/tatooine/gpu/upload.h	/^auto download(const yavin::texture<2, GPUReal, yavin::RGB>& tex) {$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
download	include/tatooine/gpu/upload.h	/^auto download(const yavin::texture<2, GPUReal, yavin::RGBA>& tex) {$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
duffing_oscillator	include/tatooine/duffing_oscillator.h	/^  constexpr duffing_oscillator(Real delta, Real alpha, Real beta) noexcept$/;"	f	struct:tatooine::numerical::duffing_oscillator
duffing_oscillator	include/tatooine/duffing_oscillator.h	/^struct duffing_oscillator : field<duffing_oscillator<Real>, Real, 2, 2> {$/;"	s	namespace:tatooine::numerical
dynamic_multidim	include/tatooine/multidim.h	/^  constexpr dynamic_multidim(Res... res)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  constexpr dynamic_multidim(Ts const (&... ranges)[2])$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  constexpr dynamic_multidim(const std::array<size_t, N>& res)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  constexpr dynamic_multidim(const std::pair<Ts, Ts>&... ranges)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  dynamic_multidim(const std::array<std::pair<size_t, size_t>, N>& ranges)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  dynamic_multidim(const std::vector<size_t>& res)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  dynamic_multidim(const std::vector<std::pair<size_t, size_t>>& ranges)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^  dynamic_multidim(std::vector<std::pair<size_t, size_t>>&& ranges)$/;"	f	struct:tatooine::dynamic_multidim
dynamic_multidim	include/tatooine/multidim.h	/^struct dynamic_multidim {$/;"	s	namespace:tatooine
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  constexpr dynamic_multidim_array($/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const fill<S>&             f,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const fill<S>& f, Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const fill<S>& f, const std::vector<UInt>& resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const ones_t& \/*o*\/, Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const ones_t& \/*o*\/,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const random_normal<RandomReal, Engine>& rand,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const random_uniform<RandomReal, Engine>& rand,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const std::array<UInt, N>& resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const std::vector<T>&      data,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const std::vector<T>&    data,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const std::vector<T>& data, Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const std::vector<UInt>& resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const zeros_t& \/*z*\/, Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(const zeros_t& \/*z*\/,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(random_normal<RandomReal, Engine>&& rand,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(random_uniform<RandomReal, Engine>&& rand,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(std::vector<T>&&           data,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(std::vector<T>&&         data,$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^  dynamic_multidim_array(std::vector<T>&& data, Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_array
dynamic_multidim_array	include/tatooine/multidim_array.h	/^class dynamic_multidim_array : public dynamic_multidim_resolution<Indexing> {$/;"	c	namespace:tatooine
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution($/;"	f	class:tatooine::dynamic_multidim_resolution
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution(Resolution... resolution)$/;"	f	class:tatooine::dynamic_multidim_resolution
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution(const std::array<UInt, N>& resolution)$/;"	f	class:tatooine::dynamic_multidim_resolution
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution(const std::vector<UInt>& resolution)$/;"	f	class:tatooine::dynamic_multidim_resolution
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution(const std::vector<size_t>& resolution)$/;"	f	class:tatooine::dynamic_multidim_resolution
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution(std::vector<size_t>&& resolution)$/;"	f	class:tatooine::dynamic_multidim_resolution
dynamic_multidim_resolution	include/tatooine/multidim_resolution.h	/^class dynamic_multidim_resolution {$/;"	c	namespace:tatooine
e	include/tatooine/edgeset.h	/^    edge           e;$/;"	m	struct:tatooine::edgeset::edge_iterator	typeref:typename:edge
edge	include/tatooine/edgeset.h	/^    edge(size_t i) : handle{i} {}$/;"	f	struct:tatooine::edgeset::edge
edge	include/tatooine/edgeset.h	/^  struct edge : handle {$/;"	s	class:tatooine::edgeset
edge_at	include/tatooine/grid.h	/^  auto edge_at(size_t edge_idx) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
edge_container	include/tatooine/edgeset.h	/^  struct edge_container {$/;"	s	class:tatooine::edgeset
edge_iterator	include/tatooine/edgeset.h	/^    edge_iterator(const edge_iterator& other) : e{other.e}, es{other.es} {}$/;"	f	struct:tatooine::edgeset::edge_iterator
edge_iterator	include/tatooine/edgeset.h	/^    edge_iterator(edge _e, const edgeset* _es) : e{_e}, es{_es} {}$/;"	f	struct:tatooine::edgeset::edge_iterator
edge_iterator	include/tatooine/edgeset.h	/^  struct edge_iterator$/;"	s	class:tatooine::edgeset
edge_pair	include/tatooine/grid.h	/^  using edge_pair     = std::pair<edge_t, edge_t>;$/;"	t	class:tatooine::grid	typeref:typename:std::pair<edge_t,edge_t>
edge_prop	include/tatooine/edgeset.h	/^  struct edge_prop : public property_type<T> {$/;"	s	class:tatooine::edgeset
edge_prop	include/tatooine/mesh.h	/^  using edge_prop = typename parent_t::template edge_prop<T>;$/;"	t	class:tatooine::mesh	typeref:typename:parent_t::template edge_prop<T>
edge_property	include/tatooine/edgeset.h	/^  auto& edge_property(const std::string& name) {$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
edge_property	include/tatooine/edgeset.h	/^  const auto& edge_property(const std::string& name) const {$/;"	f	class:tatooine::edgeset	typeref:typename:const auto &
edge_seq_t	include/tatooine/grid.h	/^  using edge_seq_t    = std::vector<edge_t>;$/;"	t	class:tatooine::grid	typeref:typename:std::vector<edge_t>
edge_t	include/tatooine/grid.h	/^  using edge_t        = grid_edge<Real, N>;$/;"	t	class:tatooine::grid	typeref:typename:grid_edge<Real,N>
edge_table	include/tatooine/marchingcubeslookuptable.h	/^static constexpr std::array<int, 256> edge_table = {$/;"	v	namespace:tatooine::marchingcubes_lookup	typeref:typename:std::array<int,256>
edges	include/tatooine/edgeset.h	/^  auto edges() const { return edge_container{this}; }$/;"	f	class:tatooine::edgeset	typeref:typename:auto
edges	include/tatooine/edgeset.h	/^  auto&       edges(vertex v) { return m_edges_of_vertices->at(v); }$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
edges	include/tatooine/edgeset.h	/^  const auto& edges(vertex v) const { return m_edges_of_vertices->at(v); }$/;"	f	class:tatooine::edgeset	typeref:typename:const auto &
edges	include/tatooine/grid.h	/^  auto edges(const vertex_t& v) const { return grid_vertex_edges<Real, N>(v); }$/;"	f	class:tatooine::grid	typeref:typename:auto
edges	include/tatooine/grid_vertex_edges.h	/^    auto edges() {$/;"	f	struct:tatooine::grid_vertex_edges::iterator	typeref:typename:auto
edges	include/tatooine/mesh.h	/^  auto&          edges(face f) { return m_edges_of_faces->at(f); }$/;"	f	class:tatooine::mesh	typeref:typename:auto &
edges	include/tatooine/mesh.h	/^  const auto&    edges(face f) const { return m_edges_of_faces->at(f); }$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
edgeset	include/tatooine/edgeset.h	/^  edgeset() {$/;"	f	class:tatooine::edgeset
edgeset	include/tatooine/edgeset.h	/^  edgeset(const edgeset& other)$/;"	f	class:tatooine::edgeset
edgeset	include/tatooine/edgeset.h	/^  edgeset(const triangle::io& io) : parent_t(io) {$/;"	f	class:tatooine::edgeset
edgeset	include/tatooine/edgeset.h	/^  edgeset(edgeset&& other)$/;"	f	class:tatooine::edgeset
edgeset	include/tatooine/edgeset.h	/^  edgeset(std::initializer_list<pos_t>&& vertices)$/;"	f	class:tatooine::edgeset
edgeset	include/tatooine/edgeset.h	/^class edgeset : public pointset<Real, N> {$/;"	c	namespace:tatooine
eigenvalues	include/tatooine/tensor.h	/^vec<std::complex<double>, N> eigenvalues(tensor<double, N, N> A) {$/;"	f	namespace:tatooine	typeref:typename:vec<std::complex<double>,N>
eigenvalues	include/tatooine/tensor.h	/^vec<std::complex<float>, N> eigenvalues(tensor<float, N, N> A) {$/;"	f	namespace:tatooine	typeref:typename:vec<std::complex<float>,N>
eigenvalues_sym	include/tatooine/tensor.h	/^auto eigenvalues_sym(tensor<double, N, N> A) {$/;"	f	namespace:tatooine	typeref:typename:auto
eigenvalues_sym	include/tatooine/tensor.h	/^auto eigenvalues_sym(tensor<float, N, N> A) {$/;"	f	namespace:tatooine	typeref:typename:auto
eigenvectors	include/tatooine/tensor.h	/^eigenvectors(tensor<double, N, N> A) {$/;"	f	namespace:tatooine	typeref:typename:std::pair<mat<std::complex<double>,N,N>,vec<std::complex<double>,N>>
eigenvectors	include/tatooine/tensor.h	/^eigenvectors(tensor<float, N, N> A) {$/;"	f	namespace:tatooine	typeref:typename:std::pair<mat<std::complex<float>,N,N>,vec<std::complex<float>,N>>
eigenvectors_sym	include/tatooine/tensor.h	/^std::pair<mat<double, N, N>, vec<double, N>> eigenvectors_sym($/;"	f	namespace:tatooine	typeref:typename:std::pair<mat<double,N,N>,vec<double,N>>
eigenvectors_sym	include/tatooine/tensor.h	/^std::pair<mat<float, N, N>, vec<float, N>> eigenvectors_sym($/;"	f	namespace:tatooine	typeref:typename:std::pair<mat<float,N,N>,vec<float,N>>
emplace	include/tatooine/cache.h	/^  auto emplace(const Key& key, Args&&... args) {$/;"	f	class:tatooine::cache	typeref:typename:auto
emplace_back	include/tatooine/property.h	/^  void emplace_back(Ts&&... ts) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
emplace_back	include/tatooine/property.h	/^  void emplace_back(Ts&&... ts) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
empty	include/tatooine/line.h	/^  auto empty() const { return m_vertices.empty(); }$/;"	f	struct:tatooine::line	typeref:typename:auto
empty_exception	include/tatooine/line.h	/^  struct empty_exception : std::exception {};$/;"	s	struct:tatooine::line
enable_if_arithmetic	include/tatooine/type_traits.h	/^using enable_if_arithmetic =$/;"	t	namespace:tatooine
enable_if_arithmetic_complex_or_symbolic	include/tatooine/type_traits.h	/^using enable_if_arithmetic_complex_or_symbolic = typename std::enable_if_t<$/;"	t	namespace:tatooine
enable_if_arithmetic_or_complex	include/tatooine/type_traits.h	/^using enable_if_arithmetic_or_complex = typename std::enable_if_t<$/;"	t	namespace:tatooine
enable_if_arithmetic_or_symbolic	include/tatooine/type_traits.h	/^using enable_if_arithmetic_or_symbolic = typename std::enable_if_t<$/;"	t	namespace:tatooine
enable_if_complex	include/tatooine/type_traits.h	/^using enable_if_complex =$/;"	t	namespace:tatooine
enable_if_floating_point	include/tatooine/type_traits.h	/^using enable_if_floating_point =$/;"	t	namespace:tatooine
enable_if_integral	include/tatooine/type_traits.h	/^using enable_if_integral =$/;"	t	namespace:tatooine
enable_if_invocable	include/tatooine/type_traits.h	/^using enable_if_invocable =$/;"	t	namespace:tatooine	typeref:typename:std::enable_if_t<std::is_invocable_v<F,Args...>,bool>
enable_if_iterator	include/tatooine/type_traits.h	/^using enable_if_iterator =$/;"	t	namespace:tatooine
enable_if_matrix	include/tatooine/tensor.h	/^using enable_if_matrix = std::enable_if_t<(is_matrix_v<Ts> && ...), bool>;$/;"	t	namespace:tatooine
enable_if_not_arithmetic	include/tatooine/type_traits.h	/^using enable_if_not_arithmetic =$/;"	t	namespace:tatooine
enable_if_polynomial	include/tatooine/polynomial.h	/^using enable_if_polynomial =$/;"	t	namespace:tatooine
enable_if_symbolic	include/tatooine/type_traits.h	/^using enable_if_symbolic =$/;"	t	namespace:tatooine
enable_if_tensor	include/tatooine/tensor.h	/^using enable_if_tensor = std::enable_if_t<(is_tensor_v<Ts> && ...), bool>;$/;"	t	namespace:tatooine
enable_if_unsigned_integral	include/tatooine/type_traits.h	/^using enable_if_unsigned_integral =$/;"	t	namespace:tatooine
enable_if_vector	include/tatooine/tensor.h	/^using enable_if_vector = std::enable_if_t<(is_vector_v<Ts> && ...), bool>;$/;"	t	namespace:tatooine
end	include/tatooine/edgeset.h	/^    auto end() const {$/;"	f	struct:tatooine::edgeset::edge_container	typeref:typename:auto
end	include/tatooine/grid.h	/^  auto        end() const { return g->vertex_end(); }$/;"	f	struct:tatooine::grid::vertex_container	typeref:typename:auto
end	include/tatooine/grid_sampler.h	/^  auto end() const { return iterator{this, size(0)}; }$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
end	include/tatooine/grid_vertex_edges.h	/^  auto end() {$/;"	f	struct:tatooine::grid_vertex_edges	typeref:typename:auto
end	include/tatooine/grid_vertex_neighbors.h	/^  auto end() {$/;"	f	struct:tatooine::grid_vertex_neighbors	typeref:typename:auto
end	include/tatooine/line.h	/^  auto end() const {$/;"	f	struct:tatooine::const_line_vertex_container	typeref:typename:auto
end	include/tatooine/line.h	/^  auto end() const {$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:auto
end	include/tatooine/line.h	/^  auto end() { return iterator{Handle{m_line.num_vertices()}, m_line, m_prefer_calc}; }$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:auto
end	include/tatooine/line.h	/^auto end($/;"	f	namespace:tatooine	typeref:typename:auto
end	include/tatooine/line.h	/^auto end(const const_line_vertex_container<Line, Real, N, Handle, Value,$/;"	f	namespace:tatooine	typeref:typename:auto
end	include/tatooine/line.h	/^auto end(line_vertex_container<Line, Real, N, Handle, Value, Reference>& it) {$/;"	f	namespace:tatooine	typeref:typename:auto
end	include/tatooine/linspace.h	/^  auto end() const { return m_lin->end(); }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:auto
end	include/tatooine/linspace.h	/^  constexpr auto end() const { return iterator{this, m_size}; }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
end	include/tatooine/linspace.h	/^constexpr auto end(const linspace<Real>& l) {$/;"	f	namespace:tatooine	typeref:typename:auto
end	include/tatooine/mesh.h	/^    auto end() const { return face_iterator{face{m_mesh->m_faces.size()}, m_mesh}; }$/;"	f	struct:tatooine::mesh::face_container	typeref:typename:auto
end	include/tatooine/multidim.h	/^  auto end() {$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:auto
end	include/tatooine/multidim.h	/^  constexpr auto end() {$/;"	f	struct:tatooine::static_multidim	typeref:typename:auto
end	include/tatooine/pointset.h	/^    auto end() const {$/;"	f	struct:tatooine::pointset::vertex_container	typeref:typename:auto
end	include/tatooine/pointset.h	/^auto end(const typename pointset<Real, N>::vertex_container& verts) {$/;"	f	namespace:tatooine	typeref:typename:auto
end	include/tatooine/property.h	/^  auto end() const { return m_data.end(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
end	include/tatooine/property.h	/^  auto end() const { return m_data.end(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
end	include/tatooine/property.h	/^  auto end() { return m_data.end(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
end	include/tatooine/property.h	/^  auto end() { return m_data.end(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
end	include/tatooine/simple_tri_mesh.h	/^    auto end() const {$/;"	f	struct:tatooine::simple_tri_mesh::face_container	typeref:typename:auto
end	include/tatooine/subgrid.h	/^  auto end() {$/;"	f	struct:tatooine::subgrid	typeref:typename:auto
ends	include/tatooine/for_loop.h	/^  const std::array<Int, N>& ends;$/;"	m	struct:tatooine::detail::for_loop_impl	typeref:typename:const std::array<Int,N> &
energy_t	include/tatooine/simulated_annealing.h	/^  using energy_t = Energy;$/;"	t	struct:tatooine::simulated_annealing_listener	typeref:typename:Energy
engine	include/tatooine/random.h	/^  Engine         engine;$/;"	m	struct:tatooine::random_normal	typeref:typename:Engine
engine	include/tatooine/random.h	/^  Engine         engine;$/;"	m	struct:tatooine::random_uniform	typeref:typename:Engine
engine_t	include/tatooine/random.h	/^  using engine_t       = Engine;$/;"	t	struct:tatooine::random_normal	typeref:typename:Engine
engine_t	include/tatooine/random.h	/^  using engine_t = Engine;$/;"	t	struct:tatooine::random_uniform	typeref:typename:Engine
enqueue	include/tatooine/cache.h	/^  void enqueue(const_iterator it, bool ins) {$/;"	f	class:tatooine::cache	typeref:typename:void
eps	include/tatooine/diff.h	/^  auto        eps(size_t i) const { return m_eps(i); }$/;"	f	struct:tatooine::derived_field	typeref:typename:auto
eps	include/tatooine/diff.h	/^  auto&       eps() { return m_eps; }$/;"	f	struct:tatooine::derived_field	typeref:typename:auto &
eps	include/tatooine/diff.h	/^  auto&       eps(size_t i) { return m_eps(i); }$/;"	f	struct:tatooine::derived_field	typeref:typename:auto &
eps	include/tatooine/diff.h	/^  const auto& eps() const { return m_eps; }$/;"	f	struct:tatooine::derived_field	typeref:typename:const auto &
eps	include/tatooine/ftle.h	/^  auto  eps() const { return m_flowmap_gradient.eps(); }$/;"	f	struct:tatooine::ftle	typeref:typename:auto
eps	include/tatooine/ftle.h	/^  auto  eps(size_t i) const {$/;"	f	struct:tatooine::ftle	typeref:typename:auto
eps	include/tatooine/ftle.h	/^  auto& eps() { return m_flowmap_gradient.eps(); }$/;"	f	struct:tatooine::ftle	typeref:typename:auto &
eps	include/tatooine/ftle.h	/^  auto& eps(size_t i) { return m_flowmap_gradient.eps(i); }$/;"	f	struct:tatooine::ftle	typeref:typename:auto &
epsilon	include/tatooine/doublegyre.h	/^  Real                epsilon, omega, A;$/;"	m	struct:tatooine::numerical::doublegyre	typeref:typename:Real
epsilon	include/tatooine/modified_doublegyre.h	/^  static constexpr Real epsilon = 0.25;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
equal	include/tatooine/edgeset.h	/^    bool equal(const edge_iterator& other) const { return e.i == other.e.i; }$/;"	f	struct:tatooine::edgeset::edge_iterator	typeref:typename:bool
equal	include/tatooine/line.h	/^  auto equal(const const_line_vertex_iterator& other) const {$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:auto
equal	include/tatooine/line.h	/^  auto equal(const line_vertex_iterator& other) const {$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:auto
equal	include/tatooine/linspace.h	/^  auto equal(const linspace_iterator& other) const { return m_i == other.m_i; }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:auto
equal	include/tatooine/mesh.h	/^    bool equal(const face_iterator& other) const { return f.i == other.f.i; }$/;"	f	struct:tatooine::mesh::face_iterator	typeref:typename:bool
equal	include/tatooine/pointset.h	/^    auto equal(const vertex_iterator& other) const { return v == other.v; }$/;"	f	struct:tatooine::pointset::vertex_iterator	typeref:typename:auto
equal	include/tatooine/simple_tri_mesh.h	/^    auto equal(const face_iterator& other) const { return f == other.f; }$/;"	f	struct:tatooine::simple_tri_mesh::face_iterator	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(const_iterator first, const_iterator last) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(const_iterator first, const_iterator last) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(const_iterator pos) { return m_data.erase(pos); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(const_iterator pos) { return m_data.erase(pos); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(iterator first, iterator last) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(iterator first, iterator last) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(iterator pos) { return m_data.erase(pos); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  auto erase(iterator pos) { return m_data.erase(pos); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
erase	include/tatooine/property.h	/^  void erase(size_t i) override { erase(begin() + i); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
erase	include/tatooine/property.h	/^  void erase(size_t i) override { erase(next(begin(), i)); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
es	include/tatooine/edgeset.h	/^    const edgeset* es;$/;"	m	struct:tatooine::edgeset::edge_iterator	typeref:typename:const edgeset *
ev	include/tatooine/symbolic.h	/^auto ev(const GiNaC::ex& expr, Relations&&... relations) {$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
eval	include/tatooine/tensor.h	/^void eval(base_tensor<Tensor, GiNaC::ex, Dims...>& m) {$/;"	f	namespace:tatooine	typeref:typename:void
eval_bilinear	include/tatooine/critical_points_bilinear.h	/^constexpr auto eval_bilinear(const base_tensor<T0, Real, 2>& v00,$/;"	f	namespace:tatooine::detail	typeref:typename:auto
evalf	include/tatooine/tensor.h	/^void evalf(base_tensor<Tensor, GiNaC::ex, Dims...>& m) {$/;"	f	namespace:tatooine	typeref:typename:void
evalm	include/tatooine/tensor.h	/^void evalm(base_tensor<Tensor, GiNaC::ex, Dims...>& m) {$/;"	f	namespace:tatooine	typeref:typename:void
evaluate	include/tatooine/abcflow.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t) const {$/;"	f	struct:tatooine::numerical::abcflow	typeref:typename:tensor_t
evaluate	include/tatooine/boussinesq.h	/^  tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::boussinesq	typeref:typename:tensor_t
evaluate	include/tatooine/cavity.h	/^  tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::cavity	typeref:typename:tensor_t
evaluate	include/tatooine/constant_vectorfield.h	/^   constexpr tensor_t evaluate(const pos_t& \/*x*\/, Real \/*t*\/) const {$/;"	f	struct:tatooine::constant_vectorfield	typeref:typename:tensor_t
evaluate	include/tatooine/counterexample_sadlo.h	/^  constexpr vec_t evaluate(const pos_t& p, Real t) const {$/;"	f	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:vec_t
evaluate	include/tatooine/curvature_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::curvature_field	typeref:typename:tensor_t
evaluate	include/tatooine/diff.h	/^  auto evaluate(const pos_t& x, const real_t t) const {$/;"	f	struct:tatooine::derived_field	typeref:typename:auto
evaluate	include/tatooine/doublegyre.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::numerical::doublegyre	typeref:typename:tensor_t
evaluate	include/tatooine/duffing_oscillator.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::numerical::duffing_oscillator	typeref:typename:tensor_t
evaluate	include/tatooine/duffing_oscillator.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::numerical::forced_duffing_oscillator	typeref:typename:tensor_t
evaluate	include/tatooine/field.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real t = 0) const {$/;"	f	struct:tatooine::field	typeref:typename:tensor_t
evaluate	include/tatooine/field.h	/^  tensor_t evaluate(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::binary_operation_field	typeref:typename:tensor_t
evaluate	include/tatooine/field.h	/^  tensor_t evaluate(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::unary_operation_field	typeref:typename:tensor_t
evaluate	include/tatooine/fixed_time_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::fixed_time_field	typeref:typename:tensor_t
evaluate	include/tatooine/flowmap.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::flowmap	typeref:typename:tensor_t
evaluate	include/tatooine/flowmap.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t0, real_t tau) const {$/;"	f	struct:tatooine::flowmap	typeref:typename:tensor_t
evaluate	include/tatooine/ftle.h	/^   tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::ftle	typeref:typename:tensor_t
evaluate	include/tatooine/helicity_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::helicity_field	typeref:typename:tensor_t
evaluate	include/tatooine/interpolation.h	/^  constexpr auto evaluate(Real t) const { return m_polynomial(t); }$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:auto
evaluate	include/tatooine/interpolation.h	/^  constexpr auto evaluate(Real t) const { return m_polynomial(t); }$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:auto
evaluate	include/tatooine/lambda2_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::lambda2_field	typeref:typename:tensor_t
evaluate	include/tatooine/modified_doublegyre.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::numerical::modified_doublegyre	typeref:typename:tensor_t
evaluate	include/tatooine/okubo_weiss_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::okubo_weiss_field	typeref:typename:tensor_t
evaluate	include/tatooine/orbit.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::numerical::orbit	typeref:typename:tensor_t
evaluate	include/tatooine/polynomial.h	/^  constexpr auto evaluate(Real x) const {$/;"	f	struct:tatooine::polynomial	typeref:typename:auto
evaluate	include/tatooine/polynomial_line.h	/^  constexpr auto evaluate(Real t) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
evaluate	include/tatooine/polynomial_line.h	/^  constexpr auto evaluate(Real t, std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
evaluate	include/tatooine/polynomial_line.h	/^  constexpr auto evaluate(const linspace<Real>& ts) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
evaluate	include/tatooine/rbc.h	/^  tensor_t evaluate(const pos_t& pos, real_t t) const {$/;"	f	struct:tatooine::rbc	typeref:typename:tensor_t
evaluate	include/tatooine/sinuscosinus.h	/^  constexpr tensor_t evaluate(const pos_t& \/*x*\/, Real t) const {$/;"	f	struct:tatooine::numerical::cosinussinus	typeref:typename:tensor_t
evaluate	include/tatooine/sinuscosinus.h	/^  constexpr tensor_t evaluate(const pos_t& \/*x*\/, Real t) const {$/;"	f	struct:tatooine::numerical::sinuscosinus	typeref:typename:tensor_t
evaluate	include/tatooine/spacetime_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::spacetime_field	typeref:typename:tensor_t
evaluate	include/tatooine/symbolic_field.h	/^  tensor_t evaluate(const pos_t& _x, double _t) const {$/;"	f	struct:tatooine::symbolic::field	typeref:typename:tensor_t
evaluate	include/tatooine/symbolic_field.h	/^  tensor_t evaluate(const pos_t& _x, double _t,$/;"	f	struct:tatooine::symbolic::field	typeref:typename:tensor_t
evaluate	include/tatooine/vorticity_field.h	/^  constexpr tensor_t evaluate(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::vorticity_field	typeref:typename:tensor_t
evolve	include/tatooine/streamsurface.h	/^  auto evolve(const front_t& front, Real step, Real cache_bw_tau,$/;"	f	struct:tatooine::simple_discretization	typeref:typename:auto
evolve	include/tatooine/streamsurface.h	/^  auto evolve(const front_t& front, Real step, Real desired_spatial_dist,$/;"	f	struct:tatooine::hultquist_discretization	typeref:typename:auto
evtod	include/tatooine/symbolic.h	/^auto evtod(const GiNaC::ex& expr, Relations&&... relations) {$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
evtod	include/tatooine/tensor.h	/^auto evtod(const base_tensor<Tensor, GiNaC::ex, Dims...>& t_in,$/;"	f	namespace:tatooine	typeref:typename:auto
expand	include/tatooine/tensor.h	/^void expand(base_tensor<Tensor, GiNaC::ex, Dims...>& m) {$/;"	f	namespace:tatooine	typeref:typename:void
expr	include/tatooine/symbolic_field.h	/^  [[nodiscard]] const auto& expr() const { return m_expr; }$/;"	f	struct:tatooine::symbolic::field	typeref:typename:[[nodiscard]]const auto &
extract	include/tatooine/extract.h	/^constexpr auto extract(Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:auto
extract	include/tatooine/extract.h	/^constexpr auto& extract(Cont& extracted_data) {$/;"	f	namespace:tatooine	typeref:typename:auto &
extract	include/tatooine/extract.h	/^constexpr auto& extract(Cont& extracted_data, T&& t, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:auto &
f	include/tatooine/mesh.h	/^    face        f;$/;"	m	struct:tatooine::mesh::face_iterator	typeref:typename:face
f	include/tatooine/simple_tri_mesh.h	/^    face                   f;$/;"	m	struct:tatooine::simple_tri_mesh::face_iterator	typeref:typename:face
f_return_type	include/tatooine/chrono.h	/^  using f_return_type = decltype(f(std::forward<Param>(param)...));$/;"	t	function:tatooine::measure
face	include/tatooine/mesh.h	/^    face(size_t i) : handle{i} {}$/;"	f	struct:tatooine::mesh::face
face	include/tatooine/mesh.h	/^  struct face : handle {$/;"	s	class:tatooine::mesh
face	include/tatooine/simple_tri_mesh.h	/^  struct face : handle {$/;"	s	class:tatooine::simple_tri_mesh
face	include/tatooine/streamsurface.h	/^  using face             = typename parent_t::face;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::face
face_container	include/tatooine/mesh.h	/^  struct face_container {$/;"	s	class:tatooine::mesh
face_container	include/tatooine/simple_tri_mesh.h	/^  struct face_container {$/;"	s	class:tatooine::simple_tri_mesh
face_has_edge	include/tatooine/mesh.h	/^  constexpr bool face_has_edge(face f, edge e) const {$/;"	f	class:tatooine::mesh	typeref:typename:bool
face_iterator	include/tatooine/mesh.h	/^    face_iterator(const face_iterator& other) : f{other.f}, m{other.m} {}$/;"	f	struct:tatooine::mesh::face_iterator
face_iterator	include/tatooine/mesh.h	/^    face_iterator(face _f, const mesh* _m) : f{_f}, m{_m} {}$/;"	f	struct:tatooine::mesh::face_iterator
face_iterator	include/tatooine/mesh.h	/^  struct face_iterator$/;"	s	class:tatooine::mesh
face_iterator	include/tatooine/simple_tri_mesh.h	/^    face_iterator(const face_iterator& other) : f{other.f}, m_mesh{other.m_mesh} {}$/;"	f	struct:tatooine::simple_tri_mesh::face_iterator
face_iterator	include/tatooine/simple_tri_mesh.h	/^    face_iterator(face _f, const simple_tri_mesh* mesh) : f{_f}, m_mesh{mesh} {}$/;"	f	struct:tatooine::simple_tri_mesh::face_iterator
face_iterator	include/tatooine/simple_tri_mesh.h	/^  struct face_iterator$/;"	s	class:tatooine::simple_tri_mesh
face_prop	include/tatooine/mesh.h	/^  struct face_prop : public property_type<T> {$/;"	s	class:tatooine::mesh
face_property	include/tatooine/mesh.h	/^  auto& face_property(const std::string& name) {$/;"	f	class:tatooine::mesh	typeref:typename:auto &
face_property	include/tatooine/mesh.h	/^  const auto& face_property(std::string const& name) const {$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
face_property	include/tatooine/simple_tri_mesh.h	/^  auto& face_property(const std::string& name) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto &
face_property	include/tatooine/simple_tri_mesh.h	/^  const auto& face_property(const std::string& name) const {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:const auto &
face_property_t	include/tatooine/simple_tri_mesh.h	/^  using face_property_t = vector_property_impl<face, T>;$/;"	t	class:tatooine::simple_tri_mesh	typeref:typename:vector_property_impl<face,T>
faces	include/tatooine/mesh.h	/^  auto&          faces(edge e) { return m_faces_of_edges->at(e); }$/;"	f	class:tatooine::mesh	typeref:typename:auto &
faces	include/tatooine/mesh.h	/^  auto&          faces(vertex v) { return m_faces_of_vertices->at(v); }$/;"	f	class:tatooine::mesh	typeref:typename:auto &
faces	include/tatooine/mesh.h	/^  const auto&    faces(edge e) const { return m_faces_of_edges->at(e); }$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
faces	include/tatooine/mesh.h	/^  const auto&    faces(vertex v) const { return m_faces_of_vertices->at(v); }$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
faces	include/tatooine/mesh.h	/^  constexpr auto faces() const { return face_container{this}; }$/;"	f	class:tatooine::mesh	typeref:typename:auto
faces	include/tatooine/simple_tri_mesh.h	/^  auto faces() const { return face_container{this}; }$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto
fade_length	include/tatooine/gpu/pathline_render_window.h	/^  float                             fade_length;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
field	include/tatooine/field.h	/^struct field : crtp<Derived> {$/;"	s	namespace:tatooine
field	include/tatooine/symbolic_field.h	/^  constexpr field(const symtensor_t& ex) : m_expr{ex} {}$/;"	f	struct:tatooine::symbolic::field
field	include/tatooine/symbolic_field.h	/^  constexpr field(symtensor_t&& ex) : m_expr{std::move(ex)} {}$/;"	f	struct:tatooine::symbolic::field
field	include/tatooine/symbolic_field.h	/^struct field : tatooine::field<field<real_t, N, TensorDims...>, real_t, N,$/;"	s	namespace:tatooine::symbolic
field_t	include/tatooine/fixed_time_field.h	/^  using field_t  = Field;$/;"	t	struct:tatooine::fixed_time_field	typeref:typename:Field
field_t	include/tatooine/spacetime_field.h	/^  using field_t  = Field;$/;"	t	struct:tatooine::spacetime_field	typeref:typename:Field
field_t	include/tatooine/spacetime_field.h	/^  using field_t  = symbolic::field<Real, N - 1, VecDim - 1>;$/;"	t	struct:tatooine::spacetime_field	typeref:typename:symbolic::field<Real,N-1,VecDim-1>
files_changed	include/tatooine/gpu/line_shader.h.in	/^  bool files_changed() const {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:bool	file:
fill	include/tatooine/multidim_array.h	/^struct fill {$/;"	s	namespace:tatooine
filter_length	include/tatooine/line.h	/^auto filter_length(Lines lines, Real length) {$/;"	f	namespace:tatooine::detail	typeref:typename:auto
filter_length	include/tatooine/line.h	/^auto filter_length(const std::list<line<Real, N>>& lines, MaxDist max_dist) {$/;"	f	namespace:tatooine	typeref:typename:auto
filter_length	include/tatooine/line.h	/^auto filter_length(const std::vector<line<Real, N>>& lines, MaxDist max_dist) {$/;"	f	namespace:tatooine	typeref:typename:auto
find_and_jump	include/tatooine/amira_file.h	/^inline const char* find_and_jump(const char* buffer,$/;"	f	namespace:tatooine::amira	typeref:typename:const char *
find_boundary_switch_points	include/tatooine/boundary_switch.h	/^auto find_boundary_switch_points($/;"	f	namespace:tatooine	typeref:typename:auto
find_critical_points	include/tatooine/critical_points.h	/^auto find_critical_points($/;"	f	namespace:tatooine	typeref:typename:auto
find_duplicates	include/tatooine/pointset.h	/^  auto find_duplicates(Real eps = 1e-6) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto
find_link_properties	include/tatooine/edgeset.h	/^  auto find_link_properties() {$/;"	f	class:tatooine::edgeset	typeref:typename:auto
find_link_properties	include/tatooine/mesh.h	/^  void find_link_properties() {$/;"	f	class:tatooine::mesh	typeref:typename:void
find_uv_prop	include/tatooine/parameterized_mesh.h	/^  auto find_uv_prop() {$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto
find_uv_prop	include/tatooine/streamsurface.h	/^  auto& find_uv_prop() { return this->template vertex_property<uv_t>("uv"); }$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto &
first_person_window	include/tatooine/gpu/first_person_window.h	/^  first_person_window(GLsizei width = 800, GLsizei height = 600)$/;"	f	struct:tatooine::first_person_window
first_person_window	include/tatooine/gpu/first_person_window.h	/^struct first_person_window : yavin::window, yavin::window_listener {$/;"	s	namespace:tatooine
fixed_index	include/tatooine/grid_sampler.h	/^  size_t      fixed_index;$/;"	m	struct:tatooine::grid_sampler_view	typeref:typename:size_t
fixed_time_field	include/tatooine/fixed_time_field.h	/^  constexpr fixed_time_field(const field<Field, Real, N, TensorDims...>& field,$/;"	f	struct:tatooine::fixed_time_field
fixed_time_field	include/tatooine/fixed_time_field.h	/^struct fixed_time_field : field<fixed_time_field<Field, Real, N, TensorDims...>,$/;"	s	namespace:tatooine
flip	include/tatooine/template_helper.h	/^  static constexpr auto flip() { return flip(flip_t<T1, Ts...>::flip()); }$/;"	f	struct:tatooine::template_helper::flip_t	typeref:typename:auto
flip	include/tatooine/template_helper.h	/^  static constexpr auto flip() { return flipped<T>{}; }$/;"	f	struct:tatooine::template_helper::flip_t	typeref:typename:auto
flip	include/tatooine/template_helper.h	/^  static constexpr auto flip(flipped<Flipped_Ts...>&&) {$/;"	f	struct:tatooine::template_helper::flip_t	typeref:typename:auto
flip	include/tatooine/template_helper.h	/^inline auto flip() {$/;"	f	namespace:tatooine::template_helper	typeref:typename:auto
flip_coin	include/tatooine/random.h	/^auto flip_coin(RandomEngine&& eng) {$/;"	f	namespace:tatooine	typeref:typename:auto
flip_t	include/tatooine/template_helper.h	/^struct flip_t<T0, T1, Ts...> {$/;"	s	namespace:tatooine::template_helper
flip_t	include/tatooine/template_helper.h	/^struct flip_t<T> {$/;"	s	namespace:tatooine::template_helper
flipped	include/tatooine/template_helper.h	/^struct flipped {};$/;"	s	namespace:tatooine::template_helper
flowmap	include/tatooine/flowmap.h	/^  constexpr flowmap(const field<V, FieldReal, N, N>& vf,$/;"	f	struct:tatooine::flowmap
flowmap	include/tatooine/flowmap.h	/^struct flowmap : field<flowmap<V, Integrator>, typename V::real_t,$/;"	s	namespace:tatooine
flowmap_gradient	include/tatooine/ftle.h	/^  auto& flowmap_gradient() { return m_flowmap_gradient; }$/;"	f	struct:tatooine::ftle	typeref:typename:auto &
flowmap_gradient	include/tatooine/ftle.h	/^  const auto& flowmap_gradient() const { return m_flowmap_gradient; }$/;"	f	struct:tatooine::ftle	typeref:typename:const auto &
flowmap_gradient_t	include/tatooine/ftle.h	/^  using flowmap_gradient_t =$/;"	t	struct:tatooine::ftle
for_each	include/tatooine/utility.h	/^constexpr void for_each(F&& f, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:void
for_each	include/tatooine/utility.h	/^void for_each(F&& f, T&& t) {$/;"	f	namespace:tatooine	typeref:typename:void
for_each	include/tatooine/utility.h	/^void for_each(F&& f, T&& t, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:void
for_indices	include/tatooine/tensor.h	/^  static constexpr auto for_indices(F&& f) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
for_loop	include/tatooine/for_loop.h	/^constexpr auto for_loop(Iteration&& iteration,$/;"	f	namespace:tatooine::detail	typeref:typename:auto
for_loop	include/tatooine/for_loop.h	/^constexpr void for_loop(Iteration&& iteration, Ends&&... ends) {$/;"	f	namespace:tatooine	typeref:typename:void
for_loop_impl	include/tatooine/for_loop.h	/^struct for_loop_impl {$/;"	s	namespace:tatooine::detail
for_loop_impl	include/tatooine/for_loop.h	/^struct for_loop_impl<Int, N, 1, 1> {$/;"	s	namespace:tatooine::detail
for_loop_impl	include/tatooine/for_loop.h	/^struct for_loop_impl<Int, N, 1, ParallelIndex> {$/;"	s	namespace:tatooine::detail
for_loop_impl	include/tatooine/for_loop.h	/^struct for_loop_impl<Int, N, I, I> {$/;"	s	namespace:tatooine::detail
forced_duffing_oscillator	include/tatooine/duffing_oscillator.h	/^  constexpr forced_duffing_oscillator(Real eps = 0.25) noexcept : m_eps{eps} {}$/;"	f	struct:tatooine::numerical::forced_duffing_oscillator
forced_duffing_oscillator	include/tatooine/duffing_oscillator.h	/^struct forced_duffing_oscillator : field<forced_duffing_oscillator<Real>, Real, 2, 2> {$/;"	s	namespace:tatooine::numerical
format_to_str	include/tatooine/vtk_legacy.h	/^inline std::string format_to_str(Format format) {$/;"	f	namespace:tatooine::vtk	typeref:typename:std::string
forward	include/tatooine/line.h	/^static constexpr forward_t forward;$/;"	v	namespace:tatooine	typeref:typename:forward_t
forward_t	include/tatooine/line.h	/^struct forward_t {};$/;"	s	namespace:tatooine
frag_last_write	include/tatooine/gpu/line_shader.h.in	/^  const std::filesystem::file_time_type frag_last_write;$/;"	m	struct:tatooine::gpu::line_shader	typeref:typename:const std::filesystem::file_time_type	file:
frag_shader_path	include/tatooine/gpu/line_shader.h.in	/^  static constexpr std::string_view frag_shader_path =$/;"	m	struct:tatooine::gpu::line_shader	typeref:typename:std::string_view	file:
free_neighbors	include/tatooine/grid.h	/^  auto free_neighbors(const vertex_t& v, const edge_seq_t& seq) {$/;"	f	class:tatooine::grid	typeref:typename:auto
free_neighbors	include/tatooine/grid.h	/^  auto free_neighbors(const vertex_t& v, const vertex_seq_t& seq) {$/;"	f	class:tatooine::grid	typeref:typename:auto
frobenius	include/tatooine/tensor.h	/^static constexpr frobenius_t frobenius;$/;"	v	namespace:tatooine	typeref:typename:frobenius_t
frobenius_t	include/tatooine/tensor.h	/^struct frobenius_t {};$/;"	s	namespace:tatooine
from_iterators	include/tatooine/interpolation.h	/^  static constexpr Real from_iterators(Iterator A, Iterator B, Iterator begin,$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:Real
from_iterators	include/tatooine/interpolation.h	/^  static constexpr Real from_iterators(Iterator A, Iterator B, Real t) {$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:Real
from_iterators	include/tatooine/interpolation.h	/^  static constexpr Real from_iterators(Iterator A, Iterator B, Real t, Real x,$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:Real
front	include/tatooine/grid.h	/^  constexpr auto front(size_t i) const { return dimension(i).front(); }$/;"	f	class:tatooine::grid	typeref:typename:auto
front	include/tatooine/line.h	/^  auto&       front() { return m_line.at(Handle{0}, m_prefer_calc); }$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:auto &
front	include/tatooine/line.h	/^  const auto& front() const { return m_line.at(Handle{0}, m_prefer_calc); }$/;"	f	struct:tatooine::const_line_vertex_container	typeref:typename:const auto &
front	include/tatooine/line.h	/^  const auto& front() const { return m_line.at(Handle{0}, m_prefer_calc); }$/;"	f	struct:tatooine::line_vertex_container	typeref:typename:const auto &
front	include/tatooine/line.h	/^  std::pair<const pos_t&, const Real&> front() const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:std::pair<const pos_t &,const Real &>
front	include/tatooine/line.h	/^  std::pair<pos_t&, Real&> front() {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:std::pair<pos_t &,Real &>
front	include/tatooine/linspace.h	/^  constexpr auto front() const { return m_min; }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
front	include/tatooine/property.h	/^  auto&       front() { return m_data.front(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto &
front	include/tatooine/property.h	/^  auto&       front() { return m_data.front(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto &
front	include/tatooine/property.h	/^  const auto& front() const { return m_data.front(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:const auto &
front	include/tatooine/property.h	/^  const auto& front() const { return m_data.front(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:const auto &
front	include/tatooine/template_helper.h	/^using front = typename front_t<Ts...>::type;$/;"	t	namespace:tatooine::template_helper	typeref:typename:front_t<Ts...>::type
front	include/tatooine/variadic_helpers.h	/^struct front {$/;"	s	namespace:tatooine
front_evolving_streamsurface_discretization	include/tatooine/streamsurface.h	/^  front_evolving_streamsurface_discretization(const this_t& other)$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization
front_evolving_streamsurface_discretization	include/tatooine/streamsurface.h	/^  front_evolving_streamsurface_discretization(ssf_t* _ssf)$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization
front_evolving_streamsurface_discretization	include/tatooine/streamsurface.h	/^  front_evolving_streamsurface_discretization(this_t&& other) noexcept$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization
front_evolving_streamsurface_discretization	include/tatooine/streamsurface.h	/^struct front_evolving_streamsurface_discretization$/;"	s	namespace:tatooine
front_param	include/tatooine/functional.h	/^decltype(auto) front_param(T&& head, Ts&&... \/*tail*\/) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
front_parameterization	include/tatooine/line.h	/^  auto&       front_parameterization() { return m_parameterization->front(); }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
front_parameterization	include/tatooine/line.h	/^  const auto& front_parameterization() const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:const auto &
front_t	include/tatooine/streamsurface.h	/^  using front_t          = typename parent_t::front_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::front_t
front_t	include/tatooine/streamsurface.h	/^  using front_t = std::list<subfront_t>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:std::list<subfront_t>
front_t	include/tatooine/template_helper.h	/^struct front_t {$/;"	s	namespace:tatooine::template_helper
front_t	include/tatooine/variadic_helpers.h	/^using front_t = typename front<Ts...>::type;$/;"	t	namespace:tatooine	typeref:typename:front<Ts...>::type
front_tangent	include/tatooine/line.h	/^  auto front_tangent(bool prefer_calc = false) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
front_tangent	include/tatooine/line.h	/^  auto front_tangent(bool prefer_calc = false) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
front_vertex	include/tatooine/grid.h	/^  auto front_vertex() { return front_vertex(std::make_index_sequence<N>()); }$/;"	f	class:tatooine::grid	typeref:typename:auto
front_vertex	include/tatooine/grid.h	/^  auto front_vertex(std::index_sequence<Is...> \/*is*\/) {$/;"	f	class:tatooine::grid	typeref:typename:auto
front_vertex	include/tatooine/line.h	/^  auto&       front_vertex() { return m_vertices.front(); }$/;"	f	struct:tatooine::line	typeref:typename:auto &
front_vertex	include/tatooine/line.h	/^  const auto& front_vertex() const { return m_vertices.front(); }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
ftau	include/tatooine/gpu/pathline_render_window.h	/^  double                            btau, ftau;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:double
ftle	include/tatooine/ftle.h	/^   ftle(const field<V, FieldReal, N, N>& v, const integrator_t& integrator,$/;"	f	struct:tatooine::ftle
ftle	include/tatooine/ftle.h	/^struct ftle$/;"	s	namespace:tatooine
g	include/tatooine/grid.h	/^  const grid* g;$/;"	m	struct:tatooine::grid::vertex_container	typeref:typename:const grid *
general_alpha	include/tatooine/gpu/pathline_render_window.h	/^  float                             general_alpha;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
geom_last_write	include/tatooine/gpu/line_shader.h.in	/^  const std::filesystem::file_time_type geom_last_write;$/;"	m	struct:tatooine::gpu::line_shader	typeref:typename:const std::filesystem::file_time_type	file:
geom_shader_path	include/tatooine/gpu/line_shader.h.in	/^  static constexpr std::string_view geom_shader_path =$/;"	m	struct:tatooine::gpu::line_shader	typeref:typename:std::string_view	file:
geometry	include/tatooine/geometry/circle.h	/^namespace tatooine::geometry {$/;"	n	namespace:tatooine
geometry	include/tatooine/geometry/primitive.h	/^namespace tatooine::geometry {$/;"	n	namespace:tatooine
gesv	include/tatooine/tensor.h	/^auto gesv(const tensor<double, M, M>& A, const tensor<double, M, N>& B) {$/;"	f	namespace:tatooine	typeref:typename:auto
gesv	include/tatooine/tensor.h	/^auto gesv(const tensor<float, M, M>& A, const tensor<float, M, N>& B) {$/;"	f	namespace:tatooine	typeref:typename:auto
gesv	include/tatooine/tensor.h	/^auto gesv(tensor<double, N, N> A, tensor<double, N> b) {$/;"	f	namespace:tatooine	typeref:typename:auto
gesv	include/tatooine/tensor.h	/^auto gesv(tensor<float, N, N> A, tensor<float, N> b) {$/;"	f	namespace:tatooine	typeref:typename:auto
get	include/tatooine/gpu/reduce.h.in	/^  static reduce_buffer_shader& get(unsigned int workgroup_size) {$/;"	f	struct:tatooine::gpu::reduce_buffer_shader	typeref:typename:reduce_buffer_shader &	file:
get	include/tatooine/gpu/reduce.h.in	/^  static reduce_tex_shader& get(unsigned int workgroup_size_x,$/;"	f	struct:tatooine::gpu::reduce_tex_shader	typeref:typename:reduce_tex_shader &	file:
get	include/tatooine/holder.h	/^  auto&       get() { return m_held_object; }$/;"	f	struct:tatooine::holder	typeref:typename:auto &
get	include/tatooine/holder.h	/^  const auto& get() const { return m_held_object; }$/;"	f	struct:tatooine::holder	typeref:typename:const auto &
get	include/tatooine/random.h	/^  auto get() { return distribution(engine); }$/;"	f	struct:tatooine::random_normal	typeref:typename:auto
get	include/tatooine/random.h	/^  auto get() { return distribution(engine); }$/;"	f	struct:tatooine::random_uniform	typeref:typename:auto
get	include/tatooine/template_helper.h	/^using get = typename get_t<i, Ts...>::type;$/;"	t	namespace:tatooine::template_helper	typeref:typename:get_t<i,Ts...>::type
get_t	include/tatooine/template_helper.h	/^struct get_t<0, T, Ts...> {$/;"	s	namespace:tatooine::template_helper
get_t	include/tatooine/template_helper.h	/^struct get_t<i, T, Ts...> {$/;"	s	namespace:tatooine::template_helper
getval	include/tatooine/template_helper.h	/^constexpr T getval(const unsigned int \/*i*\/) {$/;"	f	namespace:tatooine::template_helper	typeref:typename:T
getval	include/tatooine/template_helper.h	/^constexpr T getval(const unsigned int i, T0&& t0, Ts&&... ts) {$/;"	f	namespace:tatooine::template_helper	typeref:typename:T
getval_impl	include/tatooine/template_helper.h	/^struct getval_impl<0, T, V0, Vs...> {$/;"	s	namespace:tatooine::template_helper
getval_impl	include/tatooine/template_helper.h	/^struct getval_impl<i, T,V0, Vs...> {$/;"	s	namespace:tatooine::template_helper
getval_v	include/tatooine/template_helper.h	/^static constexpr auto getval_v = getval_impl<i, T, Vs...>::value;$/;"	v	namespace:tatooine::template_helper	typeref:typename:auto
global_index	include/tatooine/grid_sampler.h	/^  auto global_index(const std::array<size_t, N>& is) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
global_index	include/tatooine/grid_vertex.h	/^  constexpr auto global_index() const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
glsl_version	include/tatooine/gpu/reduce.h.in	/^  static constexpr std::string_view glsl_version = "#version 430\\n";$/;"	m	struct:tatooine::gpu::reduce_buffer_shader	typeref:typename:std::string_view	file:
glsl_version	include/tatooine/gpu/reduce.h.in	/^  static constexpr std::string_view glsl_version = "#version 430\\n";$/;"	m	struct:tatooine::gpu::reduce_tex_shader	typeref:typename:std::string_view	file:
gpu	include/tatooine/gpu/lic.h.in	/^namespace tatooine::gpu {$/;"	n	namespace:tatooine	file:
gpu	include/tatooine/gpu/line_renderer.h	/^namespace tatooine::gpu {$/;"	n	namespace:tatooine
gpu	include/tatooine/gpu/line_shader.h.in	/^namespace tatooine::gpu {$/;"	n	namespace:tatooine	file:
gpu	include/tatooine/gpu/pathline_render_window.h	/^namespace tatooine::gpu {$/;"	n	namespace:tatooine
gpu	include/tatooine/gpu/reduce.h.in	/^namespace tatooine::gpu {$/;"	n	namespace:tatooine	file:
gpu	include/tatooine/gpu/upload.h	/^namespace tatooine::gpu {$/;"	n	namespace:tatooine
gpu_line_data_t	include/tatooine/render_topological_skeleton.h	/^  using gpu_line_data_t  = indexeddata<yavin::vec2>;$/;"	t	function:tatooine::render_topological_skeleton	typeref:typename:indexeddata<yavin::vec2>
gpu_point_data_t	include/tatooine/render_topological_skeleton.h	/^  using gpu_point_data_t = indexeddata<yavin::vec2, yavin::vec3>;$/;"	t	function:tatooine::render_topological_skeleton	typeref:typename:indexeddata<yavin::vec2,yavin::vec3>
gpu_t	include/tatooine/gpu/line_renderer.h	/^  using gpu_t = yavin::indexeddata<yavin::vec<float, N>,$/;"	t	function:tatooine::gpu::upload	typeref:typename:yavin::indexeddata<yavin::vec<float,N>,yavin::vec<float,N>,yavin::Scalar<float>>
grad_alpha	include/tatooine/curve_to_streamline.h	/^  std::vector<vec2>  grad_alpha;$/;"	m	struct:tatooine::curve_to_streamline	typeref:typename:std::vector<vec2>
grid	include/tatooine/cavity.h	/^  grid_t grid;$/;"	m	struct:tatooine::cavity	typeref:typename:grid_t
grid	include/tatooine/grid.h	/^  constexpr grid() : m_dimensions{make_array<linspace_t, N>()} {}$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^  constexpr grid(const boundingbox<OtherReal, N>& bb,$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^  constexpr grid(const grid& other) : m_dimensions{other.m_dimensions} {}$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^  constexpr grid(const grid<OtherReal, N>& other)$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^  constexpr grid(const grid<OtherReal, N>& other,$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^  constexpr grid(const linspace<Reals>&... linspaces)$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^  constexpr grid(grid&& other) noexcept$/;"	f	class:tatooine::grid
grid	include/tatooine/grid.h	/^class grid {$/;"	c	namespace:tatooine
grid_edge	include/tatooine/grid_edge.h	/^  grid_edge(const grid_edge& e) : parent_t(e) {}$/;"	f	struct:tatooine::grid_edge
grid_edge	include/tatooine/grid_edge.h	/^  grid_edge(const vertex_t& v0, const vertex_t& v1)$/;"	f	struct:tatooine::grid_edge
grid_edge	include/tatooine/grid_edge.h	/^  grid_edge(grid_edge&& e) : parent_t(std::move(e)) {}$/;"	f	struct:tatooine::grid_edge
grid_edge	include/tatooine/grid_edge.h	/^struct grid_edge$/;"	s	namespace:tatooine
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler() : grid_sampler{std::make_index_sequence<N>{}} {}$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const grid<Real, N>& domain)$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const grid<Real, N>& domain, std::index_sequence<Is...> \/*is*\/)$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const grid_sampler& other)$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const linspace<real_ts>&... linspaces)$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const std::array<size_t, N>& resolution)$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const std::array<size_t, N>& resolution,$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const std::string& filename) : grid_sampler{} { read(filename); }$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const std::vector<Real>&     data,$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(const std::vector<Real>& data,$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(grid_sampler&& other) noexcept$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^  grid_sampler(std::index_sequence<Is...> \/*is*\/)$/;"	f	struct:tatooine::grid_sampler
grid_sampler	include/tatooine/grid_sampler.h	/^struct grid_sampler$/;"	s	namespace:tatooine
grid_sampler_iterator	include/tatooine/grid_sampler.h	/^struct grid_sampler_iterator {$/;"	s	namespace:tatooine
grid_sampler_view	include/tatooine/grid_sampler.h	/^  grid_sampler_view(top_grid_t* _top_grid, size_t _fixed_index)$/;"	f	struct:tatooine::grid_sampler_view
grid_sampler_view	include/tatooine/grid_sampler.h	/^  grid_sampler_view(top_grid_t* _top_grid, size_t _fixed_index,$/;"	f	struct:tatooine::grid_sampler_view
grid_sampler_view	include/tatooine/grid_sampler.h	/^struct grid_sampler_view$/;"	s	namespace:tatooine
grid_t	include/tatooine/cavity.h	/^  using grid_t = grid_sampler<$/;"	t	struct:tatooine::cavity	typeref:typename:grid_sampler<real_t,3,vec<real_t,2>,interpolation::hermite,interpolation::hermite,interpolation::linear>
grid_t	include/tatooine/grid_vertex.h	/^  using grid_t          = grid<Real, N>;$/;"	t	struct:tatooine::grid_vertex	typeref:typename:grid<Real,N>
grid_t	include/tatooine/rbc.h	/^  using grid_t = grid_sampler<real_t, 2, vec<real_t, 2>, interpolation::linear,$/;"	t	struct:tatooine::rbc	typeref:typename:grid_sampler<real_t,2,vec<real_t,2>,interpolation::linear,interpolation::linear>
grid_vertex	include/tatooine/grid_vertex.h	/^  grid_vertex(const grid_t& g, Is... is)$/;"	f	struct:tatooine::grid_vertex
grid_vertex	include/tatooine/grid_vertex.h	/^  grid_vertex(const grid_t& g, std::index_sequence<Js...>, Is... is)$/;"	f	struct:tatooine::grid_vertex
grid_vertex	include/tatooine/grid_vertex.h	/^  grid_vertex(const grid_vertex& other) : iterators{other.iterators} {}$/;"	f	struct:tatooine::grid_vertex
grid_vertex	include/tatooine/grid_vertex.h	/^  grid_vertex(grid_vertex&& other) : iterators{std::move(other.iterators)} {}$/;"	f	struct:tatooine::grid_vertex
grid_vertex	include/tatooine/grid_vertex.h	/^  grid_vertex(linspace_iter_t head_it, const Its&... tail_it)$/;"	f	struct:tatooine::grid_vertex
grid_vertex	include/tatooine/grid_vertex.h	/^struct grid_vertex {$/;"	s	namespace:tatooine
grid_vertex_edges	include/tatooine/grid_vertex_edges.h	/^  grid_vertex_edges(const grid_vertex<Real, N>& center)$/;"	f	struct:tatooine::grid_vertex_edges
grid_vertex_edges	include/tatooine/grid_vertex_edges.h	/^struct grid_vertex_edges : grid_vertex_neighbors<Real, N> {$/;"	s	namespace:tatooine
grid_vertex_iterator	include/tatooine/grid_vertex.h	/^struct grid_vertex_iterator {$/;"	s	namespace:tatooine
grid_vertex_neighbors	include/tatooine/grid_vertex_neighbors.h	/^  grid_vertex_neighbors(const grid_vertex<Real, N>& c)$/;"	f	struct:tatooine::grid_vertex_neighbors
grid_vertex_neighbors	include/tatooine/grid_vertex_neighbors.h	/^struct grid_vertex_neighbors : subgrid<Real, N> {$/;"	s	namespace:tatooine
grids	include/tatooine/rbc.h	/^  std::vector<grid_t> grids;$/;"	m	struct:tatooine::rbc	typeref:typename:std::vector<grid_t>
group	include/tatooine/hdf5.h	/^  auto group(const char* group_name) const {$/;"	f	struct:tatooine::h5::ifile	typeref:typename:auto
group	include/tatooine/hdf5.h	/^  auto group(const std::string& group_name) const {$/;"	f	struct:tatooine::h5::ifile	typeref:typename:auto
group	include/tatooine/hdf5.h	/^  auto group(const std::string_view& group_name) const {$/;"	f	struct:tatooine::h5::ifile	typeref:typename:auto
group	include/tatooine/hdf5.h	/^  group(const std::shared_ptr<H5::H5File>& p_file, const char* p_group_name)$/;"	f	struct:tatooine::h5::group
group	include/tatooine/hdf5.h	/^  group(const std::shared_ptr<H5::H5File>& p_file,$/;"	f	struct:tatooine::h5::group
group	include/tatooine/hdf5.h	/^struct group {$/;"	s	namespace:tatooine::h5
groups_it_t	include/tatooine/mesh.h	/^    using groups_it_t = typename groups_t::iterator;$/;"	t	function:tatooine::mesh::adjacent_faces	typeref:typename:groups_t::iterator
groups_t	include/tatooine/mesh.h	/^    using groups_t    = std::list<std::vector<face>>;$/;"	t	function:tatooine::mesh::adjacent_faces	typeref:typename:std::list<std::vector<face>>
h5	include/tatooine/hdf5.h	/^namespace tatooine::h5 {$/;"	n	namespace:tatooine
handle	include/tatooine/handle.h	/^  handle() : i{invalid_idx} {}$/;"	f	struct:tatooine::handle
handle	include/tatooine/handle.h	/^  handle(std::size_t _i) : i{_i} {}$/;"	f	struct:tatooine::handle
handle	include/tatooine/handle.h	/^struct handle {$/;"	s	namespace:tatooine
has_cxx11_support	include/tatooine/cxxstd.h	/^  #define has_cxx11_support(/;"	d
has_cxx14_support	include/tatooine/cxxstd.h	/^  #define has_cxx14_support(/;"	d
has_cxx17_support	include/tatooine/cxxstd.h	/^  #define has_cxx17_support(/;"	d
has_cxx20_support	include/tatooine/cxxstd.h	/^  #define has_cxx20_support(/;"	d
has_cxx98_support	include/tatooine/cxxstd.h	/^  #define has_cxx98_support(/;"	d
has_vertex	include/tatooine/mesh.h	/^  constexpr bool has_vertex(face f, vertex v) const {$/;"	f	class:tatooine::mesh	typeref:typename:bool
has_vertex_property	include/tatooine/line.h	/^  bool has_vertex_property(const std::string& name) const {$/;"	f	struct:tatooine::line	typeref:typename:bool
heap	include/tatooine/multidim_array.h	/^struct heap {};$/;"	s	namespace:tatooine
held_type	include/tatooine/holder.h	/^  using held_type = T;$/;"	t	struct:tatooine::holder	typeref:typename:T
helicity	include/tatooine/helicity_field.h	/^auto helicity(const field<V, Real, 3, 3>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
helicity_field	include/tatooine/helicity_field.h	/^  helicity_field(const field<V, Real, 3, 3>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::helicity_field
helicity_field	include/tatooine/helicity_field.h	/^class helicity_field$/;"	c	namespace:tatooine
hermite	include/tatooine/interpolation.h	/^  constexpr hermite(const Real& fx0, const Real& fx1, const Real& fx0dx,$/;"	f	struct:tatooine::interpolation::hermite
hermite	include/tatooine/interpolation.h	/^struct hermite {$/;"	s	namespace:tatooine::interpolation
hilbert_curve	include/tatooine/index_ordering.h	/^struct hilbert_curve {$/;"	s	namespace:tatooine
hold	include/tatooine/holder.h	/^auto hold(T&& t) {$/;"	f	namespace:tatooine	typeref:typename:auto
holder	include/tatooine/holder.h	/^  holder(_T&& obj) : m_held_object{std::forward<_T>(obj)} {}$/;"	f	struct:tatooine::holder
holder	include/tatooine/holder.h	/^struct holder : base_holder {$/;"	s	namespace:tatooine
hultquist_discretization	include/tatooine/streamsurface.h	/^  hultquist_discretization(ssf_t* ssf, size_t seedline_resolution,$/;"	f	struct:tatooine::hultquist_discretization
hultquist_discretization	include/tatooine/streamsurface.h	/^struct hultquist_discretization : front_evolving_streamsurface_discretization<$/;"	s	namespace:tatooine
i	include/tatooine/chunked_data.h	/^    size_t i = 0;$/;"	m	struct:tatooine::chunked_data	typeref:typename:size_t
i	include/tatooine/grid_vertex_neighbors.h	/^    for (size_t i = 0; i < N; ++i) {$/;"	m	struct:tatooine::grid_vertex_neighbors	typeref:typename:size_t
i	include/tatooine/handle.h	/^  std::size_t i;$/;"	m	struct:tatooine::handle	typeref:typename:std::size_t
i	include/tatooine/linspace.h	/^  auto i() const { return m_i; }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:auto
ifile	include/tatooine/hdf5.h	/^  ifile(const char* p_filepath)$/;"	f	struct:tatooine::h5::ifile
ifile	include/tatooine/hdf5.h	/^  ifile(const std::string& p_filepath) : ifile{p_filepath.data()} {}$/;"	f	struct:tatooine::h5::ifile
ifile	include/tatooine/hdf5.h	/^  ifile(const std::string_view& p_filepath) : ifile{p_filepath.data()} {}$/;"	f	struct:tatooine::h5::ifile
ifile	include/tatooine/hdf5.h	/^struct ifile {$/;"	s	namespace:tatooine::h5
imag	include/tatooine/tensor.h	/^auto imag(base_tensor<Tensor, std::complex<Real>, Dims...>& tensor) {$/;"	f	namespace:tatooine	typeref:typename:auto
imag	include/tatooine/tensor.h	/^auto imag(const base_tensor<Tensor, std::complex<Real>, Dims...>& tensor) {$/;"	f	namespace:tatooine	typeref:typename:auto
imag_complex_tensor	include/tatooine/tensor.h	/^  constexpr imag_complex_tensor($/;"	f	struct:tatooine::imag_complex_tensor
imag_complex_tensor	include/tatooine/tensor.h	/^struct imag_complex_tensor$/;"	s	namespace:tatooine
in_domain	include/tatooine/abcflow.h	/^  constexpr auto in_domain(const pos_t& \/*x*\/, real_t \/*t*\/) const {$/;"	f	struct:tatooine::numerical::abcflow	typeref:typename:auto
in_domain	include/tatooine/boussinesq.h	/^  bool in_domain(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::boussinesq	typeref:typename:bool
in_domain	include/tatooine/cavity.h	/^  bool in_domain(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::cavity	typeref:typename:bool
in_domain	include/tatooine/constant_vectorfield.h	/^  constexpr bool in_domain(const pos_t& \/*x*\/, Real \/*t*\/) const {$/;"	f	struct:tatooine::constant_vectorfield	typeref:typename:bool
in_domain	include/tatooine/counterexample_sadlo.h	/^  constexpr bool in_domain(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:bool
in_domain	include/tatooine/counterexample_sadlo.h	/^  constexpr bool in_domain(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::symbolic::counterexample_sadlo	typeref:typename:bool
in_domain	include/tatooine/curvature_field.h	/^  constexpr bool in_domain(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::curvature_field	typeref:typename:bool
in_domain	include/tatooine/diff.h	/^  constexpr decltype(auto) in_domain(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::derived_field	typeref:typename:decltype (auto)
in_domain	include/tatooine/doublegyre.h	/^  constexpr bool in_domain(const pos_t& x, Real) const {$/;"	f	struct:tatooine::numerical::doublegyre	typeref:typename:bool
in_domain	include/tatooine/doublegyre.h	/^  constexpr bool in_domain(const pos_t& x, Real) const {$/;"	f	struct:tatooine::symbolic::doublegyre	typeref:typename:bool
in_domain	include/tatooine/duffing_oscillator.h	/^  constexpr bool in_domain(const pos_t& x, Real) const {$/;"	f	struct:tatooine::numerical::duffing_oscillator	typeref:typename:bool
in_domain	include/tatooine/duffing_oscillator.h	/^  constexpr bool in_domain(const pos_t& x, Real) const {$/;"	f	struct:tatooine::numerical::forced_duffing_oscillator	typeref:typename:bool
in_domain	include/tatooine/field.h	/^  bool in_domain(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::binary_operation_field	typeref:typename:bool
in_domain	include/tatooine/field.h	/^  bool in_domain(const pos_t& x, Real t) const {$/;"	f	struct:tatooine::unary_operation_field	typeref:typename:bool
in_domain	include/tatooine/fixed_time_field.h	/^  constexpr decltype(auto) in_domain(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::fixed_time_field	typeref:typename:decltype (auto)
in_domain	include/tatooine/flowmap.h	/^  constexpr decltype(auto) in_domain(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::flowmap	typeref:typename:decltype (auto)
in_domain	include/tatooine/ftle.h	/^   constexpr bool in_domain(const pos_t& x, real_t t) const {$/;"	f	struct:tatooine::ftle	typeref:typename:bool
in_domain	include/tatooine/grid.h	/^  constexpr auto in_domain(Reals... xs) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
in_domain	include/tatooine/grid.h	/^  constexpr auto in_domain(const std::array<Real, N>& x) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
in_domain	include/tatooine/grid.h	/^  constexpr auto in_domain(const std::array<Real, N>& x,$/;"	f	class:tatooine::grid	typeref:typename:auto
in_domain	include/tatooine/grid.h	/^  constexpr auto in_domain(std::index_sequence<Is...> \/*is*\/,$/;"	f	class:tatooine::grid	typeref:typename:auto
in_domain	include/tatooine/helicity_field.h	/^  constexpr bool in_domain(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::helicity_field	typeref:typename:bool
in_domain	include/tatooine/lambda2_field.h	/^  constexpr bool in_domain(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::lambda2_field	typeref:typename:bool
in_domain	include/tatooine/modified_doublegyre.h	/^  constexpr bool in_domain(const pos_t& x, Real) const {$/;"	f	struct:tatooine::numerical::modified_doublegyre	typeref:typename:bool
in_domain	include/tatooine/modified_doublegyre.h	/^  constexpr bool in_domain(const pos_t& x, Real) const {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:bool
in_domain	include/tatooine/okubo_weiss_field.h	/^  constexpr bool in_domain(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::okubo_weiss_field	typeref:typename:bool
in_domain	include/tatooine/rbc.h	/^  bool in_domain(const pos_t& p, real_t t) const {$/;"	f	struct:tatooine::rbc	typeref:typename:bool
in_domain	include/tatooine/sinuscosinus.h	/^  constexpr auto in_domain(const pos_t& \/*x*\/, Real \/*t*\/) const {$/;"	f	struct:tatooine::numerical::sinuscosinus	typeref:typename:auto
in_domain	include/tatooine/sinuscosinus.h	/^  constexpr bool in_domain(const pos_t& \/*x*\/, Real \/*t*\/) const {$/;"	f	struct:tatooine::numerical::cosinussinus	typeref:typename:bool
in_domain	include/tatooine/spacetime_field.h	/^  constexpr decltype(auto) in_domain(const pos_t& x, Real \/*t*\/) const {$/;"	f	struct:tatooine::spacetime_field	typeref:typename:decltype (auto)
in_domain	include/tatooine/symbolic_field.h	/^  constexpr bool in_domain(const pos_t&, double) const { return true; }$/;"	f	struct:tatooine::symbolic::field	typeref:typename:bool
in_domain	include/tatooine/vorticity_field.h	/^  constexpr bool in_domain(const pos_t& x, real_t t) const {$/;"	f	class:tatooine::vorticity_field	typeref:typename:bool
in_range	include/tatooine/multidim_resolution.h	/^  auto in_range(const std::vector<size_t>& is) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
in_range	include/tatooine/multidim_resolution.h	/^  constexpr auto in_range(Is... is) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
in_range	include/tatooine/multidim_resolution.h	/^  constexpr auto in_range(const std::array<size_t, N>& is) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
in_range	include/tatooine/multidim_resolution.h	/^  static constexpr auto in_range(const std::array<size_t, N>& is) {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
in_range	include/tatooine/multidim_resolution.h	/^  static constexpr auto in_range(const std::vector<size_t>& is) {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
in_range	include/tatooine/multidim_resolution.h	/^  static constexpr bool in_range(Is... is) {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:bool
increment	include/tatooine/edgeset.h	/^    void increment() {$/;"	f	struct:tatooine::edgeset::edge_iterator	typeref:typename:void
increment	include/tatooine/line.h	/^  void increment() { ++m_handle; }$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:void
increment	include/tatooine/line.h	/^  void increment() { ++m_handle; }$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:void
increment	include/tatooine/linspace.h	/^  void increment() { ++m_i; }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:void
increment	include/tatooine/mesh.h	/^    void increment() {$/;"	f	struct:tatooine::mesh::face_iterator	typeref:typename:void
increment	include/tatooine/pointset.h	/^    void increment() {$/;"	f	struct:tatooine::pointset::vertex_iterator	typeref:typename:void
increment	include/tatooine/simple_tri_mesh.h	/^    void increment() {$/;"	f	struct:tatooine::simple_tri_mesh::face_iterator	typeref:typename:void
indexing_t	include/tatooine/grid_sampler.h	/^  using indexing_t =$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:base_grid_sampler_at_t<Real,N,Data,this_t,TailInterpolators...>
indices	include/tatooine/grid_vertex.h	/^  constexpr auto indices() const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
indices	include/tatooine/grid_vertex.h	/^  constexpr auto indices(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
indices	include/tatooine/multidim_resolution.h	/^  constexpr auto indices() const { return dynamic_multidim{m_size}; }$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
indices	include/tatooine/multidim_resolution.h	/^  static constexpr auto indices() { return static_multidim{Resolution...}; }$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
indices	include/tatooine/tensor.h	/^  static constexpr auto indices() { return resolution_t::indices(); }$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
indices_t	include/tatooine/chunked_data.h	/^  using indices_t = std::make_index_sequence<N>;$/;"	t	struct:tatooine::chunked_data	typeref:typename:std::make_index_sequence<N>
init_data	include/tatooine/multidim_array.h	/^  static constexpr auto init_data(T init = T{}) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto
initial_step	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto initial_step  = VC::odeint::InitialStep;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
insert	include/tatooine/cache.h	/^  auto insert(Key&& key, Value&& value) {$/;"	f	class:tatooine::cache	typeref:typename:auto
insert	include/tatooine/cache.h	/^  auto insert(Key&& key, const Value& value) {$/;"	f	class:tatooine::cache	typeref:typename:auto
insert	include/tatooine/cache.h	/^  auto insert(const Key& key, Value&& value) {$/;"	f	class:tatooine::cache	typeref:typename:auto
insert	include/tatooine/cache.h	/^  auto insert(const Key& key, const Value& value) {$/;"	f	class:tatooine::cache	typeref:typename:auto
insert_edge	include/tatooine/edgeset.h	/^  auto insert_edge(size_t v0, size_t v1) {$/;"	f	class:tatooine::edgeset	typeref:typename:auto
insert_edge	include/tatooine/edgeset.h	/^  auto insert_edge(vertex v0, vertex v1) {$/;"	f	class:tatooine::edgeset	typeref:typename:auto
insert_edges	include/tatooine/mesh.h	/^  constexpr auto insert_edges(face f) {$/;"	f	class:tatooine::mesh	typeref:typename:auto
insert_face	include/tatooine/mesh.h	/^  constexpr auto insert_face(std::vector<vertex> new_face) {$/;"	f	class:tatooine::mesh	typeref:typename:auto
insert_face	include/tatooine/simple_tri_mesh.h	/^  auto insert_face(const std::array<vertex, 3>& f) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto
insert_face	include/tatooine/simple_tri_mesh.h	/^  auto insert_face(size_t v0, size_t v1, size_t v2) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto
insert_face	include/tatooine/simple_tri_mesh.h	/^  auto insert_face(vertex v0, vertex v1, vertex v2) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto
insert_row	include/tatooine/tensor.h	/^    auto insert_row = [r = 0UL, this](const auto& row) mutable {$/;"	m	struct:tatooine::mat	typeref:typename:auto
insert_vertex	include/tatooine/parameterized_mesh.h	/^  auto insert_vertex(const pos_t& point, const uv_t& uv) {$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto
insert_vertex	include/tatooine/pointset.h	/^  auto insert_vertex(Ts... ts) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto
insert_vertex	include/tatooine/pointset.h	/^  auto insert_vertex(const pos_t& v) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto
insert_vertex	include/tatooine/pointset.h	/^  auto insert_vertex(pos_t&& v) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto
insert_vertex	include/tatooine/streamsurface.h	/^  auto insert_vertex( const pos_t& p, uv_t&& p_uv) {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
insert_vertex	include/tatooine/streamsurface.h	/^  auto insert_vertex( pos_t&& p, const uv_t& p_uv) {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
insert_vertex	include/tatooine/streamsurface.h	/^  auto insert_vertex( pos_t&& p, uv_t&& p_uv) {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
insert_vertex	include/tatooine/streamsurface.h	/^  auto insert_vertex(const pos_t& p, const uv_t& p_uv) {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
integral_t	include/tatooine/integration/boost/boostintegrator.h	/^  using integral_t = typename parent_t::integral_t;$/;"	t	struct:tatooine::integration::boost::integrator	typeref:typename:parent_t::integral_t
integral_t	include/tatooine/integration/integrator.h	/^  using integral_t = parameterized_line<Real, N, InterpolationKernel>;$/;"	t	struct:tatooine::integration::integrator	typeref:typename:parameterized_line<Real,N,InterpolationKernel>
integral_t	include/tatooine/integration/vclibs/rungekutta43.h	/^  using integral_t = typename parent_t::integral_t;$/;"	t	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:parent_t::integral_t
integral_t	include/tatooine/topological_skeleton.h	/^  using integral_t = typename Integrator::integral_t;$/;"	t	function:tatooine::compute_topological_skeleton	typeref:typename:Integrator::integral_t
integralcurve_t	include/tatooine/streamsurface.h	/^  using integralcurve_t =$/;"	t	struct:tatooine::streamsurface	typeref:typename:parameterized_line<Real,N,IntegralcurveInterpolator>
integrate	include/tatooine/integration/integrator.h	/^  const auto &integrate(const V &v, const pos_t &y0, Real t0, Real backward_tau,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:const auto &
integrate	include/tatooine/integration/integrator.h	/^  const auto &integrate(const V &v, const pos_t &y0, Real t0, Real tau) const {$/;"	f	struct:tatooine::integration::integrator	typeref:typename:const auto &
integrate	include/tatooine/streamsurface.h	/^  auto integrate(const front_t& front, Real step, Real backward_tau,$/;"	f	struct:tatooine::hultquist_discretization	typeref:typename:auto
integrate	include/tatooine/streamsurface.h	/^  auto integrate(const front_t& old_front, Real step, Real backward_tau,$/;"	f	struct:tatooine::simple_discretization	typeref:typename:auto
integrate	include/tatooine/streamsurface.h	/^  auto integrate(const subfront_t& subfront, Real step, Real backward_tau,$/;"	f	struct:tatooine::hultquist_discretization	typeref:typename:auto
integrate_curvature	include/tatooine/line.h	/^  [[nodiscard]] auto integrate_curvature() const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:[[nodiscard]]auto
integrate_curvature	include/tatooine/line.h	/^  [[nodiscard]] auto integrate_curvature(const linspace<Real>& ts) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:[[nodiscard]]auto
integrate_property	include/tatooine/line.h	/^  [[nodiscard]] auto integrate_property(const vertex_property_t<Real>& prop) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:[[nodiscard]]auto
integrate_uncached	include/tatooine/integration/integrator.h	/^  auto integrate_uncached(const V &v, const pos_t &y0, Real t0, Real tau,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto
integrate_uncached	include/tatooine/integration/integrator.h	/^  auto integrate_uncached(const V &v, const pos_t &y0, Real t0,$/;"	f	struct:tatooine::integration::integrator	typeref:typename:auto
integrated_t	include/tatooine/streamsurface.h	/^    struct integrated_t {$/;"	s	function:tatooine::hultquist_discretization::integrate
integration	include/tatooine/integration/boost/boostintegrator.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine
integration	include/tatooine/integration/boost/rungekutta4.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine
integration	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine
integration	include/tatooine/integration/boost/rungekuttadopri5.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine
integration	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^namespace tatooine::integration::boost {$/;"	n	namespace:tatooine
integration	include/tatooine/integration/integrator.h	/^namespace tatooine::integration {$/;"	n	namespace:tatooine
integration	include/tatooine/integration/vclibs/rungekutta43.h	/^namespace tatooine::integration::vclibs {$/;"	n	namespace:tatooine
integrator	include/tatooine/flowmap.h	/^  auto&       integrator() { return m_integrator; }$/;"	f	struct:tatooine::flowmap	typeref:typename:auto &
integrator	include/tatooine/flowmap.h	/^  const auto& integrator() const { return m_integrator; }$/;"	f	struct:tatooine::flowmap	typeref:typename:const auto &
integrator	include/tatooine/gpu/pathline_render_window.h	/^  integrator_t                      integrator;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:integrator_t
integrator	include/tatooine/integration/boost/boostintegrator.h	/^  integrator(Stepper &&stepper, const Real stepsize)$/;"	f	struct:tatooine::integration::boost::integrator
integrator	include/tatooine/integration/boost/boostintegrator.h	/^  integrator(const Stepper &stepper, const Real stepsize)$/;"	f	struct:tatooine::integration::boost::integrator
integrator	include/tatooine/integration/boost/boostintegrator.h	/^struct integrator$/;"	s	namespace:tatooine::integration::boost
integrator	include/tatooine/integration/integrator.h	/^struct integrator : crtp<Derived> {$/;"	s	namespace:tatooine::integration
integrator	include/tatooine/streamsurface.h	/^  auto&       integrator() { return m_integrator; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto &
integrator	include/tatooine/streamsurface.h	/^  const auto& integrator() const { return m_integrator; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:const auto &
integrator_t	include/tatooine/flowmap.h	/^  using integrator_t = Integrator<real_t, parent_t::num_dimensions()>;$/;"	t	struct:tatooine::flowmap
integrator_t	include/tatooine/ftle.h	/^  using integrator_t = Integrator<real_t, V::num_dimensions()>;$/;"	t	struct:tatooine::ftle
integrator_t	include/tatooine/gpu/pathline_render_window.h	/^  using integrator_t =$/;"	t	struct:tatooine::gpu::pathline_render_window	typeref:typename:integration::vclibs::rungekutta43<double,3,interpolation::linear>
integrator_t	include/tatooine/streamsurface.h	/^  using integrator_t = Integrator<Real, N, IntegralcurveInterpolator>;$/;"	t	struct:tatooine::streamsurface	typeref:typename:Integrator<Real,N,IntegralcurveInterpolator>
internal_data_t	include/tatooine/grid_sampler.h	/^  using internal_data_t                  = internal_data_type_t<Data>;$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:internal_data_type_t<Data>
internal_data_t	include/tatooine/grid_sampler.h	/^  using internal_data_t                  = typename parent_t::internal_data_t;$/;"	t	struct:tatooine::grid_sampler	typeref:typename:parent_t::internal_data_t
internal_data_type	include/tatooine/tensor.h	/^struct internal_data_type<vec<Real, N>> {$/;"	v	namespace:tatooine	typeref:struct:num_components template struct num_components template struct num_components template struct
internal_data_type	include/tatooine/utility.h	/^struct internal_data_type<double> {$/;"	s	namespace:tatooine
internal_data_type	include/tatooine/utility.h	/^struct internal_data_type<float> {$/;"	s	namespace:tatooine
internal_data_type_t	include/tatooine/utility.h	/^using internal_data_type_t = typename internal_data_type<T>::type;$/;"	t	namespace:tatooine	typeref:typename:internal_data_type<T>::type
internal_field	include/tatooine/diff.h	/^  auto&       internal_field() { return m_internal_field; }$/;"	f	struct:tatooine::derived_field	typeref:typename:auto &
internal_field	include/tatooine/diff.h	/^  const auto& internal_field() const { return m_internal_field; }$/;"	f	struct:tatooine::derived_field	typeref:typename:const auto &
internal_matrix	include/tatooine/tensor.h	/^  auto&       internal_matrix() { return m_internal_matrix; }$/;"	f	struct:tatooine::transposed_matrix	typeref:typename:auto &
internal_matrix	include/tatooine/tensor.h	/^  const auto& internal_matrix() const { return m_internal_matrix; }$/;"	f	struct:tatooine::const_transposed_matrix	typeref:typename:const auto &
internal_matrix	include/tatooine/tensor.h	/^  const auto& internal_matrix() const { return m_internal_matrix; }$/;"	f	struct:tatooine::transposed_matrix	typeref:typename:const auto &
internal_plain_index	include/tatooine/index_ordering.h	/^  static constexpr size_t internal_plain_index(ResIt res_it,$/;"	f	struct:tatooine::x_slowest	typeref:typename:size_t
internal_plain_index	include/tatooine/index_ordering.h	/^  static constexpr size_t internal_plain_index(const Resolution& resolution,$/;"	f	struct:tatooine::x_slowest	typeref:typename:size_t
internal_tensor	include/tatooine/tensor.h	/^  auto&       internal_tensor() { return m_internal_tensor; }$/;"	f	struct:tatooine::imag_complex_tensor	typeref:typename:auto &
internal_tensor	include/tatooine/tensor.h	/^  auto&       internal_tensor() { return m_internal_tensor; }$/;"	f	struct:tatooine::real_complex_tensor	typeref:typename:auto &
internal_tensor	include/tatooine/tensor.h	/^  const auto& internal_tensor() const { return m_internal_tensor; }$/;"	f	struct:tatooine::const_imag_complex_tensor	typeref:typename:const auto &
internal_tensor	include/tatooine/tensor.h	/^  const auto& internal_tensor() const { return m_internal_tensor; }$/;"	f	struct:tatooine::const_real_complex_tensor	typeref:typename:const auto &
internal_tensor	include/tatooine/tensor.h	/^  const auto& internal_tensor() const { return m_internal_tensor; }$/;"	f	struct:tatooine::imag_complex_tensor	typeref:typename:const auto &
internal_tensor	include/tatooine/tensor.h	/^  const auto& internal_tensor() const { return m_internal_tensor; }$/;"	f	struct:tatooine::real_complex_tensor	typeref:typename:const auto &
interpolate	include/tatooine/multidim_array.h	/^auto interpolate($/;"	f	namespace:tatooine	typeref:typename:auto
interpolate	include/tatooine/multidim_array.h	/^auto interpolate(const dynamic_multidim_array<T0, Indexing0>& arr0,$/;"	f	namespace:tatooine	typeref:typename:auto
interpolate_via_2_values	include/tatooine/interpolation.h	/^  constexpr static Real interpolate_via_2_values(Real a, Real b, Real t) {$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:Real
interpolate_via_4_values	include/tatooine/interpolation.h	/^  static constexpr Real interpolate_via_4_values(const Real& A, const Real& B,$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:Real
interpolation	include/tatooine/interpolation.h	/^namespace interpolation {$/;"	n	namespace:tatooine
interpolation_needs_first_derivative	include/tatooine/line.h	/^  static constexpr bool interpolation_needs_first_derivative =$/;"	m	struct:tatooine::parameterized_line	typeref:typename:bool
interpolation_t	include/tatooine/line.h	/^  using interpolation_t = InterpolationKernel<vec_t>;$/;"	t	struct:tatooine::parameterized_line	typeref:typename:InterpolationKernel<vec_t>
interpolator	include/tatooine/grid_sampler.h	/^    using interpolator = HeadInterpolator<Data>;$/;"	t	function:tatooine::base_grid_sampler::sample	typeref:typename:HeadInterpolator<Data>
interpolator_t	include/tatooine/parameterized_mesh.h	/^  using interpolator_t = Interpolator<Real>;$/;"	t	struct:tatooine::parameterized_mesh	typeref:typename:Interpolator<Real>
invalid	include/tatooine/edgeset.h	/^    static constexpr auto invalid() { return edge{handle::invalid_idx}; }$/;"	f	struct:tatooine::edgeset::edge	typeref:typename:auto
invalid	include/tatooine/line.h	/^    static constexpr auto invalid() { return tangent_idx{handle::invalid_idx}; }$/;"	f	struct:tatooine::line::tangent_idx	typeref:typename:auto
invalid	include/tatooine/line.h	/^    static constexpr auto invalid() { return vertex_idx{handle::invalid_idx}; }$/;"	f	struct:tatooine::line::vertex_idx	typeref:typename:auto
invalid	include/tatooine/mesh.h	/^    static constexpr auto invalid() { return face{handle::invalid_idx}; }$/;"	f	struct:tatooine::mesh::face	typeref:typename:auto
invalid	include/tatooine/pointset.h	/^    static constexpr auto invalid() { return vertex{handle::invalid_idx}; }$/;"	f	struct:tatooine::pointset::vertex	typeref:typename:auto
invalid	include/tatooine/simple_tri_mesh.h	/^    static constexpr auto invalid() { return face{handle::invalid_idx}; }$/;"	f	struct:tatooine::simple_tri_mesh::face	typeref:typename:auto
invalid_idx	include/tatooine/handle.h	/^  static constexpr std::size_t invalid_idx =$/;"	m	struct:tatooine::handle	typeref:typename:std::size_t
inverse	include/tatooine/tensor.h	/^auto inverse(const base_tensor<Tensor, GiNaC::ex, M, N>& m_in) {$/;"	f	namespace:tatooine	typeref:typename:auto
invoke_omitted	include/tatooine/invoke_omitted.h	/^constexpr decltype(auto) invoke_omitted(F&& f, Param&& param,$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
invoke_omitted	include/tatooine/invoke_omitted.h	/^constexpr decltype(auto) invoke_omitted(F&& f, Params&&... params) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
invoke_unpacked	include/tatooine/invoke_unpacked.h	/^constexpr decltype(auto) invoke_unpacked(F&& f) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
invoke_unpacked	include/tatooine/invoke_unpacked.h	/^constexpr decltype(auto) invoke_unpacked(F&& f, T&& t, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
invoke_unpacked	include/tatooine/invoke_unpacked.h	/^constexpr decltype(auto) invoke_unpacked(F&& f, unpack<T> t, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
invoke_unpacked	include/tatooine/invoke_unpacked.h	/^constexpr decltype(auto) invoke_unpacked(std::index_sequence<Is...> \/*is*\/,$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
is_cached	include/tatooine/cache.h	/^  bool is_cached(const Key& key) const {$/;"	f	class:tatooine::cache	typeref:typename:bool
is_closed	include/tatooine/line.h	/^  bool is_closed() const { return m_is_closed; }$/;"	f	struct:tatooine::line	typeref:typename:bool
is_complex	include/tatooine/type_traits.h	/^struct is_complex : std::false_type {};$/;"	s	namespace:tatooine
is_complex_v	include/tatooine/type_traits.h	/^static constexpr auto is_complex_v = is_complex<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_cxx11	include/tatooine/cxxstd.h	/^  #define is_cxx11(/;"	d
is_cxx14	include/tatooine/cxxstd.h	/^  #define is_cxx14(/;"	d
is_cxx17	include/tatooine/cxxstd.h	/^  #define is_cxx17(/;"	d
is_cxx20	include/tatooine/cxxstd.h	/^  #define is_cxx20(/;"	d
is_cxx98	include/tatooine/cxxstd.h	/^  #define is_cxx98(/;"	d
is_inside	include/tatooine/boundingbox.h	/^  constexpr auto is_inside(const pos_t& p) const {$/;"	f	struct:tatooine::boundingbox	typeref:typename:auto
is_inside	include/tatooine/geometry/circle.h	/^  bool is_inside(const pos_t& x) const override {$/;"	f	struct:tatooine::geometry::circle	typeref:typename:bool
is_iterator	include/tatooine/type_traits.h	/^struct is_iterator : std::false_type {};$/;"	s	namespace:tatooine
is_iterator	include/tatooine/type_traits.h	/^struct is_iterator<T, std::enable_if_t<!std::is_same_v<$/;"	s	namespace:tatooine
is_iterator_v	include/tatooine/type_traits.h	/^static constexpr auto is_iterator_v = is_iterator<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_left	include/tatooine/mesh.h	/^  static bool is_left(const pos_t& a, const pos_t& b, const pos_t& c) {$/;"	f	class:tatooine::mesh	typeref:typename:bool
is_matrix	include/tatooine/tensor.h	/^struct is_matrix : std::false_type {};$/;"	s	namespace:tatooine
is_matrix_v	include/tatooine/tensor.h	/^static constexpr auto is_matrix_v = is_matrix<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_open	include/tatooine/vtk_legacy.h	/^  bool is_open() { return m_file.is_open(); }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:bool
is_polynomial	include/tatooine/polynomial.h	/^struct is_polynomial : std::false_type {};$/;"	s	namespace:tatooine
is_polynomial_v	include/tatooine/polynomial.h	/^static constexpr bool is_polynomial_v = is_polynomial<T>::value;$/;"	v	namespace:tatooine	typeref:typename:bool
is_symbolic	include/tatooine/type_traits.h	/^struct is_symbolic$/;"	s	namespace:tatooine
is_symbolic_field	include/tatooine/symbolic_field.h	/^constexpr auto is_symbolic_field($/;"	f	namespace:tatooine	typeref:typename:auto
is_symbolic_field	include/tatooine/symbolic_field.h	/^constexpr auto is_symbolic_field(T&&) noexcept {$/;"	f	namespace:tatooine	typeref:typename:auto
is_symbolic_field_impl	include/tatooine/symbolic_field.h	/^struct is_symbolic_field_impl : std::false_type {};$/;"	s	namespace:tatooine
is_symbolic_field_v	include/tatooine/symbolic_field.h	/^static constexpr auto is_symbolic_field_v = is_symbolic<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_symbolic_v	include/tatooine/type_traits.h	/^static constexpr auto is_symbolic_v = is_symbolic<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_tensor	include/tatooine/tensor.h	/^struct is_tensor : std::false_type {};$/;"	s	namespace:tatooine
is_tensor_v	include/tatooine/tensor.h	/^static constexpr auto is_tensor_v = is_tensor<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_unsigned_integral	include/tatooine/type_traits.h	/^struct is_unsigned_integral$/;"	s	namespace:tatooine
is_unsigned_integral_v	include/tatooine/type_traits.h	/^static constexpr auto is_unsigned_integral_v = is_unsigned_integral<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_valid	include/tatooine/edgeset.h	/^  constexpr bool is_valid(edge e) const {$/;"	f	class:tatooine::edgeset	typeref:typename:bool
is_valid	include/tatooine/mesh.h	/^  constexpr bool is_valid(face f) const {$/;"	f	class:tatooine::mesh	typeref:typename:bool
is_valid	include/tatooine/pointset.h	/^  constexpr bool is_valid(vertex v) const {$/;"	f	struct:tatooine::pointset	typeref:typename:bool
is_valid	include/tatooine/simple_tri_mesh.h	/^  constexpr bool is_valid(face f) const {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:bool
is_vector	include/tatooine/tensor.h	/^struct is_vector : std::false_type {};$/;"	s	namespace:tatooine
is_vector_v	include/tatooine/tensor.h	/^static constexpr auto is_vector_v = is_vector<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
is_vectorield	include/tatooine/type_traits.h	/^struct is_vectorield : std::false_type {};$/;"	s	namespace:tatooine
is_vectorield_v	include/tatooine/type_traits.h	/^constexpr auto is_vectorield_v = is_vectorield<T>::value;$/;"	v	namespace:tatooine	typeref:typename:auto
iterator	include/tatooine/edgeset.h	/^    using iterator       = edge_iterator;$/;"	t	struct:tatooine::edgeset::edge_container	typeref:typename:edge_iterator
iterator	include/tatooine/grid_sampler.h	/^  using iterator = grid_sampler_iterator<Real, N, Data, this_t>;$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:grid_sampler_iterator<Real,N,Data,this_t>
iterator	include/tatooine/grid_sampler.h	/^  using iterator =$/;"	t	struct:tatooine::grid_sampler	typeref:typename:grid_sampler_iterator<Real,N,Data,this_t,TailInterpolators...>
iterator	include/tatooine/grid_vertex.h	/^  using iterator        = grid_vertex_iterator<Real, N>;$/;"	t	struct:tatooine::grid_vertex	typeref:typename:grid_vertex_iterator<Real,N>
iterator	include/tatooine/grid_vertex_edges.h	/^  struct iterator : grid_vertex_neighbors<Real, N>::iterator {$/;"	s	struct:tatooine::grid_vertex_edges
iterator	include/tatooine/grid_vertex_neighbors.h	/^  struct iterator : subgrid<Real, N>::vertex_iterator {$/;"	s	struct:tatooine::grid_vertex_neighbors
iterator	include/tatooine/line.h	/^  using iterator =$/;"	t	struct:tatooine::const_line_vertex_container	typeref:typename:line_vertex_iterator<Line,Real,N,Handle,Value,Reference>
iterator	include/tatooine/line.h	/^  using iterator =$/;"	t	struct:tatooine::line_vertex_container	typeref:typename:line_vertex_iterator<Line,Real,N,Handle,Value,Reference>
iterator	include/tatooine/linspace.h	/^  using iterator       = linspace_iterator<Real>;$/;"	t	struct:tatooine::linspace	typeref:typename:linspace_iterator<Real>
iterator	include/tatooine/mesh.h	/^    using iterator       = face_iterator;$/;"	t	struct:tatooine::mesh::face_container	typeref:typename:face_iterator
iterator	include/tatooine/multidim.h	/^    iterator(const dynamic_multidim&    c,$/;"	f	struct:tatooine::dynamic_multidim::iterator
iterator	include/tatooine/multidim.h	/^    iterator(const dynamic_multidim& c,$/;"	f	struct:tatooine::dynamic_multidim::iterator
iterator	include/tatooine/multidim.h	/^  struct iterator {$/;"	s	struct:tatooine::dynamic_multidim
iterator	include/tatooine/pointset.h	/^    using iterator       = vertex_iterator;$/;"	t	struct:tatooine::pointset::vertex_container	typeref:typename:vertex_iterator
iterator	include/tatooine/property.h	/^  using iterator               = typename container_t::iterator;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::iterator
iterator	include/tatooine/property.h	/^  using iterator               = typename container_t::iterator;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::iterator
iterator	include/tatooine/simple_tri_mesh.h	/^    using iterator       = face_iterator;$/;"	t	struct:tatooine::simple_tri_mesh::face_container	typeref:typename:face_iterator
iterator	include/tatooine/tensor.h	/^  using iterator = typename parent_t::array_parent_t::container_t::iterator;$/;"	t	struct:tatooine::vec	typeref:typename:parent_t::array_parent_t::container_t::iterator
iterator_category	include/tatooine/grid_vertex.h	/^  using iterator_category = std::bidirectional_iterator_tag;$/;"	t	struct:tatooine::grid_vertex_iterator	typeref:typename:std::bidirectional_iterator_tag
iterators	include/tatooine/grid_vertex.h	/^  std::array<linspace_iter_t, N> iterators;$/;"	m	struct:tatooine::grid_vertex	typeref:typename:std::array<linspace_iter_t,N>
j	include/tatooine/grid_vertex_neighbors.h	/^      for (size_t j = 0; j < 2; ++j) {$/;"	m	struct:tatooine::grid_vertex_neighbors	typeref:typename:size_t
join	include/tatooine/pointset.h	/^  auto join(const this_t& other) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto
key_pressed_event	include/tatooine/gpu/first_person_window.h	/^struct key_pressed_event : holder<F>, yavin::window_listener {$/;"	s	namespace:tatooine
key_released_event	include/tatooine/gpu/first_person_window.h	/^struct key_released_event : holder<F>, yavin::window_listener {$/;"	s	namespace:tatooine
lambda2	include/tatooine/lambda2_field.h	/^auto lambda2(const field<V, Real, N, N>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
lambda2_field	include/tatooine/lambda2_field.h	/^  lambda2_field(const field<V, Real, N, N>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::lambda2_field
lambda2_field	include/tatooine/lambda2_field.h	/^class lambda2_field : public field<lambda2_field<V>, typename V::real_t,$/;"	c	namespace:tatooine
legacy_file	include/tatooine/vtk_legacy.h	/^  legacy_file(const std::string &path) : m_path(path) {}$/;"	f	class:tatooine::vtk::legacy_file
legacy_file	include/tatooine/vtk_legacy.h	/^class legacy_file {$/;"	c	namespace:tatooine::vtk
legacy_file_listener	include/tatooine/vtk_legacy.h	/^struct legacy_file_listener {$/;"	s	namespace:tatooine::vtk
legacy_file_writer	include/tatooine/vtk_legacy.h	/^  legacy_file_writer(const std::string &path, DatasetType type,$/;"	f	class:tatooine::vtk::legacy_file_writer
legacy_file_writer	include/tatooine/vtk_legacy.h	/^class legacy_file_writer {$/;"	c	namespace:tatooine::vtk
length	include/tatooine/field.h	/^constexpr auto length(const field<Field, Real, N, VecDim>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto
length	include/tatooine/tensor.h	/^constexpr Real length(const base_tensor<Tensor, Real, N>& t_in) {$/;"	f	namespace:tatooine	typeref:typename:Real
lic	include/tatooine/gpu/lic.h.in	/^auto lic(const field<V, Real, 2, 2>& v, const grid<Real, 2>& discrete_domain,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
lic	include/tatooine/gpu/lic.h.in	/^auto lic(const field<V, Real, 2, 2>& v, const linspace<Real>& xres,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
lic	include/tatooine/gpu/lic.h.in	/^auto lic(const grid_sampler<Real, 2, vec<Real, 2>, InterpX, InterpY>& sampler,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
lic_shader	include/tatooine/gpu/lic.h.in	/^  lic_shader() {$/;"	f	struct:tatooine::gpu::lic_shader	file:
lic_shader	include/tatooine/gpu/lic.h.in	/^struct lic_shader : yavin::shader {$/;"	s	namespace:tatooine::gpu	file:
line	include/tatooine/line.h	/^  const auto& line() const { return m_line; }$/;"	f	struct:tatooine::const_line_vertex_container	typeref:typename:const auto &
line	include/tatooine/line.h	/^  line(const line& other)$/;"	f	struct:tatooine::line
line	include/tatooine/line.h	/^  line(const pos_container_t& data, bool is_closed = false)$/;"	f	struct:tatooine::line
line	include/tatooine/line.h	/^  line(pos_container_t&& data, bool is_closed = false)$/;"	f	struct:tatooine::line
line	include/tatooine/line.h	/^  line(std::initializer_list<pos_t>&& data)$/;"	f	struct:tatooine::line
line	include/tatooine/line.h	/^struct line {$/;"	s	namespace:tatooine
line_color	include/tatooine/gpu/pathline_render_window.h	/^  float                             line_color[3];$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float[3]
line_renderers	include/tatooine/gpu/pathline_render_window.h	/^      line_renderers;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:std::vector<yavin::indexeddata<yavin::vec3,yavin::vec3,yavin::scalar>>
line_segments_to_line_strips	include/tatooine/line.h	/^auto line_segments_to_line_strips($/;"	f	namespace:tatooine	typeref:typename:auto
line_shader	include/tatooine/gpu/line_shader.h.in	/^  line_shader(float lr = 1, float lg = 0, float lb = 0, float cr = 0,$/;"	f	struct:tatooine::gpu::line_shader	file:
line_shader	include/tatooine/gpu/line_shader.h.in	/^struct line_shader : yavin::shader {$/;"	s	namespace:tatooine::gpu	file:
line_shader	include/tatooine/render_topological_skeleton.h	/^    line_shader() {$/;"	f	struct:tatooine::render_topological_skeleton::line_shader
line_shader	include/tatooine/render_topological_skeleton.h	/^  struct line_shader : shader {$/;"	s	function:tatooine::render_topological_skeleton
line_t	include/tatooine/line.h	/^  using line_t = typename std::decay_t<Lines>::value_type;$/;"	t	function:tatooine::detail::merge_line_container	typeref:typename:std::decay_t<Lines>::value_type
line_vertex_container	include/tatooine/line.h	/^struct line_vertex_container {$/;"	s	namespace:tatooine
line_vertex_iterator	include/tatooine/line.h	/^  line_vertex_iterator(Handle handle, Line& l) : m_handle{handle}, m_line{l} {}$/;"	f	struct:tatooine::line_vertex_iterator
line_vertex_iterator	include/tatooine/line.h	/^struct line_vertex_iterator$/;"	s	namespace:tatooine
line_width	include/tatooine/gpu/pathline_render_window.h	/^  float                             line_width;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
linear	include/tatooine/interpolation.h	/^  constexpr linear(const Real& fx0, const Real& fx1)$/;"	f	struct:tatooine::interpolation::linear
linear	include/tatooine/interpolation.h	/^struct linear {$/;"	s	namespace:tatooine::interpolation
lines	include/tatooine/gpu/pathline_render_window.h	/^  std::vector<integrator_t::integral_t> lines;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:std::vector<integrator_t::integral_t>
lines	include/tatooine/line.h	/^      std::vector<std::vector<int>>    lines;$/;"	m	struct:tatooine::line::read_vtk::reader	typeref:typename:std::vector<std::vector<int>>
linspace	include/tatooine/linspace.h	/^  constexpr linspace() noexcept$/;"	f	struct:tatooine::linspace
linspace	include/tatooine/linspace.h	/^  constexpr linspace(Real min, Real max, size_t size) noexcept$/;"	f	struct:tatooine::linspace
linspace	include/tatooine/linspace.h	/^  constexpr linspace(const linspace<OtherReal>& other) noexcept$/;"	f	struct:tatooine::linspace
linspace	include/tatooine/linspace.h	/^struct linspace {$/;"	s	namespace:tatooine
linspace_it_t	include/tatooine/grid.h	/^  using linspace_it_t = typename linspace_t::iterator;$/;"	t	class:tatooine::grid	typeref:typename:linspace_t::iterator
linspace_iter_t	include/tatooine/grid_vertex.h	/^  using linspace_iter_t = typename linspace<Real>::iterator;$/;"	t	struct:tatooine::grid_vertex	typeref:typename:linspace<Real>::iterator
linspace_iterator	include/tatooine/linspace.h	/^  linspace_iterator(const linspace<Real>* _lin, size_t _i)$/;"	f	struct:tatooine::linspace_iterator
linspace_iterator	include/tatooine/linspace.h	/^  linspace_iterator(const linspace_iterator& other)$/;"	f	struct:tatooine::linspace_iterator
linspace_iterator	include/tatooine/linspace.h	/^struct linspace_iterator$/;"	s	namespace:tatooine
linspace_t	include/tatooine/grid.h	/^  using linspace_t    = linspace<Real>;$/;"	t	class:tatooine::grid	typeref:typename:linspace<Real>
listener_t	include/tatooine/grid_sampler.h	/^    struct listener_t : vtk::legacy_file_listener {$/;"	s	function:tatooine::grid_sampler::read_vtk
listener_t	include/tatooine/grid_sampler.h	/^    struct listener_t : vtk::legacy_file_listener {$/;"	s	function:tatooine::grid_sampler::read_vtk_scalars
listener_t	include/tatooine/simple_tri_mesh.h	/^      listener_t(simple_tri_mesh& _mesh) : mesh(_mesh) {}$/;"	f	struct:tatooine::simple_tri_mesh::read_vtk::listener_t
listener_t	include/tatooine/simple_tri_mesh.h	/^    struct listener_t : vtk::legacy_file_listener {$/;"	s	function:tatooine::simple_tri_mesh::read_vtk
loop	include/tatooine/for_loop.h	/^  auto loop(Iteration&& iteration,$/;"	f	struct:tatooine::detail::for_loop_impl	typeref:typename:auto
loop	include/tatooine/for_loop.h	/^  constexpr auto loop(Iteration&& iteration,$/;"	f	struct:tatooine::detail::for_loop_impl	typeref:typename:auto
m	include/tatooine/mesh.h	/^    const mesh* m;$/;"	m	struct:tatooine::mesh::face_iterator	typeref:typename:const mesh *
m_a	include/tatooine/abcflow.h	/^  real_t m_a, m_b, m_c;$/;"	m	struct:tatooine::numerical::abcflow	typeref:typename:real_t
m_a_down	include/tatooine/gpu/first_person_window.h	/^  bool m_a_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_alpha	include/tatooine/duffing_oscillator.h	/^  Real                  m_delta, m_alpha, m_beta;$/;"	m	struct:tatooine::numerical::duffing_oscillator	typeref:typename:Real
m_attr	include/tatooine/hdf5.h	/^  H5::Attribute               m_attr;$/;"	m	struct:tatooine::h5::attribute	typeref:typename:H5::Attribute
m_b	include/tatooine/abcflow.h	/^  real_t m_a, m_b, m_c;$/;"	m	struct:tatooine::numerical::abcflow	typeref:typename:real_t
m_begin_of_data	include/tatooine/vtk_legacy.h	/^  long        m_begin_of_data;$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:long
m_begin_vertex	include/tatooine/subgrid.h	/^  grid_vertex<Real, N> m_begin_vertex, m_end_vertex;$/;"	m	struct:tatooine::subgrid	typeref:typename:grid_vertex<Real,N>
m_beta	include/tatooine/duffing_oscillator.h	/^  Real                  m_delta, m_alpha, m_beta;$/;"	m	struct:tatooine::numerical::duffing_oscillator	typeref:typename:Real
m_c	include/tatooine/abcflow.h	/^  real_t m_a, m_b, m_c;$/;"	m	struct:tatooine::numerical::abcflow	typeref:typename:real_t
m_cache	include/tatooine/integration/integrator.h	/^  mutable cache_t m_cache;$/;"	m	struct:tatooine::integration::integrator	typeref:typename:cache_t
m_cam	include/tatooine/gpu/first_person_window.h	/^  yavin::perspectivecamera m_cam;$/;"	m	struct:tatooine::first_person_window	typeref:typename:yavin::perspectivecamera
m_center	include/tatooine/geometry/circle.h	/^  pos_t m_center;$/;"	m	struct:tatooine::geometry::circle	typeref:typename:pos_t
m_chunk_structure	include/tatooine/chunked_data.h	/^  dynamic_multidim_resolution<x_fastest> m_chunk_structure;$/;"	m	struct:tatooine::chunked_data	typeref:typename:dynamic_multidim_resolution<x_fastest>
m_chunks	include/tatooine/chunked_data.h	/^  std::vector<std::unique_ptr<chunk_t>> m_chunks;$/;"	m	struct:tatooine::chunked_data	typeref:typename:std::vector<std::unique_ptr<chunk_t>>
m_coefficients	include/tatooine/polynomial.h	/^  std::array<Real, Degree + 1> m_coefficients;$/;"	m	struct:tatooine::polynomial	typeref:typename:std::array<Real,Degree+1>
m_cont	include/tatooine/multidim.h	/^    const dynamic_multidim* m_cont;$/;"	m	struct:tatooine::dynamic_multidim::iterator	typeref:typename:const dynamic_multidim *
m_cont	include/tatooine/multidim.h	/^  const static_multidim<N>  m_cont;$/;"	m	struct:tatooine::static_multidim_iterator	typeref:typename:const static_multidim<N>
m_d_down	include/tatooine/gpu/first_person_window.h	/^  bool m_d_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_data	include/tatooine/cache.h	/^  container_t m_data;$/;"	m	class:tatooine::cache	typeref:typename:container_t
m_data	include/tatooine/grid_sampler.h	/^  chunked_data<Data, N> m_data;$/;"	m	struct:tatooine::grid_sampler	typeref:typename:chunked_data<Data,N>
m_data	include/tatooine/multidim_array.h	/^  container_t m_data;$/;"	m	class:tatooine::dynamic_multidim_array	typeref:typename:container_t
m_data	include/tatooine/multidim_array.h	/^  container_t m_data;$/;"	m	class:tatooine::static_multidim_array	typeref:typename:container_t
m_data	include/tatooine/property.h	/^  container_t m_data;$/;"	m	struct:tatooine::deque_property_impl	typeref:typename:container_t
m_data	include/tatooine/property.h	/^  container_t m_data;$/;"	m	struct:tatooine::vector_property_impl	typeref:typename:container_t
m_data	include/tatooine/vtk_legacy.h	/^  ReaderData  m_data = UNSPECIFIED_DATA;$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:ReaderData
m_data_size	include/tatooine/vtk_legacy.h	/^  size_t      m_data_size;  \/\/ cell_data or point_data size$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:size_t
m_data_structure	include/tatooine/chunked_data.h	/^  dynamic_multidim_resolution<x_fastest> m_data_structure;$/;"	m	struct:tatooine::chunked_data	typeref:typename:dynamic_multidim_resolution<x_fastest>
m_dataset	include/tatooine/hdf5.h	/^  H5::DataSet                 m_dataset;$/;"	m	struct:tatooine::h5::dataset	typeref:typename:H5::DataSet
m_dataset_type	include/tatooine/vtk_legacy.h	/^  DatasetType    m_dataset_type;$/;"	m	class:tatooine::vtk::legacy_file_writer	typeref:typename:DatasetType
m_delta	include/tatooine/duffing_oscillator.h	/^  Real                  m_delta, m_alpha, m_beta;$/;"	m	struct:tatooine::numerical::duffing_oscillator	typeref:typename:Real
m_dimensions	include/tatooine/grid.h	/^  std::array<linspace_t, N> m_dimensions;$/;"	m	class:tatooine::grid	typeref:typename:std::array<linspace_t,N>
m_e_down	include/tatooine/gpu/first_person_window.h	/^  bool m_e_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_edge_properties	include/tatooine/edgeset.h	/^  std::map<std::string, std::unique_ptr<property>> m_edge_properties;$/;"	m	class:tatooine::edgeset	typeref:typename:std::map<std::string,std::unique_ptr<property>>
m_edges	include/tatooine/edgeset.h	/^  std::vector<std::array<vertex, 2>>               m_edges;$/;"	m	class:tatooine::edgeset	typeref:typename:std::vector<std::array<vertex,2>>
m_edges_of_faces	include/tatooine/mesh.h	/^  face_prop<std::vector<edge>>* m_edges_of_faces = nullptr;$/;"	m	class:tatooine::mesh	typeref:typename:face_prop<std::vector<edge>> *
m_edges_of_vertices	include/tatooine/edgeset.h	/^  vertex_edge_link_t* m_edges_of_vertices = nullptr;$/;"	m	class:tatooine::edgeset	typeref:typename:vertex_edge_link_t *
m_edgeset	include/tatooine/edgeset.h	/^    const edgeset* m_edgeset;$/;"	m	struct:tatooine::edgeset::edge_container	typeref:typename:const edgeset *
m_end_vertex	include/tatooine/subgrid.h	/^  grid_vertex<Real, N> m_begin_vertex, m_end_vertex;$/;"	m	struct:tatooine::subgrid	typeref:typename:grid_vertex<Real,N>
m_eps	include/tatooine/diff.h	/^  vec_t m_eps;$/;"	m	struct:tatooine::derived_field	typeref:typename:vec_t
m_eps	include/tatooine/duffing_oscillator.h	/^  Real                  m_eps;$/;"	m	struct:tatooine::numerical::forced_duffing_oscillator	typeref:typename:Real
m_events	include/tatooine/gpu/first_person_window.h	/^  std::vector<std::unique_ptr<base_holder>> m_events;$/;"	m	struct:tatooine::first_person_window	typeref:typename:std::vector<std::unique_ptr<base_holder>>
m_expr	include/tatooine/symbolic_field.h	/^  symtensor_t m_expr;$/;"	m	struct:tatooine::symbolic::field	typeref:typename:symtensor_t
m_eye	include/tatooine/gpu/first_person_window.h	/^  yavin::vec3                                        m_eye, m_look_at, m_up;$/;"	m	struct:tatooine::first_person_window	typeref:typename:yavin::vec3
m_face_properties	include/tatooine/mesh.h	/^  std::map<std::string, std::unique_ptr<property>> m_face_properties;$/;"	m	class:tatooine::mesh	typeref:typename:std::map<std::string,std::unique_ptr<property>>
m_face_properties	include/tatooine/simple_tri_mesh.h	/^      m_face_properties;$/;"	m	class:tatooine::simple_tri_mesh	typeref:typename:std::map<std::string,std::unique_ptr<vector_property<face>>>
m_faces	include/tatooine/mesh.h	/^  std::vector<std::vector<vertex>>                 m_faces;$/;"	m	class:tatooine::mesh	typeref:typename:std::vector<std::vector<vertex>>
m_faces	include/tatooine/simple_tri_mesh.h	/^  std::vector<std::array<vertex, 3>> m_faces;$/;"	m	class:tatooine::simple_tri_mesh	typeref:typename:std::vector<std::array<vertex,3>>
m_faces_of_edges	include/tatooine/mesh.h	/^  edge_prop<std::vector<face>>*   m_faces_of_edges    = nullptr;$/;"	m	class:tatooine::mesh	typeref:typename:edge_prop<std::vector<face>> *
m_faces_of_vertices	include/tatooine/mesh.h	/^  vertex_prop<std::vector<face>>* m_faces_of_vertices = nullptr;$/;"	m	class:tatooine::mesh	typeref:typename:vertex_prop<std::vector<face>> *
m_field	include/tatooine/field.h	/^  Field m_field;$/;"	m	struct:tatooine::unary_operation_field	typeref:typename:Field
m_field	include/tatooine/fixed_time_field.h	/^  Field m_field;$/;"	m	struct:tatooine::fixed_time_field	typeref:typename:Field
m_field	include/tatooine/spacetime_field.h	/^  field_t m_field;$/;"	m	struct:tatooine::spacetime_field	typeref:typename:field_t
m_file	include/tatooine/hdf5.h	/^  std::shared_ptr<H5::H5File> m_file;$/;"	m	struct:tatooine::h5::attribute	typeref:typename:std::shared_ptr<H5::H5File>
m_file	include/tatooine/hdf5.h	/^  std::shared_ptr<H5::H5File> m_file;$/;"	m	struct:tatooine::h5::dataset	typeref:typename:std::shared_ptr<H5::H5File>
m_file	include/tatooine/hdf5.h	/^  std::shared_ptr<H5::H5File> m_file;$/;"	m	struct:tatooine::h5::group	typeref:typename:std::shared_ptr<H5::H5File>
m_file	include/tatooine/hdf5.h	/^  std::shared_ptr<H5::H5File> m_file;$/;"	m	struct:tatooine::h5::ifile	typeref:typename:std::shared_ptr<H5::H5File>
m_file	include/tatooine/vtk_legacy.h	/^  std::ofstream  m_file;$/;"	m	class:tatooine::vtk::legacy_file_writer	typeref:typename:std::ofstream
m_fixed_index	include/tatooine/tensor.h	/^  size_t  m_fixed_index;$/;"	m	struct:tatooine::tensor_slice	typeref:typename:size_t
m_fixed_time	include/tatooine/fixed_time_field.h	/^  Real m_fixed_time;$/;"	m	struct:tatooine::fixed_time_field	typeref:typename:Real
m_flowmap_gradient	include/tatooine/ftle.h	/^  flowmap_gradient_t m_flowmap_gradient;$/;"	m	struct:tatooine::ftle	typeref:typename:flowmap_gradient_t
m_format	include/tatooine/vtk_legacy.h	/^  Format      m_format;$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:Format
m_grid	include/tatooine/grid_sampler.h	/^  const Grid* m_grid;$/;"	m	struct:tatooine::grid_sampler_iterator	typeref:typename:const Grid *
m_group	include/tatooine/hdf5.h	/^  H5::Group                   m_group;$/;"	m	struct:tatooine::h5::group	typeref:typename:H5::Group
m_handle	include/tatooine/line.h	/^  Handle      m_handle;$/;"	m	struct:tatooine::const_line_vertex_iterator	typeref:typename:Handle
m_handle	include/tatooine/line.h	/^  Handle m_handle;$/;"	m	struct:tatooine::line_vertex_iterator	typeref:typename:Handle
m_height	include/tatooine/gpu/first_person_window.h	/^  GLsizei m_width, m_height;$/;"	m	struct:tatooine::first_person_window	typeref:typename:GLsizei
m_held_object	include/tatooine/holder.h	/^  T m_held_object;$/;"	m	struct:tatooine::holder	typeref:typename:T
m_i	include/tatooine/linspace.h	/^  size_t             m_i;$/;"	m	struct:tatooine::linspace_iterator	typeref:typename:size_t
m_index	include/tatooine/grid_sampler.h	/^  size_t      m_index;$/;"	m	struct:tatooine::grid_sampler_iterator	typeref:typename:size_t
m_integrator	include/tatooine/flowmap.h	/^  std::shared_ptr<integrator_t> m_integrator;$/;"	m	struct:tatooine::flowmap	typeref:typename:std::shared_ptr<integrator_t>
m_integrator	include/tatooine/streamsurface.h	/^  integrator_t m_integrator;$/;"	m	struct:tatooine::streamsurface	typeref:typename:integrator_t
m_internal_field	include/tatooine/diff.h	/^  Field m_internal_field;$/;"	m	struct:tatooine::derived_field	typeref:typename:Field
m_internal_matrix	include/tatooine/tensor.h	/^  Matrix& m_internal_matrix;$/;"	m	struct:tatooine::transposed_matrix	typeref:typename:Matrix &
m_internal_matrix	include/tatooine/tensor.h	/^  const Matrix& m_internal_matrix;$/;"	m	struct:tatooine::const_transposed_matrix	typeref:typename:const Matrix &
m_internal_tensor	include/tatooine/tensor.h	/^  Tensor& m_internal_tensor;$/;"	m	struct:tatooine::imag_complex_tensor	typeref:typename:Tensor &
m_internal_tensor	include/tatooine/tensor.h	/^  Tensor& m_internal_tensor;$/;"	m	struct:tatooine::real_complex_tensor	typeref:typename:Tensor &
m_internal_tensor	include/tatooine/tensor.h	/^  const Tensor& m_internal_tensor;$/;"	m	struct:tatooine::const_imag_complex_tensor	typeref:typename:const Tensor &
m_internal_tensor	include/tatooine/tensor.h	/^  const Tensor& m_internal_tensor;$/;"	m	struct:tatooine::const_real_complex_tensor	typeref:typename:const Tensor &
m_interpolators	include/tatooine/line.h	/^  std::deque<interpolation_t> m_interpolators;$/;"	m	struct:tatooine::parameterized_line	typeref:typename:std::deque<interpolation_t>
m_invalid_edges	include/tatooine/edgeset.h	/^  std::vector<edge>                                m_invalid_edges;$/;"	m	class:tatooine::edgeset	typeref:typename:std::vector<edge>
m_invalid_faces	include/tatooine/mesh.h	/^  std::vector<face>                                m_invalid_faces;$/;"	m	class:tatooine::mesh	typeref:typename:std::vector<face>
m_invalid_faces	include/tatooine/simple_tri_mesh.h	/^  std::vector<face>                  m_invalid_faces;$/;"	m	class:tatooine::simple_tri_mesh	typeref:typename:std::vector<face>
m_invalid_vertices	include/tatooine/pointset.h	/^  std::vector<vertex>                                      m_invalid_vertices;$/;"	m	struct:tatooine::pointset	typeref:typename:std::vector<vertex>
m_is_closed	include/tatooine/line.h	/^  bool            m_is_closed = false;$/;"	m	struct:tatooine::line	typeref:typename:bool
m_lhs_field	include/tatooine/field.h	/^  LhsField m_lhs_field;$/;"	m	struct:tatooine::binary_operation_field	typeref:typename:LhsField
m_lin	include/tatooine/linspace.h	/^  const linspace<Real>* m_lin;$/;"	m	struct:tatooine::linspace_iterator	typeref:typename:const linspace<Real> *
m_line	include/tatooine/line.h	/^  Line&  m_line;$/;"	m	struct:tatooine::line_vertex_iterator	typeref:typename:Line &
m_line	include/tatooine/line.h	/^  Line& m_line;$/;"	m	struct:tatooine::line_vertex_container	typeref:typename:Line &
m_line	include/tatooine/line.h	/^  const Line& m_line;$/;"	m	struct:tatooine::const_line_vertex_container	typeref:typename:const Line &
m_line	include/tatooine/line.h	/^  const Line& m_line;$/;"	m	struct:tatooine::const_line_vertex_iterator	typeref:typename:const Line &
m_listeners	include/tatooine/vtk_legacy.h	/^  std::vector<legacy_file_listener *> m_listeners;$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<legacy_file_listener * >
m_look_at	include/tatooine/gpu/first_person_window.h	/^  yavin::vec3                                        m_eye, m_look_at, m_up;$/;"	m	struct:tatooine::first_person_window	typeref:typename:yavin::vec3
m_major_version	include/tatooine/vtk_legacy.h	/^  unsigned short m_major_version;$/;"	m	class:tatooine::vtk::legacy_file_writer	typeref:typename:unsigned short
m_max	include/tatooine/linspace.h	/^  Real   m_min, m_max;$/;"	m	struct:tatooine::linspace	typeref:typename:Real
m_max_elements	include/tatooine/cache.h	/^  uint64_t m_max_elements;$/;"	m	class:tatooine::cache	typeref:typename:uint64_t
m_max_memory_usage	include/tatooine/cache.h	/^  uint64_t m_max_memory_usage;$/;"	m	class:tatooine::cache	typeref:typename:uint64_t
m_max_u	include/tatooine/streamsurface.h	/^  Real         m_min_u, m_max_u;$/;"	m	struct:tatooine::streamsurface	typeref:typename:Real
m_mesh	include/tatooine/mesh.h	/^    const mesh* m_mesh;$/;"	m	struct:tatooine::mesh::face_container	typeref:typename:const mesh *
m_mesh	include/tatooine/simple_tri_mesh.h	/^    const simple_tri_mesh* m_mesh;$/;"	m	struct:tatooine::simple_tri_mesh::face_container	typeref:typename:const simple_tri_mesh *
m_mesh	include/tatooine/simple_tri_mesh.h	/^    const simple_tri_mesh* m_mesh;$/;"	m	struct:tatooine::simple_tri_mesh::face_iterator	typeref:typename:const simple_tri_mesh *
m_min	include/tatooine/linspace.h	/^  Real   m_min, m_max;$/;"	m	struct:tatooine::linspace	typeref:typename:Real
m_min_u	include/tatooine/streamsurface.h	/^  Real         m_min_u, m_max_u;$/;"	m	struct:tatooine::streamsurface	typeref:typename:Real
m_minor_version	include/tatooine/vtk_legacy.h	/^  unsigned short m_minor_version;$/;"	m	class:tatooine::vtk::legacy_file_writer	typeref:typename:unsigned short
m_mouse_down	include/tatooine/gpu/first_person_window.h	/^  bool m_mouse_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_mouse_pos_x	include/tatooine/gpu/first_person_window.h	/^  int  m_mouse_pos_x, m_mouse_pos_y;$/;"	m	struct:tatooine::first_person_window	typeref:typename:int
m_mouse_pos_y	include/tatooine/gpu/first_person_window.h	/^  int  m_mouse_pos_x, m_mouse_pos_y;$/;"	m	struct:tatooine::first_person_window	typeref:typename:int
m_obstacles	include/tatooine/sampled_field.h	/^  std::vector<std::unique_ptr<geometry::primitive<Real, N>>> m_obstacles;$/;"	m	struct:tatooine::sampled_field	typeref:typename:std::vector<std::unique_ptr<geometry::primitive<Real,N>>>
m_on_border	include/tatooine/streamsurface.h	/^  std::set<vertex> m_on_border;$/;"	m	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:std::set<vertex>
m_on_domain_border	include/tatooine/integration/integrator.h	/^      m_on_domain_border;$/;"	m	struct:tatooine::integration::integrator	typeref:typename:std::map<std::pair<pos_t,Real>,std::pair<bool,bool>>
m_operator	include/tatooine/field.h	/^  Op       m_operator;$/;"	m	struct:tatooine::binary_operation_field	typeref:typename:Op
m_operator	include/tatooine/field.h	/^  Op    m_operator;$/;"	m	struct:tatooine::unary_operation_field	typeref:typename:Op
m_options	include/tatooine/integration/vclibs/rungekutta43.h	/^  options_t m_options;$/;"	m	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:options_t
m_parameterization	include/tatooine/line.h	/^  vertex_property_t<Real>*    m_parameterization;$/;"	m	struct:tatooine::parameterized_line	typeref:typename:vertex_property_t<Real> *
m_path	include/tatooine/vtk_legacy.h	/^  std::string m_path;$/;"	m	class:tatooine::vtk::legacy_file	typeref:typename:std::string
m_phi	include/tatooine/gpu/first_person_window.h	/^  float                                              m_theta = 0, m_phi = M_PI\/2;$/;"	m	struct:tatooine::first_person_window	typeref:typename:float
m_pointset	include/tatooine/pointset.h	/^    const pointset* m_pointset;$/;"	m	struct:tatooine::pointset::vertex_container	typeref:typename:const pointset *
m_polynomial	include/tatooine/interpolation.h	/^  polynomial_t m_polynomial;$/;"	m	struct:tatooine::interpolation::hermite	typeref:typename:polynomial_t
m_polynomial	include/tatooine/interpolation.h	/^  polynomial_t m_polynomial;$/;"	m	struct:tatooine::interpolation::linear	typeref:typename:polynomial_t
m_polynomials	include/tatooine/polynomial_line.h	/^  std::array<polynomial_t, N> m_polynomials;$/;"	m	class:tatooine::polynomial_line	typeref:typename:std::array<polynomial_t,N>
m_prefer_calc	include/tatooine/line.h	/^  bool        m_prefer_calc;$/;"	m	struct:tatooine::const_line_vertex_iterator	typeref:typename:bool
m_prefer_calc	include/tatooine/line.h	/^  bool   m_prefer_calc;$/;"	m	struct:tatooine::line_vertex_iterator	typeref:typename:bool
m_prefer_calc	include/tatooine/line.h	/^  bool m_prefer_calc;$/;"	m	struct:tatooine::const_line_vertex_container	typeref:typename:bool
m_prefer_calc	include/tatooine/line.h	/^  bool m_prefer_calc;$/;"	m	struct:tatooine::line_vertex_container	typeref:typename:bool
m_q_down	include/tatooine/gpu/first_person_window.h	/^  bool m_q_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_radius	include/tatooine/geometry/circle.h	/^  Real  m_radius;$/;"	m	struct:tatooine::geometry::circle	typeref:typename:Real
m_radius	include/tatooine/sinuscosinus.h	/^  Real m_radius;$/;"	m	struct:tatooine::numerical::cosinussinus	typeref:typename:Real
m_ranges	include/tatooine/multidim.h	/^  std::array<std::pair<size_t, size_t>, N> m_ranges;$/;"	m	struct:tatooine::static_multidim	typeref:typename:std::array<std::pair<size_t,size_t>,N>
m_ranges	include/tatooine/multidim.h	/^  std::vector<std::pair<size_t, size_t>> m_ranges;$/;"	m	struct:tatooine::dynamic_multidim	typeref:typename:std::vector<std::pair<size_t,size_t>>
m_rhs_field	include/tatooine/field.h	/^  RhsField m_rhs_field;$/;"	m	struct:tatooine::binary_operation_field	typeref:typename:RhsField
m_run	include/tatooine/gpu/first_person_window.h	/^  bool         m_run;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_s_down	include/tatooine/gpu/first_person_window.h	/^  bool m_s_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_sampler	include/tatooine/sampled_field.h	/^  std::shared_ptr<Sampler> m_sampler;$/;"	m	struct:tatooine::sampled_field	typeref:typename:std::shared_ptr<Sampler>
m_seedcurve	include/tatooine/streamsurface.h	/^  seedcurve_t  m_seedcurve;$/;"	m	struct:tatooine::streamsurface	typeref:typename:seedcurve_t
m_size	include/tatooine/linspace.h	/^  size_t m_size;$/;"	m	struct:tatooine::linspace	typeref:typename:size_t
m_size	include/tatooine/multidim_resolution.h	/^  std::vector<size_t> m_size;$/;"	m	class:tatooine::dynamic_multidim_resolution	typeref:typename:std::vector<size_t>
m_status	include/tatooine/multidim.h	/^    std::vector<size_t>     m_status;$/;"	m	struct:tatooine::dynamic_multidim::iterator	typeref:typename:std::vector<size_t>
m_status	include/tatooine/multidim.h	/^  std::array<size_t, N> m_status;$/;"	m	struct:tatooine::static_multidim_iterator	typeref:typename:std::array<size_t,N>
m_stepper	include/tatooine/integration/boost/boostintegrator.h	/^  Stepper m_stepper;$/;"	m	struct:tatooine::integration::boost::integrator	typeref:typename:Stepper
m_stepsize	include/tatooine/integration/boost/boostintegrator.h	/^  Real    m_stepsize;$/;"	m	struct:tatooine::integration::boost::integrator	typeref:typename:Real
m_subgrid	include/tatooine/subgrid.h	/^  subgrid<Real, N>*    m_subgrid;$/;"	m	struct:tatooine::subgrid::vertex_iterator	typeref:typename:subgrid<Real,N> *
m_t0_u0	include/tatooine/streamsurface.h	/^  Real         m_t0_u0, m_t0_u1;$/;"	m	struct:tatooine::streamsurface	typeref:typename:Real
m_t0_u1	include/tatooine/streamsurface.h	/^  Real         m_t0_u0, m_t0_u1;$/;"	m	struct:tatooine::streamsurface	typeref:typename:Real
m_tangents	include/tatooine/line.h	/^  vertex_property_t<vec<Real, N>>* m_tangents = nullptr;$/;"	m	struct:tatooine::line	typeref:typename:vertex_property_t<vec<Real,N>> *
m_tau	include/tatooine/flowmap.h	/^  real_t m_tau;$/;"	m	struct:tatooine::flowmap	typeref:typename:real_t
m_tensor	include/tatooine/tensor.h	/^  Tensor* m_tensor;$/;"	m	struct:tatooine::tensor_slice	typeref:typename:Tensor *
m_theta	include/tatooine/gpu/first_person_window.h	/^  float                                              m_theta = 0, m_phi = M_PI\/2;$/;"	m	struct:tatooine::first_person_window	typeref:typename:float
m_time	include/tatooine/gpu/first_person_window.h	/^  std::chrono::time_point<std::chrono::system_clock> m_time =$/;"	m	struct:tatooine::first_person_window	typeref:typename:std::chrono::time_point<std::chrono::system_clock>
m_title	include/tatooine/vtk_legacy.h	/^  std::string    m_title;$/;"	m	class:tatooine::vtk::legacy_file_writer	typeref:typename:std::string
m_up	include/tatooine/gpu/first_person_window.h	/^  yavin::vec3                                        m_eye, m_look_at, m_up;$/;"	m	struct:tatooine::first_person_window	typeref:typename:yavin::vec3
m_usage	include/tatooine/cache.h	/^  mutable usage_t m_usage;$/;"	m	class:tatooine::cache	typeref:typename:usage_t
m_uv	include/tatooine/parameterized_mesh.h	/^  uv_prop_t* m_uv;$/;"	m	struct:tatooine::parameterized_mesh	typeref:typename:uv_prop_t *
m_uv_property	include/tatooine/streamsurface.h	/^  uv_property_t*   m_uv_property;$/;"	m	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:uv_property_t *
m_v	include/tatooine/streamsurface.h	/^  V            m_v;$/;"	m	struct:tatooine::streamsurface	typeref:typename:V
m_value	include/tatooine/property.h	/^  T           m_value;$/;"	m	struct:tatooine::deque_property_impl	typeref:typename:T
m_value	include/tatooine/property.h	/^  T           m_value;$/;"	m	struct:tatooine::vector_property_impl	typeref:typename:T
m_vector	include/tatooine/constant_vectorfield.h	/^  const tensor_t m_vector;$/;"	m	struct:tatooine::constant_vectorfield	typeref:typename:const tensor_t
m_vectorfield	include/tatooine/flowmap.h	/^  V m_vectorfield;$/;"	m	struct:tatooine::flowmap	typeref:typename:V
m_vertex_properties	include/tatooine/line.h	/^  vertex_property_container_t      m_vertex_properties;$/;"	m	struct:tatooine::line	typeref:typename:vertex_property_container_t
m_vertex_properties	include/tatooine/pointset.h	/^      m_vertex_properties;$/;"	m	struct:tatooine::pointset	typeref:typename:std::map<std::string,std::unique_ptr<vector_property<vertex>>>
m_vertices	include/tatooine/line.h	/^  pos_container_t m_vertices;$/;"	m	struct:tatooine::line	typeref:typename:pos_container_t
m_vertices	include/tatooine/pointset.h	/^  std::vector<pos_t>                                       m_vertices;$/;"	m	struct:tatooine::pointset	typeref:typename:std::vector<pos_t>
m_vf	include/tatooine/curvature_field.h	/^  V m_vf;$/;"	m	class:tatooine::curvature_field	typeref:typename:V
m_vf	include/tatooine/helicity_field.h	/^  V m_vf;$/;"	m	class:tatooine::helicity_field	typeref:typename:V
m_vf	include/tatooine/lambda2_field.h	/^  V m_vf;$/;"	m	class:tatooine::lambda2_field	typeref:typename:V
m_vf	include/tatooine/okubo_weiss_field.h	/^  V m_vf;$/;"	m	class:tatooine::okubo_weiss_field	typeref:typename:V
m_vf	include/tatooine/vorticity_field.h	/^  V m_vf;$/;"	m	class:tatooine::vorticity_field	typeref:typename:V
m_w_down	include/tatooine/gpu/first_person_window.h	/^  bool m_w_down = false;$/;"	m	struct:tatooine::first_person_window	typeref:typename:bool
m_width	include/tatooine/gpu/first_person_window.h	/^  GLsizei m_width, m_height;$/;"	m	struct:tatooine::first_person_window	typeref:typename:GLsizei
major_version	include/tatooine/vtk_legacy.h	/^  const auto &major_version() const { return m_major_version; }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:const auto &
make_array	include/tatooine/make_array.h	/^constexpr auto make_array() {$/;"	f	namespace:tatooine	typeref:typename:auto
make_array	include/tatooine/make_array.h	/^constexpr auto make_array(Data&&... data) {$/;"	f	namespace:tatooine	typeref:typename:auto
make_array	include/tatooine/make_array.h	/^constexpr auto make_array(const T& t) {$/;"	f	namespace:tatooine	typeref:typename:auto
make_array	include/tatooine/make_array.h	/^constexpr auto make_array(const T& t, std::index_sequence<Is...> \/*is*\/) {$/;"	f	namespace:tatooine	typeref:typename:auto
make_array	include/tatooine/make_array.h	/^constexpr auto make_array(const std::array<T, N>& data) {$/;"	f	namespace:tatooine	typeref:typename:auto
make_binary_operation_field	include/tatooine/field.h	/^constexpr auto make_binary_operation_field($/;"	f	namespace:tatooine	typeref:typename:auto
make_sfinae_test	include/tatooine/type_traits.h	/^#define make_sfinae_test(/;"	d
make_unary_operation_field	include/tatooine/field.h	/^constexpr auto make_unary_operation_field($/;"	f	namespace:tatooine	typeref:typename:auto
map	include/tatooine/map.h	/^constexpr void map(F&& f, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:void
marchingcubes	include/tatooine/marchingcubes.h	/^auto marchingcubes($/;"	f	namespace:tatooine	typeref:typename:auto
marchingcubes	include/tatooine/marchingcubes.h	/^auto marchingcubes(GetScalars&& get_scalars, const grid<GridReal, 3>& g,$/;"	f	namespace:tatooine	typeref:typename:auto
marchingcubes	include/tatooine/marchingcubes.h	/^auto marchingcubes(const dynamic_multidim_array<Real, Indexing>& data,$/;"	f	namespace:tatooine	typeref:typename:auto
marchingcubes	include/tatooine/marchingcubes.h	/^auto marchingcubes(const field<Field, FieldReal, 3>& sf,$/;"	f	namespace:tatooine	typeref:typename:auto
marchingcubes_lookup	include/tatooine/marchingcubeslookuptable.h	/^namespace tatooine::marchingcubes_lookup {$/;"	n	namespace:tatooine
mat	include/tatooine/tensor.h	/^  constexpr mat(mat&& other) noexcept : parent_t{std::move(other)} {}$/;"	f	struct:tatooine::mat
mat	include/tatooine/tensor.h	/^struct mat : tensor<Real, M, N> {$/;"	s	namespace:tatooine
mat2	include/tatooine/tensor.h	/^using mat2 = mat<double, 2, 2>;$/;"	t	namespace:tatooine	typeref:typename:mat<double,2,2>
mat3	include/tatooine/line.h	/^  using mat3            = mat<Real, 3, 3>;$/;"	t	struct:tatooine::line	typeref:typename:mat<Real,3,3>
mat3	include/tatooine/tensor.h	/^using mat3 = mat<double, 3, 3>;$/;"	t	namespace:tatooine	typeref:typename:mat<double,3,3>
mat32	include/tatooine/curve_to_streamline.h	/^  using mat32 = mat<Real, 3, 2>;$/;"	t	struct:tatooine::curve_to_streamline	typeref:typename:mat<Real,3,2>
mat4	include/tatooine/tensor.h	/^using mat4 = mat<double, 4, 4>;$/;"	t	namespace:tatooine	typeref:typename:mat<double,4,4>
max	include/tatooine/boundingbox.h	/^  pos_t max;$/;"	m	struct:tatooine::boundingbox	typeref:typename:pos_t
max	include/tatooine/grid.h	/^  constexpr auto max() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
max	include/tatooine/grid.h	/^  constexpr auto max(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
max	include/tatooine/math.h	/^constexpr decltype(auto) max(T&& t0, T&& t1) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
max	include/tatooine/math.h	/^constexpr decltype(auto) max(T&& t0, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
max	include/tatooine/tensor.h	/^constexpr Real max(const base_tensor<Tensor, Real, Dims...>& t) {$/;"	f	namespace:tatooine	typeref:typename:Real
max_angle	include/tatooine/tensor.h	/^auto max_angle(const base_tensor<Tensor0, Real0, N>& v0,$/;"	f	namespace:tatooine	typeref:typename:auto
max_coord	include/tatooine/grid_sampler.h	/^      std::array<Real, 3>              min_coord, max_coord;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::array<Real,3>
max_num_steps	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto max_num_steps = VC::odeint::MaxNumSteps;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
max_step	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto max_step      = VC::odeint::MaxStep;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
max_u	include/tatooine/streamsurface.h	/^  constexpr auto max_u() const { return m_max_u; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
max_value	include/tatooine/chunked_data.h	/^  auto max_value() const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
max_value	include/tatooine/grid_sampler.h	/^  auto max_value() {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto
measure	include/tatooine/chrono.h	/^auto measure(F&& f, Param&&... param) {$/;"	f	namespace:tatooine	typeref:typename:auto
mem_t	include/tatooine/swap_endianess.h	/^  using mem_t           = unsigned char *;$/;"	t	function:tatooine::swap_endianess	typeref:typename:unsigned char *
mem_t	include/tatooine/swap_endianess.h	/^  using mem_t         = unsigned char *;$/;"	t	function:tatooine::swap_endianess	typeref:typename:unsigned char *
memory_usage	include/tatooine/memory_usage.h	/^inline auto memory_usage() {$/;"	f	namespace:tatooine	typeref:typename:auto
merge	include/tatooine/line.h	/^auto merge(const std::list<line<Real, N>>& lines, MaxDist max_dist) {$/;"	f	namespace:tatooine	typeref:typename:auto
merge	include/tatooine/line.h	/^auto merge(const std::vector<line<Real, N>>& lines, MaxDist max_dist) {$/;"	f	namespace:tatooine	typeref:typename:auto
merge_line_container	include/tatooine/line.h	/^auto merge_line_container(Lines   lines,$/;"	f	namespace:tatooine::detail	typeref:typename:auto
merge_lines	include/tatooine/line.h	/^auto merge_lines(const std::vector<line<Real, N>>& lines) {$/;"	f	namespace:tatooine	typeref:typename:auto
merge_lines	include/tatooine/line.h	/^void merge_lines(std::vector<line<Real, N>>& lines0,$/;"	f	namespace:tatooine	typeref:typename:void
mesh	include/tatooine/mesh.h	/^  constexpr mesh() { add_link_properties(); }$/;"	f	class:tatooine::mesh
mesh	include/tatooine/mesh.h	/^  constexpr mesh(std::initializer_list<pos_t>&& vertices)$/;"	f	class:tatooine::mesh
mesh	include/tatooine/mesh.h	/^  mesh(const mesh& other)$/;"	f	class:tatooine::mesh
mesh	include/tatooine/mesh.h	/^  mesh(const triangle::io& io) : parent_t{io} {$/;"	f	class:tatooine::mesh
mesh	include/tatooine/mesh.h	/^  mesh(mesh&& other)$/;"	f	class:tatooine::mesh
mesh	include/tatooine/mesh.h	/^class mesh : public edgeset<Real, N> {$/;"	c	namespace:tatooine
mesh	include/tatooine/simple_tri_mesh.h	/^      simple_tri_mesh& mesh;$/;"	m	struct:tatooine::simple_tri_mesh::read_vtk::listener_t	typeref:typename:simple_tri_mesh &
min	include/tatooine/boundingbox.h	/^  pos_t min;$/;"	m	struct:tatooine::boundingbox	typeref:typename:pos_t
min	include/tatooine/grid.h	/^  constexpr auto min() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
min	include/tatooine/grid.h	/^  constexpr auto min(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
min	include/tatooine/math.h	/^constexpr decltype(auto) min(T&& t0, T&& t1) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
min	include/tatooine/math.h	/^constexpr decltype(auto) min(T&& t0, Ts&&... ts) {$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
min	include/tatooine/tensor.h	/^constexpr Real min(const base_tensor<Tensor, Real, Dims...>& t) {$/;"	f	namespace:tatooine	typeref:typename:Real
min_angle	include/tatooine/tensor.h	/^auto min_angle(const base_tensor<Tensor0, Real0, N>& v0,$/;"	f	namespace:tatooine	typeref:typename:auto
min_coord	include/tatooine/grid_sampler.h	/^      std::array<Real, 3>              min_coord, max_coord;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::array<Real,3>
min_u	include/tatooine/streamsurface.h	/^  constexpr auto min_u() const { return m_min_u; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
min_value	include/tatooine/chunked_data.h	/^  auto min_value() const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
min_value	include/tatooine/grid_sampler.h	/^  auto min_value() {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto
minmax_value	include/tatooine/chunked_data.h	/^  auto minmax_value() const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
minmax_value	include/tatooine/grid_sampler.h	/^  auto minmax_value() {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto
minor_version	include/tatooine/vtk_legacy.h	/^  const auto &minor_version() const { return m_minor_version; }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:const auto &
modified_doublegyre	include/tatooine/modified_doublegyre.h	/^  modified_doublegyre() {$/;"	f	struct:tatooine::symbolic::modified_doublegyre
modified_doublegyre	include/tatooine/modified_doublegyre.h	/^struct modified_doublegyre : field<Real, 2, 2> {$/;"	s	namespace:tatooine::symbolic
modified_doublegyre	include/tatooine/modified_doublegyre.h	/^struct modified_doublegyre : field<modified_doublegyre<Real>,Real, 2, 2> {$/;"	s	namespace:tatooine::numerical
moved	include/tatooine/streamsurface.h	/^      bool             moved, on_border, resampled;$/;"	m	struct:tatooine::hultquist_discretization::integrate::integrated_t	typeref:typename:bool
multi_index	include/tatooine/index_ordering.h	/^  static auto multi_index(const std::vector<ResType>& resolution,$/;"	f	struct:tatooine::x_fastest	typeref:typename:auto
multi_index	include/tatooine/index_ordering.h	/^  static auto multi_index(const std::vector<ResType>& resolution,$/;"	f	struct:tatooine::x_slowest	typeref:typename:auto
multi_index	include/tatooine/index_ordering.h	/^  static auto multi_index(const std::vector<size_t>& resolution,$/;"	f	struct:tatooine::hilbert_curve	typeref:typename:auto
multi_index	include/tatooine/index_ordering.h	/^  static constexpr auto multi_index($/;"	f	struct:tatooine::x_slowest	typeref:typename:auto
multi_index	include/tatooine/index_ordering.h	/^  static constexpr auto multi_index(const std::array<ResType, N>& resolution,$/;"	f	struct:tatooine::x_fastest	typeref:typename:auto
multi_index	include/tatooine/index_ordering.h	/^  static constexpr auto multi_index(const std::array<size_t, N>& \/*resolution*\/,$/;"	f	struct:tatooine::hilbert_curve	typeref:typename:auto
multi_index	include/tatooine/multidim_resolution.h	/^  constexpr auto multi_index(size_t gi) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
mutate_seq	include/tatooine/grid.h	/^  auto mutate_seq(const edge_seq_t& seq, RandEng& eng) {$/;"	f	class:tatooine::grid	typeref:typename:auto
mutate_seq	include/tatooine/grid.h	/^  auto mutate_seq(const vertex_seq_t& seq, RandEng& eng) {$/;"	f	class:tatooine::grid	typeref:typename:auto
mutate_seq_straight	include/tatooine/grid.h	/^  auto mutate_seq_straight(const vertex_seq_t& seq, Real min_angle,$/;"	f	class:tatooine::grid	typeref:typename:auto
mutate_seq_straight	include/tatooine/grid.h	/^  auto mutate_seq_straight(const vertex_seq_t& seq, const size_t begin_idx,$/;"	f	class:tatooine::grid	typeref:typename:auto
mutate_seq_straight_next_at	include/tatooine/grid.h	/^  std::optional<vertex_seq_t> mutate_seq_straight_next_at($/;"	f	class:tatooine::grid	typeref:typename:std::optional<vertex_seq_t>
mutate_seq_straight_prev_at	include/tatooine/grid.h	/^  std::optional<vertex_seq_t> mutate_seq_straight_prev_at($/;"	f	class:tatooine::grid	typeref:typename:std::optional<vertex_seq_t>
needs_first_derivative	include/tatooine/interpolation.h	/^  static constexpr bool needs_first_derivative = false;$/;"	m	struct:tatooine::interpolation::linear	typeref:typename:bool
needs_first_derivative	include/tatooine/interpolation.h	/^  static constexpr bool needs_first_derivative = true;$/;"	m	struct:tatooine::interpolation::hermite	typeref:typename:bool
neighbor_faces	include/tatooine/mesh.h	/^  auto           neighbor_faces(face f) const {$/;"	f	class:tatooine::mesh	typeref:typename:auto
neighbors	include/tatooine/grid_vertex_neighbors.h	/^    auto neighbors() {$/;"	f	struct:tatooine::grid_vertex_neighbors::iterator	typeref:typename:auto
newton_raphson	include/tatooine/newton_raphson.h	/^[[nodiscard]] auto newton_raphson(const symbolic::field<Real, N, N>&          v,$/;"	f	namespace:tatooine	typeref:typename:[[nodiscard]]auto
next	include/tatooine/grid_sampler.h	/^auto next($/;"	f	namespace:tatooine	typeref:typename:auto
next	include/tatooine/grid_vertex.h	/^auto next(grid_vertex_iterator<Real, N> it, size_t num) {$/;"	f	namespace:tatooine	typeref:typename:auto
next	include/tatooine/line.h	/^  this_t next(const size_t inc = 1) const {$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:this_t
next	include/tatooine/line.h	/^  this_t next(size_t inc = 1) const {$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:this_t
next	include/tatooine/line.h	/^auto next($/;"	f	namespace:tatooine	typeref:typename:auto
next	include/tatooine/line.h	/^static auto next(const const_line_vertex_iterator<Line, Real, N, Handle, Value,$/;"	f	namespace:tatooine	typeref:typename:auto
next	include/tatooine/linspace.h	/^auto next(const linspace_iterator<Real>& l, size_t diff = 1) {$/;"	f	namespace:tatooine	typeref:typename:auto
norm	include/tatooine/tensor.h	/^constexpr Real norm(const base_tensor<Tensor, Real, N>& t, unsigned p = 2) {$/;"	f	namespace:tatooine	typeref:typename:Real
norm	include/tatooine/tensor.h	/^constexpr auto norm(const base_tensor<Matrix, Real, M, N>& mat) {$/;"	f	namespace:tatooine	typeref:typename:auto
norm	include/tatooine/tensor.h	/^constexpr auto norm(const base_tensor<Matrix, Real, M, N>& mat, frobenius_t) {$/;"	f	namespace:tatooine	typeref:typename:auto
norm1	include/tatooine/tensor.h	/^constexpr Real norm1(const base_tensor<Tensor, Real, N>& t) {$/;"	f	namespace:tatooine	typeref:typename:Real
norm_inf	include/tatooine/tensor.h	/^constexpr Real norm_inf(const base_tensor<Tensor, Real, N>& t) {$/;"	f	namespace:tatooine	typeref:typename:Real
normal	include/tatooine/tensor.h	/^void normal(base_tensor<Tensor, GiNaC::ex, Dims...>& m) {$/;"	f	namespace:tatooine	typeref:typename:void
normalize	include/tatooine/chunked_data.h	/^  void normalize() {$/;"	f	struct:tatooine::chunked_data	typeref:typename:void
normalize	include/tatooine/field.h	/^constexpr auto normalize(const field<Field, Real, N, VecDim>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto
normalize	include/tatooine/grid_sampler.h	/^  auto normalize() {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto
normalize	include/tatooine/tensor.h	/^constexpr vec<Real, N> normalize(const base_tensor<Tensor, Real, N>& t_in) {$/;"	f	namespace:tatooine	typeref:typename:vec<Real,N>
num_components	include/tatooine/grid_sampler.h	/^  static constexpr size_t num_components = num_components_v<Data>;$/;"	m	struct:tatooine::base_grid_sampler	typeref:typename:size_t
num_components	include/tatooine/grid_sampler.h	/^  static constexpr size_t num_components = parent_t::num_components;$/;"	m	struct:tatooine::grid_sampler	typeref:typename:size_t
num_components	include/tatooine/tensor.h	/^  static constexpr auto num_components() {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
num_components	include/tatooine/type_traits.h	/^struct num_components<double> : std::integral_constant<size_t, 1> {};$/;"	s	namespace:tatooine
num_components	include/tatooine/type_traits.h	/^struct num_components<float> : std::integral_constant<size_t, 1> {};$/;"	s	namespace:tatooine
num_components_v	include/tatooine/type_traits.h	/^static constexpr size_t num_components_v = num_components<T>::value;$/;"	v	namespace:tatooine	typeref:typename:size_t
num_dimensions	include/tatooine/boundingbox.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::boundingbox	typeref:typename:auto
num_dimensions	include/tatooine/field.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::field	typeref:typename:auto
num_dimensions	include/tatooine/geometry/primitive.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::geometry::primitive	typeref:typename:auto
num_dimensions	include/tatooine/grid_sampler.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
num_dimensions	include/tatooine/grid_sampler.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto
num_dimensions	include/tatooine/interpolation.h	/^  static constexpr size_t num_dimensions() { return 1; }$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:size_t
num_dimensions	include/tatooine/interpolation.h	/^  static constexpr size_t num_dimensions() { return 1; }$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:size_t
num_dimensions	include/tatooine/line.h	/^  static constexpr auto num_dimensions() noexcept { return N; }$/;"	f	struct:tatooine::line	typeref:typename:auto
num_dimensions	include/tatooine/multidim.h	/^  size_t num_dimensions() const { return m_ranges.size(); }$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:size_t
num_dimensions	include/tatooine/multidim.h	/^  static constexpr size_t num_dimensions() { return N; }$/;"	f	struct:tatooine::static_multidim	typeref:typename:size_t
num_dimensions	include/tatooine/multidim_resolution.h	/^  size_t num_dimensions() const { return m_size.size(); }$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:size_t
num_dimensions	include/tatooine/multidim_resolution.h	/^  static constexpr size_t num_dimensions() { return sizeof...(Resolution); }$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:size_t
num_dimensions	include/tatooine/pointset.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::pointset	typeref:typename:auto
num_dimensions	include/tatooine/polynomial_line.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
num_dimensions	include/tatooine/streamsurface.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
num_dimensions	include/tatooine/streamsurface.h	/^  static constexpr auto num_dimensions() { return N; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
num_dimensions	include/tatooine/tensor.h	/^  static constexpr size_t num_dimensions() { return sizeof...(Dims); }$/;"	f	struct:tatooine::base_tensor	typeref:typename:size_t
num_edges	include/tatooine/edgeset.h	/^  auto num_edges() const { return m_edges.size() - m_invalid_edges.size(); }$/;"	f	class:tatooine::edgeset	typeref:typename:auto
num_edges	include/tatooine/edgeset.h	/^  auto num_edges(vertex v) const { return edges(v).size(); }$/;"	f	class:tatooine::edgeset	typeref:typename:auto
num_edges	include/tatooine/mesh.h	/^  constexpr auto num_edges(face f) const { return edges(f).size(); }$/;"	f	class:tatooine::mesh	typeref:typename:auto
num_edges_in_dimension	include/tatooine/grid.h	/^  constexpr auto num_edges_in_dimension(size_t dim) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
num_edges_per_dimension	include/tatooine/grid.h	/^  constexpr auto num_edges_per_dimension() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
num_elements	include/tatooine/chunked_data.h	/^  size_t num_elements() const { return m_data_structure.num_elements(); }$/;"	f	struct:tatooine::chunked_data	typeref:typename:size_t
num_elements	include/tatooine/multidim_resolution.h	/^  size_t num_elements() const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:size_t
num_elements	include/tatooine/multidim_resolution.h	/^  static constexpr size_t num_elements() { return (Resolution * ...); }$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:size_t
num_elements	include/tatooine/multidim_resolution.h	/^  static constexpr size_t num_elements() {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:size_t
num_faces	include/tatooine/mesh.h	/^  constexpr auto num_faces() const {$/;"	f	class:tatooine::mesh	typeref:typename:auto
num_faces	include/tatooine/mesh.h	/^  constexpr auto num_faces(edge e) const { return faces(e).size(); }$/;"	f	class:tatooine::mesh	typeref:typename:auto
num_faces	include/tatooine/mesh.h	/^  constexpr auto num_faces(vertex v) const { return faces(v).size(); }$/;"	f	class:tatooine::mesh	typeref:typename:auto
num_faces	include/tatooine/simple_tri_mesh.h	/^  auto num_faces() const { return m_faces.size(); }$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto
num_points	include/tatooine/grid.h	/^  constexpr auto num_points() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
num_points	include/tatooine/grid.h	/^  constexpr auto num_points(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
num_pos_symbols	include/tatooine/symbolic.h	/^  static constexpr size_t num_pos_symbols = 100;$/;"	m	struct:tatooine::symbolic::symbol	typeref:typename:size_t
num_straight_edges	include/tatooine/grid.h	/^  constexpr auto num_straight_edges() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
num_tensor_dimensions	include/tatooine/field.h	/^  static constexpr auto num_tensor_dimensions() {$/;"	f	struct:tatooine::field	typeref:typename:auto
num_threads	include/tatooine/gpu/lic.h.in	/^  static constexpr vec<size_t, 2> num_threads{32, 32};$/;"	m	struct:tatooine::gpu::lic_shader	typeref:typename:vec<size_t,2>	file:
num_vertices	include/tatooine/grid.h	/^  constexpr auto num_vertices() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
num_vertices	include/tatooine/line.h	/^  auto num_vertices() const { return m_vertices.size(); }$/;"	f	struct:tatooine::line	typeref:typename:auto
num_vertices	include/tatooine/mesh.h	/^  constexpr auto num_vertices(face f) const { return at(f).size(); }$/;"	f	class:tatooine::mesh	typeref:typename:auto
num_vertices	include/tatooine/pointset.h	/^  auto num_vertices() const {$/;"	f	struct:tatooine::pointset	typeref:typename:auto
number_of_elements	include/tatooine/hdf5.h	/^  auto number_of_elements() const {$/;"	f	struct:tatooine::h5::attribute	typeref:typename:auto
numeric	include/tatooine/integration/boost/boostintegrator.h	/^namespace boost::numeric::odeint {$/;"	n	namespace:boost
numeric	include/tatooine/integration/boost/boostresizer.h	/^namespace boost::numeric::odeint {$/;"	n	namespace:boost
numerical	include/tatooine/abcflow.h	/^namespace numerical {$/;"	n	namespace:tatooine
numerical	include/tatooine/counterexample_sadlo.h	/^namespace tatooine::numerical {$/;"	n	namespace:tatooine
numerical	include/tatooine/doublegyre.h	/^namespace numerical {$/;"	n	namespace:tatooine
numerical	include/tatooine/duffing_oscillator.h	/^namespace numerical {$/;"	n	namespace:tatooine
numerical	include/tatooine/modified_doublegyre.h	/^namespace numerical {$/;"	n	namespace:tatooine
numerical	include/tatooine/orbit.h	/^namespace tatooine::numerical {$/;"	n	namespace:tatooine
numerical	include/tatooine/sinuscosinus.h	/^namespace tatooine::numerical {$/;"	n	namespace:tatooine
obstacle	include/tatooine/sampled_field.h	/^    for (const auto& obstacle : m_obstacles) {$/;"	m	struct:tatooine::sampled_field	typeref:typename:const auto &
ode_t	include/tatooine/integration/vclibs/rungekutta43.h	/^  using ode_t      = VC::odeint::ode_t<2, Real, vec<Real, N>, false>;$/;"	t	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:VC::odeint::ode_t<2,Real,vec<Real,N>,false>
odeint	include/tatooine/integration/boost/boostintegrator.h	/^namespace boost::numeric::odeint {$/;"	n	namespace:boost::numeric
odeint	include/tatooine/integration/boost/boostresizer.h	/^namespace boost::numeric::odeint {$/;"	n	namespace:boost::numeric
okubo_weiss	include/tatooine/okubo_weiss_field.h	/^auto okubo_weiss(const field<V, Real, N, N>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
okubo_weiss_field	include/tatooine/okubo_weiss_field.h	/^  okubo_weiss_field(const field<V, Real, 3, 3>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::okubo_weiss_field
okubo_weiss_field	include/tatooine/okubo_weiss_field.h	/^  okubo_weiss_field(const field<V, Real, N, N>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::okubo_weiss_field
okubo_weiss_field	include/tatooine/okubo_weiss_field.h	/^class okubo_weiss_field$/;"	c	namespace:tatooine
okubo_weiss_field	include/tatooine/okubo_weiss_field.h	/^class okubo_weiss_field<V, 3>$/;"	c	namespace:tatooine
omega	include/tatooine/doublegyre.h	/^  Real                epsilon, omega, A;$/;"	m	struct:tatooine::numerical::doublegyre	typeref:typename:Real
omega	include/tatooine/modified_doublegyre.h	/^  static constexpr Real omega   = 2 * pi * 0.1;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
on_border	include/tatooine/streamsurface.h	/^      bool             moved, on_border, resampled;$/;"	m	struct:tatooine::hultquist_discretization::integrate::integrated_t	typeref:typename:bool
on_button_pressed	include/tatooine/gpu/first_person_window.h	/^  void on_button_pressed(yavin::button b) override {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
on_button_released	include/tatooine/gpu/first_person_window.h	/^  void on_button_released(yavin::button b) override {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
on_cell_data	include/tatooine/vtk_legacy.h	/^  virtual void on_cell_data(size_t) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_cell_types	include/tatooine/vtk_legacy.h	/^  virtual void on_cell_types(const std::vector<CellType> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_cells	include/tatooine/vtk_legacy.h	/^  virtual void on_cells(const std::vector<std::vector<int>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_dataset_type	include/tatooine/grid_sampler.h	/^      void on_dataset_type(vtk::DatasetType _type) override { type = _type; }$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_dataset_type	include/tatooine/grid_sampler.h	/^      void on_dataset_type(vtk::DatasetType _type) override { type = _type; }$/;"	f	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:void
on_dataset_type	include/tatooine/simple_tri_mesh.h	/^      void on_dataset_type(vtk::DatasetType t) override {$/;"	f	struct:tatooine::simple_tri_mesh::read_vtk::listener_t	typeref:typename:void
on_dataset_type	include/tatooine/vtk_legacy.h	/^  virtual void on_dataset_type(DatasetType) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_dimensions	include/tatooine/grid_sampler.h	/^      void on_dimensions(size_t x, size_t y, size_t z) override {$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_dimensions	include/tatooine/grid_sampler.h	/^      void on_dimensions(size_t x, size_t y, size_t z) override {$/;"	f	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:void
on_dimensions	include/tatooine/vtk_legacy.h	/^  virtual void on_dimensions(size_t \/*x*\/, size_t \/*y*\/, size_t \/*z*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_end_of_iteration	include/tatooine/simulated_annealing.h	/^  virtual void on_end_of_iteration(size_t \/*i*\/, const Energy & \/*best_energy*\/,$/;"	f	struct:tatooine::simulated_annealing_listener	typeref:typename:void
on_field_array	include/tatooine/vtk_legacy.h	/^  virtual void on_field_array(const std::string \/*field_name*\/,$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_format	include/tatooine/vtk_legacy.h	/^  virtual void on_format(Format) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_going_back	include/tatooine/simulated_annealing.h	/^  virtual void on_going_back(size_t \/*i*\/, const Energy & \/*best_energy*\/,$/;"	f	struct:tatooine::simulated_annealing_listener	typeref:typename:void
on_grid	include/tatooine/sampled_field.h	/^    auto on_grid = [&] {$/;"	m	struct:tatooine::sampled_field	typeref:typename:auto
on_key_pressed	include/tatooine/gpu/first_person_window.h	/^  void on_key_pressed(yavin::key k) override {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
on_key_pressed	include/tatooine/gpu/first_person_window.h	/^  void on_key_pressed(yavin::key k) override {this->get()(k);}$/;"	f	struct:tatooine::key_pressed_event	typeref:typename:void
on_key_pressed	include/tatooine/gpu/first_person_window.h	/^  void on_key_pressed(yavin::key k) override {this->get()(k);}$/;"	f	struct:tatooine::key_released_event	typeref:typename:void
on_key_released	include/tatooine/gpu/first_person_window.h	/^  void on_key_released(yavin::key k) override {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
on_lines	include/tatooine/line.h	/^      void on_lines(const std::vector<std::vector<int>>& lines_) override {$/;"	f	struct:tatooine::line::read_vtk::reader	typeref:typename:void
on_lines	include/tatooine/vtk_legacy.h	/^  virtual void on_lines(const std::vector<std::vector<int>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_mouse_motion	include/tatooine/gpu/first_person_window.h	/^  void on_mouse_motion(int x, int y) override {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
on_new_best_status	include/tatooine/simulated_annealing.h	/^  virtual void on_new_best_status(size_t \/*i*\/, const Energy & \/*best_energy*\/,$/;"	f	struct:tatooine::simulated_annealing_listener	typeref:typename:void
on_normals	include/tatooine/vtk_legacy.h	/^  virtual void on_normals($/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_normals	include/tatooine/vtk_legacy.h	/^  virtual void on_normals(const std::string & \/*name*\/,$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_origin	include/tatooine/grid_sampler.h	/^      void on_origin(Real x, Real y, Real z) override { origin = {x, y, z}; }$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_origin	include/tatooine/grid_sampler.h	/^      void on_origin(Real x, Real y, Real z) override { origin = {x, y, z}; }$/;"	f	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:void
on_origin	include/tatooine/vtk_legacy.h	/^  virtual void on_origin(double \/*x*\/, double \/*y*\/, double \/*z*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_point_data	include/tatooine/vtk_legacy.h	/^  virtual void on_point_data(size_t) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_points	include/tatooine/line.h	/^      void on_points(const std::vector<std::array<Real, 3>>& points_) override {$/;"	f	struct:tatooine::line::read_vtk::reader	typeref:typename:void
on_points	include/tatooine/simple_tri_mesh.h	/^      void on_points(const std::vector<std::array<double, 3>>& ps) override {$/;"	f	struct:tatooine::simple_tri_mesh::read_vtk::listener_t	typeref:typename:void
on_points	include/tatooine/simple_tri_mesh.h	/^      void on_points(const std::vector<std::array<float, 3>>& ps) override {$/;"	f	struct:tatooine::simple_tri_mesh::read_vtk::listener_t	typeref:typename:void
on_points	include/tatooine/vtk_legacy.h	/^  virtual void on_points(const std::vector<std::array<double, 3>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_points	include/tatooine/vtk_legacy.h	/^  virtual void on_points(const std::vector<std::array<float, 3>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_polygons	include/tatooine/simple_tri_mesh.h	/^      void on_polygons(const std::vector<std::vector<int>>& ps) override {$/;"	f	struct:tatooine::simple_tri_mesh::read_vtk::listener_t	typeref:typename:void
on_polygons	include/tatooine/vtk_legacy.h	/^  virtual void on_polygons(const std::vector<std::vector<int>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_resize	include/tatooine/gpu/first_person_window.h	/^  void on_resize(int w, int h) override {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
on_scalars	include/tatooine/grid_sampler.h	/^      void on_scalars(const std::string& data_name,$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_scalars	include/tatooine/grid_sampler.h	/^      void on_scalars(const std::string& data_name,$/;"	f	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:void
on_scalars	include/tatooine/simple_tri_mesh.h	/^      void on_scalars(const std::string& data_name,$/;"	f	struct:tatooine::simple_tri_mesh::read_vtk::listener_t	typeref:typename:void
on_scalars	include/tatooine/vtk_legacy.h	/^  virtual void on_scalars(const std::string & \/*data_name*\/,$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_spacing	include/tatooine/grid_sampler.h	/^      void on_spacing(Real x, Real y, Real z) override { spacing = {x, y, z}; }$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_spacing	include/tatooine/grid_sampler.h	/^      void on_spacing(Real x, Real y, Real z) override { spacing = {x, y, z}; }$/;"	f	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:void
on_spacing	include/tatooine/vtk_legacy.h	/^  virtual void on_spacing(double \/*x*\/, double \/*y*\/, double \/*z*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_tensors	include/tatooine/vtk_legacy.h	/^  virtual void on_tensors($/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_tensors	include/tatooine/vtk_legacy.h	/^  virtual void on_tensors(const std::string & \/*name*\/,$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_texture_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_texture_coordinates($/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_title	include/tatooine/vtk_legacy.h	/^  virtual void on_title(const std::string &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_triangle_strips	include/tatooine/vtk_legacy.h	/^  virtual void on_triangle_strips(const std::vector<std::vector<int>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_using_worse	include/tatooine/simulated_annealing.h	/^  virtual void on_using_worse(size_t \/*i*\/, const Energy & \/*best_energy*\/,$/;"	f	struct:tatooine::simulated_annealing_listener	typeref:typename:void
on_vectors	include/tatooine/grid_sampler.h	/^      void on_vectors(const std::string& \/* name *\/,$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_vectors	include/tatooine/vtk_legacy.h	/^  virtual void on_vectors($/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_vectors	include/tatooine/vtk_legacy.h	/^  virtual void on_vectors(const std::string & \/*name*\/,$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_version	include/tatooine/vtk_legacy.h	/^  virtual void on_version(unsigned short \/*major*\/, unsigned short \/*minor*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_vertices	include/tatooine/vtk_legacy.h	/^  virtual void on_vertices(const std::vector<std::vector<int>> &) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_x_coordinates	include/tatooine/grid_sampler.h	/^      void on_x_coordinates(const std::vector<Real>& xs) override {$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_x_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_x_coordinates(const std::vector<double> & \/*xs*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_x_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_x_coordinates(const std::vector<float> & \/*xs*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_y_coordinates	include/tatooine/grid_sampler.h	/^      void on_y_coordinates(const std::vector<Real>& ys) override {$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_y_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_y_coordinates(const std::vector<double> & \/*ys*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_y_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_y_coordinates(const std::vector<float> & \/*ys*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_z_coordinates	include/tatooine/grid_sampler.h	/^      void on_z_coordinates(const std::vector<Real>& zs) override {$/;"	f	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:void
on_z_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_z_coordinates(const std::vector<double> & \/*zs*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
on_z_coordinates	include/tatooine/vtk_legacy.h	/^  virtual void on_z_coordinates(const std::vector<float> & \/*zs*\/) {}$/;"	f	struct:tatooine::vtk::legacy_file_listener	typeref:typename:void
ones	include/tatooine/multidim_array.h	/^  static auto ones(Resolution... resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
ones	include/tatooine/multidim_array.h	/^  static auto ones(const std::array<UInt, N>& resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
ones	include/tatooine/multidim_array.h	/^  static auto ones(const std::vector<UInt>& resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
ones	include/tatooine/multidim_array.h	/^  static constexpr auto ones() { return this_t{tatooine::ones}; }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto
ones	include/tatooine/multidim_array.h	/^static constexpr ones_t ones;$/;"	v	namespace:tatooine	typeref:typename:ones_t
ones	include/tatooine/tensor.h	/^  static constexpr auto ones() { return this_t{fill<Real>{1}}; }$/;"	f	struct:tatooine::tensor	typeref:typename:auto
ones_t	include/tatooine/multidim_array.h	/^struct ones_t {};$/;"	s	namespace:tatooine
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx11, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx11, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx11, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx11, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx11, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx11, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx14, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx14, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx14, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx14, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx14, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx14, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx17, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx17, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx17, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx17, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx17, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx17, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx20, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx20, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx20, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx20, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx20, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx20, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx98, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx98, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx98, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx98, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx98, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/cxxstd.h	/^constexpr inline bool operator!=(_cxx98, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator !=	include/tatooine/edgeset.h	/^    bool operator!=(const edge& other) const { return this->i != other.i; }$/;"	f	struct:tatooine::edgeset::edge	typeref:typename:bool
operator !=	include/tatooine/grid_edge.h	/^  bool operator!=(const grid_edge& other) const { return !operator==(other); }$/;"	f	struct:tatooine::grid_edge	typeref:typename:bool
operator !=	include/tatooine/grid_sampler.h	/^  bool operator!=(const this_t& other) const {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:bool
operator !=	include/tatooine/grid_vertex.h	/^  auto operator!=(const grid_vertex_iterator& other) { return v != other.v; }$/;"	f	struct:tatooine::grid_vertex_iterator	typeref:typename:auto
operator !=	include/tatooine/grid_vertex.h	/^  constexpr bool operator!=(const grid_vertex& other) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:bool
operator !=	include/tatooine/line.h	/^    bool operator!=(tangent_idx other) const { return this->i != other.i; }$/;"	f	struct:tatooine::line::tangent_idx	typeref:typename:bool
operator !=	include/tatooine/line.h	/^    bool operator!=(vertex_idx other) const { return this->i != other.i; }$/;"	f	struct:tatooine::line::vertex_idx	typeref:typename:bool
operator !=	include/tatooine/mesh.h	/^    bool operator!=(const face& other) const { return this->i != other.i; }$/;"	f	struct:tatooine::mesh::face	typeref:typename:bool
operator !=	include/tatooine/multidim.h	/^    constexpr auto operator!=(const iterator& other) const {$/;"	f	struct:tatooine::dynamic_multidim::iterator	typeref:typename:auto
operator !=	include/tatooine/multidim.h	/^  constexpr auto operator!=(const static_multidim_iterator& other) const {$/;"	f	struct:tatooine::static_multidim_iterator	typeref:typename:auto
operator !=	include/tatooine/multidim_resolution.h	/^  bool operator!=($/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:bool
operator !=	include/tatooine/pointset.h	/^    bool operator!=(vertex other) const { return this->i != other.i; }$/;"	f	struct:tatooine::pointset::vertex	typeref:typename:bool
operator !=	include/tatooine/simple_tri_mesh.h	/^    constexpr bool operator!=(face other) const { return this->i != other.i; }$/;"	f	struct:tatooine::simple_tri_mesh::face	typeref:typename:bool
operator !=	include/tatooine/subgrid.h	/^  bool operator!=(const vertex_iterator& other) { return v != other.v; }$/;"	f	struct:tatooine::subgrid::vertex_iterator	typeref:typename:bool
operator ()	include/tatooine/chunked_data.h	/^  T operator()(Indices... indices) const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T
operator ()	include/tatooine/chunked_data.h	/^  T operator()(const std::array<S, N>& indices) const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T
operator ()	include/tatooine/chunked_data.h	/^  T& operator()(Indices... indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
operator ()	include/tatooine/chunked_data.h	/^  T& operator()(const base_tensor<Tensor, S, N>& indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
operator ()	include/tatooine/chunked_data.h	/^  T& operator()(const std::array<S, N>& indices) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
operator ()	include/tatooine/counterexample_sadlo.h	/^    auto         operator()(Real t) const { return at(t); }$/;"	f	struct:tatooine::numerical::counterexample_sadlo::bifurcationline_spacetime_t	typeref:typename:auto
operator ()	include/tatooine/counterexample_sadlo.h	/^    auto         operator()(Real t) const { return at(t); }$/;"	f	struct:tatooine::numerical::counterexample_sadlo::bifurcationline_t	typeref:typename:auto
operator ()	include/tatooine/curve_to_streamline.h	/^  auto operator()(const field<V, Real, 3, 3>& v, Real t0, Line line,$/;"	f	struct:tatooine::curve_to_streamline	typeref:typename:auto
operator ()	include/tatooine/edgeset.h	/^    auto operator()(const std::array<vertex, 2>& lhs,$/;"	f	struct:tatooine::edgeset::order_dependent_edge_equal	typeref:typename:auto
operator ()	include/tatooine/edgeset.h	/^    bool operator()(const std::array<vertex, 2>& lhs,$/;"	f	struct:tatooine::edgeset::order_dependent_edge_compare	typeref:typename:bool
operator ()	include/tatooine/edgeset.h	/^    bool operator()(const std::array<vertex, 2>& lhs,$/;"	f	struct:tatooine::edgeset::order_independent_edge_compare	typeref:typename:bool
operator ()	include/tatooine/edgeset.h	/^    bool operator()(const std::array<vertex, 2>& lhs,$/;"	f	struct:tatooine::edgeset::order_independent_edge_equal	typeref:typename:bool
operator ()	include/tatooine/field.h	/^  constexpr tensor_t operator()(const pos_t& x, Real t = 0) const {$/;"	f	struct:tatooine::field	typeref:typename:tensor_t
operator ()	include/tatooine/flowmap.h	/^  constexpr tensor_t operator()(const pos_t& x, real_t t0, real_t tau) const {$/;"	f	struct:tatooine::flowmap	typeref:typename:tensor_t
operator ()	include/tatooine/for_loop.h	/^  auto operator()(Iteration&& iteration) const {$/;"	f	struct:tatooine::detail::for_loop_impl	typeref:typename:auto
operator ()	include/tatooine/for_loop.h	/^  constexpr auto operator()(Iteration&& iteration) const {$/;"	f	struct:tatooine::detail::for_loop_impl	typeref:typename:auto
operator ()	include/tatooine/grid.h	/^  auto operator()(Is... is) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
operator ()	include/tatooine/grid_sampler.h	/^  auto operator()(Xs... xs) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
operator ()	include/tatooine/grid_sampler.h	/^  auto operator()(const base_tensor<Tensor, TensorReal, N>& xs) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
operator ()	include/tatooine/grid_sampler.h	/^  auto operator()(const std::array<Real, N>& xs) const { return sample(xs); }$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
operator ()	include/tatooine/interpolation.h	/^  constexpr auto operator()(Real t) const { return evaluate(t); }$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:auto
operator ()	include/tatooine/interpolation.h	/^  constexpr auto operator()(Real t) const { return evaluate(t); }$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:auto
operator ()	include/tatooine/line.h	/^  auto operator()(const Real t) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
operator ()	include/tatooine/mesh.h	/^    bool operator()(const std::vector<vertex>& lhs,$/;"	f	struct:tatooine::mesh::rotation_independent_face_equal	typeref:typename:bool
operator ()	include/tatooine/modified_doublegyre.h	/^    auto operator()(Real t) const { return at(t); }$/;"	f	struct:tatooine::numerical::modified_doublegyre::bifurcationline_spacetime_t	typeref:typename:auto
operator ()	include/tatooine/modified_doublegyre.h	/^    auto operator()(Real t) const { return at(t); }$/;"	f	struct:tatooine::numerical::modified_doublegyre::bifurcationline_t	typeref:typename:auto
operator ()	include/tatooine/multidim_array.h	/^  auto& operator()(Is... is) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
operator ()	include/tatooine/multidim_array.h	/^  auto& operator()(const std::array<UInt, N>& is) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
operator ()	include/tatooine/multidim_array.h	/^  auto& operator()(const std::vector<UInt>& is) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
operator ()	include/tatooine/multidim_array.h	/^  const auto& operator()(Is... is) const {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
operator ()	include/tatooine/multidim_array.h	/^  const auto& operator()(const std::array<UInt, N>& is) const {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
operator ()	include/tatooine/multidim_array.h	/^  const auto& operator()(const std::vector<UInt>& is) const {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
operator ()	include/tatooine/multidim_array.h	/^  constexpr auto& operator()(Is... is) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
operator ()	include/tatooine/multidim_array.h	/^  constexpr auto& operator()(const std::array<UInt, num_dimensions()>& is) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
operator ()	include/tatooine/multidim_array.h	/^  constexpr const auto& operator()($/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
operator ()	include/tatooine/multidim_array.h	/^  constexpr const auto& operator()(Is... is) const {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
operator ()	include/tatooine/parameterized_mesh.h	/^  auto operator()(Real u, Real v) const { return sample(u, v); }$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto
operator ()	include/tatooine/polynomial.h	/^  constexpr auto operator()(Real x) const { return evaluate(x); }$/;"	f	struct:tatooine::polynomial	typeref:typename:auto
operator ()	include/tatooine/polynomial_line.h	/^  constexpr auto operator()(Real t) const { return evaluate(t); }$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
operator ()	include/tatooine/random.h	/^  auto operator()() { return get(); }$/;"	f	struct:tatooine::random_normal	typeref:typename:auto
operator ()	include/tatooine/random.h	/^  auto operator()() { return get(); }$/;"	f	struct:tatooine::random_uniform	typeref:typename:auto
operator ()	include/tatooine/streamsurface.h	/^  auto operator()(Real u, Real v) const { return sample(u, v); }$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
operator ()	include/tatooine/streamsurface.h	/^  auto operator()(Real u, Real v, Real cache_bw_tau, Real cache_fw_tau) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
operator ()	include/tatooine/tensor.h	/^  constexpr auto& operator()(const size_t r, const size_t c) {$/;"	f	struct:tatooine::transposed_matrix	typeref:typename:auto &
operator ()	include/tatooine/tensor.h	/^  constexpr const auto& operator()(const size_t r, const size_t c) const {$/;"	f	struct:tatooine::const_transposed_matrix	typeref:typename:const auto &
operator ()	include/tatooine/tensor.h	/^  constexpr const auto& operator()(const size_t r, const size_t c) const {$/;"	f	struct:tatooine::transposed_matrix	typeref:typename:const auto &
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Indices... indices) const {$/;"	f	struct:tatooine::const_imag_complex_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Indices... indices) const {$/;"	f	struct:tatooine::const_real_complex_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Indices... indices) const {$/;"	f	struct:tatooine::imag_complex_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Indices... indices) const {$/;"	f	struct:tatooine::real_complex_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Indices... indices) {$/;"	f	struct:tatooine::imag_complex_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Indices... indices) {$/;"	f	struct:tatooine::real_complex_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Is... is) const {$/;"	f	struct:tatooine::base_tensor	typeref:typename:decltype (auto)
operator ()	include/tatooine/tensor.h	/^  constexpr decltype(auto) operator()(const Is... is) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:decltype (auto)
operator *	include/tatooine/field.h	/^constexpr auto operator*(const field<LhsField, LhsReal, Dims...>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator *	include/tatooine/field.h	/^constexpr auto operator*(const field<LhsField, LhsReal, N, TM, TN>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator *	include/tatooine/grid_edge.h	/^  auto operator*() const { return as_position_pair(); }$/;"	f	struct:tatooine::grid_edge	typeref:typename:auto
operator *	include/tatooine/grid_sampler.h	/^  auto operator*() const { return m_grid->at(m_index); }$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto
operator *	include/tatooine/grid_vertex.h	/^  auto&                  operator*() { return v; }$/;"	f	struct:tatooine::grid_vertex_iterator	typeref:typename:auto &
operator *	include/tatooine/grid_vertex_edges.h	/^    auto operator*() {$/;"	f	struct:tatooine::grid_vertex_edges::iterator	typeref:typename:auto
operator *	include/tatooine/multidim.h	/^    const auto& operator*() const { return m_status; }$/;"	f	struct:tatooine::dynamic_multidim::iterator	typeref:typename:const auto &
operator *	include/tatooine/multidim.h	/^  constexpr auto operator*() const { return m_status; }$/;"	f	struct:tatooine::static_multidim_iterator	typeref:typename:auto
operator *	include/tatooine/subgrid.h	/^  auto operator*() { return v; }$/;"	f	struct:tatooine::subgrid::vertex_iterator	typeref:typename:auto
operator *	include/tatooine/symbolic_field.h	/^constexpr auto operator*(const field<LhsReal, N, D0, D1>& lhs,$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
operator *	include/tatooine/symbolic_field.h	/^constexpr auto operator*(const field<LhsReal, TensorDims...>& lhs,$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
operator *	include/tatooine/tensor.h	/^constexpr auto operator*(const ScalarReal                                scalar,$/;"	f	namespace:tatooine	typeref:typename:auto
operator *	include/tatooine/tensor.h	/^constexpr auto operator*(const base_tensor<LhsTensor, LhsReal, Dims...>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator *	include/tatooine/tensor.h	/^constexpr auto operator*(const base_tensor<LhsTensor, LhsReal, M, N>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator *	include/tatooine/tensor.h	/^constexpr auto operator*(const base_tensor<Tensor, TensorReal, Dims...>& t,$/;"	f	namespace:tatooine	typeref:typename:auto
operator *=	include/tatooine/tensor.h	/^  auto& operator*=(const OtherReal& other) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator +	include/tatooine/field.h	/^constexpr auto operator+($/;"	f	namespace:tatooine	typeref:typename:auto
operator +	include/tatooine/grid.h	/^auto operator+(const grid<Real, N>&  grid,$/;"	f	namespace:tatooine	typeref:typename:auto
operator +	include/tatooine/grid.h	/^auto operator+(const linspace<Real>& additional_dimension,$/;"	f	namespace:tatooine	typeref:typename:auto
operator +	include/tatooine/grid_sampler.h	/^  auto operator+(size_t rhs) { return this_t{m_grid, m_index + rhs}; }$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto
operator +	include/tatooine/symbolic_field.h	/^constexpr auto operator+(const field<LhsReal, N, TensorDims...>& lhs,$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
operator +	include/tatooine/tensor.h	/^constexpr auto operator+(const base_tensor<LhsTensor, LhsReal, Dims...>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator ++	include/tatooine/grid_sampler.h	/^  auto& operator++() {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto &
operator ++	include/tatooine/grid_vertex.h	/^  auto&                  operator++() {$/;"	f	struct:tatooine::grid_vertex_iterator	typeref:typename:auto &
operator ++	include/tatooine/grid_vertex.h	/^  auto& operator++() {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto &
operator ++	include/tatooine/grid_vertex_neighbors.h	/^    auto& operator++() {$/;"	f	struct:tatooine::grid_vertex_neighbors::iterator	typeref:typename:auto &
operator ++	include/tatooine/handle.h	/^  auto& operator++() {$/;"	f	struct:tatooine::handle	typeref:typename:auto &
operator ++	include/tatooine/multidim.h	/^    void operator++() {$/;"	f	struct:tatooine::dynamic_multidim::iterator	typeref:typename:void
operator ++	include/tatooine/multidim.h	/^  constexpr void operator++() {$/;"	f	struct:tatooine::static_multidim_iterator	typeref:typename:void
operator ++	include/tatooine/subgrid.h	/^  auto& operator++() {$/;"	f	struct:tatooine::subgrid::vertex_iterator	typeref:typename:auto &
operator +=	include/tatooine/boundingbox.h	/^  constexpr void operator+=(const pos_t& point) {$/;"	f	struct:tatooine::boundingbox	typeref:typename:void
operator +=	include/tatooine/grid_sampler.h	/^  auto& operator+=(size_t rhs) {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto &
operator +=	include/tatooine/tensor.h	/^  auto& operator+=(const OtherReal& other) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator +=	include/tatooine/tensor.h	/^  auto& operator+=(const base_tensor<OtherTensor, OtherReal, Dims...>& other) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator -	include/tatooine/field.h	/^constexpr auto operator-(const field<Field, Real, N, TensorDims...>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto
operator -	include/tatooine/grid_sampler.h	/^  auto operator-(size_t rhs) { return this_t{m_grid, m_index - rhs}; }$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto
operator -	include/tatooine/symbolic_field.h	/^constexpr auto operator-(const field<LhsReal, N, TensorDims...>& lhs,$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
operator -	include/tatooine/tensor.h	/^constexpr auto operator-(const base_tensor<LhsTensor, LhsReal, Dims...>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator -	include/tatooine/tensor.h	/^constexpr auto operator-(const base_tensor<Tensor, Real, Dims...>& t) {$/;"	f	namespace:tatooine	typeref:typename:auto
operator --	include/tatooine/grid_sampler.h	/^  auto& operator--() {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto &
operator --	include/tatooine/grid_vertex.h	/^  auto& operator--() {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto &
operator --	include/tatooine/grid_vertex.h	/^  auto& operator--() {$/;"	f	struct:tatooine::grid_vertex_iterator	typeref:typename:auto &
operator --	include/tatooine/grid_vertex_neighbors.h	/^    auto& operator--() {$/;"	f	struct:tatooine::grid_vertex_neighbors::iterator	typeref:typename:auto &
operator --	include/tatooine/handle.h	/^  auto& operator--() {$/;"	f	struct:tatooine::handle	typeref:typename:auto &
operator --	include/tatooine/subgrid.h	/^  auto& operator--() {$/;"	f	struct:tatooine::subgrid::vertex_iterator	typeref:typename:auto &
operator -=	include/tatooine/grid_sampler.h	/^  auto& operator-=(size_t rhs) {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:auto &
operator -=	include/tatooine/tensor.h	/^  auto& operator-=(const OtherReal& other) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator -=	include/tatooine/tensor.h	/^  auto& operator-=(const base_tensor<OtherTensor, OtherReal, Dims...>& other) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator /	include/tatooine/symbolic_field.h	/^constexpr auto operator\/(const field<LhsReal, TensorDims...>& lhs,$/;"	f	namespace:tatooine::symbolic	typeref:typename:auto
operator /	include/tatooine/tensor.h	/^constexpr auto operator\/(const ScalarReal                                scalar,$/;"	f	namespace:tatooine	typeref:typename:auto
operator /	include/tatooine/tensor.h	/^constexpr auto operator\/(const base_tensor<LhsTensor, LhsReal, Dims...>& lhs,$/;"	f	namespace:tatooine	typeref:typename:auto
operator /	include/tatooine/tensor.h	/^constexpr auto operator\/(const base_tensor<Tensor, TensorReal, Dims...>& t,$/;"	f	namespace:tatooine	typeref:typename:auto
operator /=	include/tatooine/tensor.h	/^  auto& operator\/=(const OtherReal& other) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx11, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx11, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx11, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx11, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx11, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx11, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx14, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx14, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx14, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx14, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx14, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx14, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx17, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx17, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx17, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx17, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx17, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx17, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx20, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx20, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx20, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx20, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx20, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx20, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx98, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx98, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx98, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx98, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx98, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/cxxstd.h	/^constexpr inline bool operator<(_cxx98, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <	include/tatooine/edgeset.h	/^    bool operator<(const edge& other) const { return this->i < other.i; }$/;"	f	struct:tatooine::edgeset::edge	typeref:typename:bool
operator <	include/tatooine/grid_edge.h	/^  bool operator<(const grid_edge& other) const {$/;"	f	struct:tatooine::grid_edge	typeref:typename:bool
operator <	include/tatooine/grid_sampler.h	/^  bool operator<(const this_t& other) const { return m_index < other.m_index; }$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:bool
operator <	include/tatooine/grid_vertex.h	/^  constexpr bool operator<(const grid_vertex& other) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:bool
operator <	include/tatooine/line.h	/^    bool operator<(tangent_idx other) const { return this->i < other.i; }$/;"	f	struct:tatooine::line::tangent_idx	typeref:typename:bool
operator <	include/tatooine/line.h	/^    bool operator<(vertex_idx other) const { return this->i < other.i; }$/;"	f	struct:tatooine::line::vertex_idx	typeref:typename:bool
operator <	include/tatooine/mesh.h	/^    bool operator<(const face& other) const { return this->i < other.i; }$/;"	f	struct:tatooine::mesh::face	typeref:typename:bool
operator <	include/tatooine/pointset.h	/^    bool operator<(vertex other) const { return this->i < other.i; }$/;"	f	struct:tatooine::pointset::vertex	typeref:typename:bool
operator <	include/tatooine/simple_tri_mesh.h	/^    constexpr bool operator<(face other) const { return this->i < other.i; }$/;"	f	struct:tatooine::simple_tri_mesh::face	typeref:typename:bool
operator <	include/tatooine/tensor.h	/^  bool operator<(const tensor<OtherReal, Dims...>& other) const {$/;"	f	struct:tatooine::tensor	typeref:typename:bool
operator <<	include/tatooine/boundingbox.h	/^auto& operator<<(std::ostream& out, const boundingbox<Real, N>& bb) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <<	include/tatooine/grid_edge.h	/^inline auto& operator<<(std::ostream& out, const grid_edge<Real, N>& e) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <<	include/tatooine/grid_vertex.h	/^inline auto& operator<<(std::ostream& out, const grid_vertex<Real, N>& v) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <<	include/tatooine/linspace.h	/^auto& operator<<(std::ostream& out, const linspace<Real>& l) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <<	include/tatooine/polynomial.h	/^auto& operator<<(std::ostream& out, const polynomial<Real, Degree>& f) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <<	include/tatooine/tensor.h	/^auto& operator<<(std::ostream& out, const base_tensor<Tensor, Real, M, N>& m) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <<	include/tatooine/tensor.h	/^auto& operator<<(std::ostream& out, const base_tensor<Tensor, Real, N>& v) {$/;"	f	namespace:tatooine	typeref:typename:auto &
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx11, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx11, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx11, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx11, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx11, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx11, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx14, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx14, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx14, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx14, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx14, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx14, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx17, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx17, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx17, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx17, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx17, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx17, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx20, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx20, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx20, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx20, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx20, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx20, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx98, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx98, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx98, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx98, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx98, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/cxxstd.h	/^constexpr inline bool operator<=(_cxx98, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator <=	include/tatooine/grid_edge.h	/^  bool operator<=(const grid_edge& other) const {$/;"	f	struct:tatooine::grid_edge	typeref:typename:bool
operator <=	include/tatooine/grid_sampler.h	/^  bool operator<=(const this_t& other) const {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:bool
operator <=	include/tatooine/grid_vertex.h	/^  constexpr bool operator<=(const grid_vertex& other) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:bool
operator =	include/tatooine/cache.h	/^  auto& operator=(const cache& other) {$/;"	f	class:tatooine::cache	typeref:typename:auto &
operator =	include/tatooine/chunked_data.h	/^  auto& operator=(const Container& container) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto &
operator =	include/tatooine/chunked_data.h	/^  chunked_data& operator=(const chunked_data& other) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:chunked_data &
operator =	include/tatooine/edgeset.h	/^  auto& operator=(const edgeset& other) {$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
operator =	include/tatooine/edgeset.h	/^  auto& operator=(edgeset&& other) {$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
operator =	include/tatooine/grid.h	/^  constexpr auto& operator=(const grid& other) {$/;"	f	class:tatooine::grid	typeref:typename:auto &
operator =	include/tatooine/grid.h	/^  constexpr auto& operator=(const grid<OtherReal, N>& other) {$/;"	f	class:tatooine::grid	typeref:typename:auto &
operator =	include/tatooine/grid.h	/^  constexpr auto& operator=(grid&& other) noexcept {$/;"	f	class:tatooine::grid	typeref:typename:auto &
operator =	include/tatooine/grid_edge.h	/^  auto& operator=(const grid_edge& e) {$/;"	f	struct:tatooine::grid_edge	typeref:typename:auto &
operator =	include/tatooine/grid_edge.h	/^  auto& operator=(grid_edge&& e) {$/;"	f	struct:tatooine::grid_edge	typeref:typename:auto &
operator =	include/tatooine/grid_sampler.h	/^  auto& operator=(base_grid_sampler&& other) noexcept {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto &
operator =	include/tatooine/grid_sampler.h	/^  auto& operator=(const base_grid_sampler& other) {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto &
operator =	include/tatooine/grid_sampler.h	/^  auto& operator=(const grid<OtherReal, N>& other) {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto &
operator =	include/tatooine/grid_sampler.h	/^  auto& operator=(const grid_sampler& other) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto &
operator =	include/tatooine/grid_sampler.h	/^  auto& operator=(grid<OtherReal, N>&& other) {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto &
operator =	include/tatooine/grid_sampler.h	/^  auto& operator=(grid_sampler&& other) noexcept {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:auto &
operator =	include/tatooine/grid_vertex.h	/^  auto& operator=(const grid_vertex<Real, N>& other) {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto &
operator =	include/tatooine/grid_vertex.h	/^  auto& operator=(grid_vertex<Real, N>&& other) {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto &
operator =	include/tatooine/handle.h	/^  auto& operator=(std::size_t i) {$/;"	f	struct:tatooine::handle	typeref:typename:auto &
operator =	include/tatooine/line.h	/^  auto& operator=(const parameterized_line& other) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
operator =	include/tatooine/line.h	/^  auto& operator=(parameterized_line&& other) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
operator =	include/tatooine/line.h	/^  line& operator=(const line& other) {$/;"	f	struct:tatooine::line	typeref:typename:line &
operator =	include/tatooine/linspace.h	/^  auto& operator=(const linspace_iterator& other) {$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:auto &
operator =	include/tatooine/linspace.h	/^  constexpr auto& operator=(const linspace<OtherReal>& other) noexcept {$/;"	f	struct:tatooine::linspace	typeref:typename:auto &
operator =	include/tatooine/mesh.h	/^  auto& operator=(const mesh& other) {$/;"	f	class:tatooine::mesh	typeref:typename:auto &
operator =	include/tatooine/mesh.h	/^  auto& operator=(mesh&& other) {$/;"	f	class:tatooine::mesh	typeref:typename:auto &
operator =	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array& operator=($/;"	f	class:tatooine::static_multidim_array	typeref:typename:static_multidim_array &
operator =	include/tatooine/multidim_array.h	/^  dynamic_multidim_array& operator=($/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:dynamic_multidim_array &
operator =	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution& operator=($/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:dynamic_multidim_resolution &
operator =	include/tatooine/multidim_resolution.h	/^  dynamic_multidim_resolution& operator=(dynamic_multidim_resolution&& other) {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:dynamic_multidim_resolution &
operator =	include/tatooine/parameterized_mesh.h	/^  auto& operator=(const parameterized_mesh& other) {$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto &
operator =	include/tatooine/parameterized_mesh.h	/^  auto& operator=(parameterized_mesh&& other) {$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto &
operator =	include/tatooine/pointset.h	/^  auto& operator=(const pointset& other) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
operator =	include/tatooine/pointset.h	/^  auto& operator=(pointset&& other) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
operator =	include/tatooine/property.h	/^  auto& operator=(const deque_property_impl& other) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto &
operator =	include/tatooine/property.h	/^  auto& operator=(const vector_property_impl& other) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto &
operator =	include/tatooine/property.h	/^  auto& operator=(deque_property_impl&& other) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto &
operator =	include/tatooine/property.h	/^  auto& operator=(vector_property_impl&& other) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto &
operator =	include/tatooine/simple_tri_mesh.h	/^  simple_tri_mesh& operator=(const simple_tri_mesh& other) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:simple_tri_mesh &
operator =	include/tatooine/streamsurface.h	/^  auto& operator=(const this_t& other) {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto &
operator =	include/tatooine/streamsurface.h	/^  auto& operator=(this_t&& other) noexcept {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto &
operator =	include/tatooine/tensor.h	/^  constexpr auto& operator=($/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
operator =	include/tatooine/tensor.h	/^  constexpr auto& operator=($/;"	f	struct:tatooine::tensor	typeref:typename:auto &
operator =	include/tatooine/tensor.h	/^  constexpr mat& operator=(mat&& other) noexcept {$/;"	f	struct:tatooine::mat	typeref:typename:mat &
operator =	include/tatooine/tensor.h	/^  constexpr tensor& operator=(tensor&& other) noexcept {$/;"	f	struct:tatooine::tensor	typeref:typename:tensor &
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx11, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx11, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx11, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx11, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx11, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx11, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx14, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx14, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx14, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx14, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx14, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx14, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx17, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx17, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx17, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx17, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx17, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx17, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx20, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx20, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx20, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx20, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx20, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx20, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx98, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx98, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx98, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx98, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx98, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/cxxstd.h	/^constexpr inline bool operator==(_cxx98, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator ==	include/tatooine/edgeset.h	/^    bool operator==(const edge& other) const { return this->i == other.i; }$/;"	f	struct:tatooine::edgeset::edge	typeref:typename:bool
operator ==	include/tatooine/grid_edge.h	/^  bool operator==(const grid_edge& other) const {$/;"	f	struct:tatooine::grid_edge	typeref:typename:bool
operator ==	include/tatooine/grid_sampler.h	/^  bool operator==(const this_t& other) const {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:bool
operator ==	include/tatooine/grid_vertex.h	/^  auto operator==(const grid_vertex_iterator& other) { return v == other.v; }$/;"	f	struct:tatooine::grid_vertex_iterator	typeref:typename:auto
operator ==	include/tatooine/grid_vertex.h	/^  constexpr bool operator==(const grid_vertex& other) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:bool
operator ==	include/tatooine/line.h	/^    bool operator==(tangent_idx other) const { return this->i == other.i; }$/;"	f	struct:tatooine::line::tangent_idx	typeref:typename:bool
operator ==	include/tatooine/line.h	/^    bool operator==(vertex_idx other) const { return this->i == other.i; }$/;"	f	struct:tatooine::line::vertex_idx	typeref:typename:bool
operator ==	include/tatooine/mesh.h	/^    bool operator==(const face& other) const { return this->i == other.i; }$/;"	f	struct:tatooine::mesh::face	typeref:typename:bool
operator ==	include/tatooine/multidim.h	/^    constexpr auto operator==(const iterator& other) const {$/;"	f	struct:tatooine::dynamic_multidim::iterator	typeref:typename:auto
operator ==	include/tatooine/multidim.h	/^  constexpr auto operator==(const static_multidim_iterator& other) const {$/;"	f	struct:tatooine::static_multidim_iterator	typeref:typename:auto
operator ==	include/tatooine/multidim_resolution.h	/^  bool operator==($/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:bool
operator ==	include/tatooine/pointset.h	/^    bool operator==(vertex other) const { return this->i == other.i; }$/;"	f	struct:tatooine::pointset::vertex	typeref:typename:bool
operator ==	include/tatooine/simple_tri_mesh.h	/^    constexpr bool operator==(face other) const { return this->i == other.i; }$/;"	f	struct:tatooine::simple_tri_mesh::face	typeref:typename:bool
operator ==	include/tatooine/subgrid.h	/^  bool operator==(const vertex_iterator& other) { return v == other.v; }$/;"	f	struct:tatooine::subgrid::vertex_iterator	typeref:typename:bool
operator ==	include/tatooine/tensor.h	/^  bool operator==(const tensor<OtherReal, Dims...>& other) const {$/;"	f	struct:tatooine::tensor	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx, _cxx  ) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx11, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx11, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx11, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx11, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx11, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx11, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx14, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx14, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx14, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx14, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx14, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx14, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx17, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx17, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx17, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx17, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx17, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx17, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx20, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx20, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx20, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx20, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx20, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx20, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx98, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx98, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx98, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx98, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx98, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/cxxstd.h	/^constexpr inline bool operator>(_cxx98, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >	include/tatooine/grid_edge.h	/^  bool operator>(const grid_edge& other) const {$/;"	f	struct:tatooine::grid_edge	typeref:typename:bool
operator >	include/tatooine/grid_sampler.h	/^  bool operator>(const this_t& other) const { return m_index > other.m_index; }$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:bool
operator >	include/tatooine/grid_vertex.h	/^  constexpr bool operator>(const grid_vertex& other) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx, _cxx98) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx11, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx11, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx11, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx11, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx11, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx11, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx14, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx14, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx14, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx14, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx14, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx14, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx17, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx17, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx17, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx17, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx17, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx17, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx20, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx20, _cxx11) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx20, _cxx14) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx20, _cxx17) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx20, _cxx20) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx20, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx98, _cxx  ) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx98, _cxx11) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx98, _cxx14) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx98, _cxx17) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx98, _cxx20) { return false; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/cxxstd.h	/^constexpr inline bool operator>=(_cxx98, _cxx98) { return true; }$/;"	f	namespace:tatooine	typeref:typename:bool
operator >=	include/tatooine/grid_edge.h	/^  bool operator>=(const grid_edge& other) const {$/;"	f	struct:tatooine::grid_edge	typeref:typename:bool
operator >=	include/tatooine/grid_sampler.h	/^  bool operator>=(const this_t& other) const {$/;"	f	struct:tatooine::grid_sampler_iterator	typeref:typename:bool
operator >=	include/tatooine/grid_vertex.h	/^  constexpr bool operator>=(const grid_vertex& other) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:bool
operator []	include/tatooine/cache.h	/^  auto& operator[](const Key& key) { return at(key); }$/;"	f	class:tatooine::cache	typeref:typename:auto &
operator []	include/tatooine/cache.h	/^  const auto& operator[](const Key& key) const { return at(key); }$/;"	f	class:tatooine::cache	typeref:typename:const auto &
operator []	include/tatooine/chunked_data.h	/^  T operator[](size_t global_idx) const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T
operator []	include/tatooine/chunked_data.h	/^  T& operator[](size_t global_idx) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:T &
operator []	include/tatooine/edgeset.h	/^    auto&       operator[](edge e) { return property_type<T>::operator[](e.i); }$/;"	f	struct:tatooine::edgeset::edge_prop	typeref:typename:auto &
operator []	include/tatooine/edgeset.h	/^    const auto& operator[](edge e) const {$/;"	f	struct:tatooine::edgeset::edge_prop	typeref:typename:const auto &
operator []	include/tatooine/edgeset.h	/^  auto&       operator[](const edge& e) { return at(e); }$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
operator []	include/tatooine/edgeset.h	/^  const auto& operator[](const edge& e) const { return at(e); }$/;"	f	class:tatooine::edgeset	typeref:typename:const auto &
operator []	include/tatooine/grid_sampler.h	/^  auto operator[](size_t i) const { return at(i); }$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
operator []	include/tatooine/grid_sampler.h	/^  decltype(auto) operator[](size_t i) { return at(i); }$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:decltype (auto)
operator []	include/tatooine/grid_vertex.h	/^  auto&       operator[](size_t i) { return iterators[i]; }$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto &
operator []	include/tatooine/grid_vertex.h	/^  const auto& operator[](size_t i) const { return iterators[i]; }$/;"	f	struct:tatooine::grid_vertex	typeref:typename:const auto &
operator []	include/tatooine/line.h	/^  auto operator[](tangent_idx i) const { return tangent_at(i.i); }$/;"	f	struct:tatooine::line	typeref:typename:auto
operator []	include/tatooine/line.h	/^  auto operator[](tangent_idx i) const { return tangent_at(i.i); }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
operator []	include/tatooine/line.h	/^  auto operator[](vertex_idx i) const { return at(i); }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
operator []	include/tatooine/line.h	/^  auto operator[](vertex_idx i) { return at(i); }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
operator []	include/tatooine/line.h	/^  auto&       operator[](vertex_idx i) { return m_vertices[i.i]; }$/;"	f	struct:tatooine::line	typeref:typename:auto &
operator []	include/tatooine/line.h	/^  const auto& operator[](vertex_idx i) const { return m_vertices[i.i]; }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
operator []	include/tatooine/linspace.h	/^  constexpr auto operator[](size_t i) const { return at(i); }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
operator []	include/tatooine/mesh.h	/^    auto&       operator[](face f) { return property_type<T>::operator[](f.i); }$/;"	f	struct:tatooine::mesh::face_prop	typeref:typename:auto &
operator []	include/tatooine/mesh.h	/^    const auto& operator[](face f) const {$/;"	f	struct:tatooine::mesh::face_prop	typeref:typename:const auto &
operator []	include/tatooine/mesh.h	/^  constexpr auto&       operator[](face f) { return at(f); }$/;"	f	class:tatooine::mesh	typeref:typename:auto &
operator []	include/tatooine/mesh.h	/^  constexpr const auto& operator[](face f) const { return at(f); }$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
operator []	include/tatooine/multidim.h	/^  auto&       operator[](size_t i) { return m_ranges[i]; }$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:auto &
operator []	include/tatooine/multidim.h	/^  const auto& operator[](size_t i) const { return m_ranges[i]; }$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:const auto &
operator []	include/tatooine/multidim.h	/^  constexpr auto&       operator[](size_t i) { return m_ranges[i]; }$/;"	f	struct:tatooine::static_multidim	typeref:typename:auto &
operator []	include/tatooine/multidim.h	/^  constexpr const auto& operator[](size_t i) const { return m_ranges[i]; }$/;"	f	struct:tatooine::static_multidim	typeref:typename:const auto &
operator []	include/tatooine/multidim_array.h	/^  auto&       operator[](size_t i) { return m_data[i]; }$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto &
operator []	include/tatooine/multidim_array.h	/^  const auto& operator[](size_t i) const { return m_data[i]; }$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:const auto &
operator []	include/tatooine/multidim_array.h	/^  constexpr auto&       operator[](size_t i) { return m_data[i]; }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto &
operator []	include/tatooine/multidim_array.h	/^  constexpr const auto& operator[](size_t i) const { return m_data[i]; }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:const auto &
operator []	include/tatooine/pointset.h	/^  auto&       operator[](vertex v) { return at(v); }$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
operator []	include/tatooine/pointset.h	/^  const auto& operator[](vertex v) const { return at(v); }$/;"	f	struct:tatooine::pointset	typeref:typename:const auto &
operator []	include/tatooine/property.h	/^  auto& operator[](Handle handle) {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto &
operator []	include/tatooine/property.h	/^  auto& operator[](Handle handle) {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto &
operator []	include/tatooine/property.h	/^  const auto& operator[](Handle handle) const {$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:const auto &
operator []	include/tatooine/property.h	/^  const auto& operator[](Handle handle) const {$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:const auto &
operator []	include/tatooine/simple_tri_mesh.h	/^  auto& operator[](face f) {return m_faces[f.i];}$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:auto &
operator []	include/tatooine/simple_tri_mesh.h	/^  const auto& operator[](face f) const {return m_faces[f.i];}$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:const auto &
options_t	include/tatooine/integration/vclibs/rungekutta43.h	/^  using options_t  = typename ode_t::options_t;$/;"	t	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:ode_t::options_t
orbit	include/tatooine/orbit.h	/^struct orbit : field<orbit<Real>, Real, 3, 3> {$/;"	s	namespace:tatooine::numerical
order_dependent_edge_compare	include/tatooine/edgeset.h	/^  struct order_dependent_edge_compare {$/;"	s	class:tatooine::edgeset
order_dependent_edge_equal	include/tatooine/edgeset.h	/^  struct order_dependent_edge_equal {$/;"	s	class:tatooine::edgeset
order_independent_edge_compare	include/tatooine/edgeset.h	/^  struct order_independent_edge_compare {$/;"	s	class:tatooine::edgeset
order_independent_edge_equal	include/tatooine/edgeset.h	/^  struct order_independent_edge_equal {$/;"	s	class:tatooine::edgeset
origin	include/tatooine/grid_sampler.h	/^      std::array<Real, 3>              origin, spacing;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::array<Real,3>
origin	include/tatooine/grid_sampler.h	/^      std::array<Real, 3>              origin, spacing;$/;"	m	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:std::array<Real,3>
out_of_domain	include/tatooine/field.h	/^  out_of_domain() : std::runtime_error{""} {}$/;"	f	struct:tatooine::out_of_domain
out_of_domain	include/tatooine/field.h	/^struct out_of_domain : std::runtime_error {$/;"	s	namespace:tatooine
out_of_domain	include/tatooine/grid_sampler.h	/^    out_of_domain(const std::string& err) : std::runtime_error{err} {}$/;"	f	struct:tatooine::base_grid_sampler::out_of_domain
out_of_domain	include/tatooine/grid_sampler.h	/^  struct out_of_domain : std::runtime_error {$/;"	s	struct:tatooine::base_grid_sampler
out_of_domain	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto out_of_domain = VC::odeint::OutOfDomain;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
out_of_domain	include/tatooine/parameterized_mesh.h	/^  struct out_of_domain : std::exception {};$/;"	s	struct:tatooine::parameterized_mesh
out_of_domain	include/tatooine/streamsurface.h	/^  struct out_of_domain : std::exception {};$/;"	s	struct:tatooine::streamsurface
parallel_for_loop	include/tatooine/for_loop.h	/^constexpr void parallel_for_loop(Iteration&& iteration, Ends&&... ends) {$/;"	f	namespace:tatooine	typeref:typename:void
parallel_vectors	include/tatooine/parallel_vectors.h	/^auto parallel_vectors($/;"	f	namespace:tatooine	typeref:typename:auto
parallel_vectors	include/tatooine/parallel_vectors.h	/^auto parallel_vectors(const field<V, VReal, 3, 3>& v,$/;"	f	namespace:tatooine	typeref:typename:auto
parallel_vectors	include/tatooine/parallel_vectors.h	/^auto parallel_vectors(const field<V, VReal, 3, 3>& vf,$/;"	f	namespace:tatooine	typeref:typename:auto
parameterization	include/tatooine/line.h	/^  auto&       parameterization() { return *m_parameterization; }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
parameterization	include/tatooine/line.h	/^  const auto& parameterization() const { return *m_parameterization; }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:const auto &
parameterization_at	include/tatooine/line.h	/^  auto& parameterization_at(size_t i) { return m_parameterization->at(i); }$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
parameterization_at	include/tatooine/line.h	/^  const auto& parameterization_at(size_t i) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:const auto &
parameterized_line	include/tatooine/line.h	/^  parameterized_line()$/;"	f	struct:tatooine::parameterized_line
parameterized_line	include/tatooine/line.h	/^  parameterized_line(const parameterized_line& other)$/;"	f	struct:tatooine::parameterized_line
parameterized_line	include/tatooine/line.h	/^  parameterized_line(parameterized_line&& other)$/;"	f	struct:tatooine::parameterized_line
parameterized_line	include/tatooine/line.h	/^  parameterized_line(std::initializer_list<std::pair<pos_t, Real>>&& data)$/;"	f	struct:tatooine::parameterized_line
parameterized_line	include/tatooine/line.h	/^struct parameterized_line : line<Real, N> {$/;"	s	namespace:tatooine
parameterized_mesh	include/tatooine/parameterized_mesh.h	/^  parameterized_mesh() : m_uv(add_uv_prop()) {}$/;"	f	struct:tatooine::parameterized_mesh
parameterized_mesh	include/tatooine/parameterized_mesh.h	/^  parameterized_mesh(const parameterized_mesh& other)$/;"	f	struct:tatooine::parameterized_mesh
parameterized_mesh	include/tatooine/parameterized_mesh.h	/^  parameterized_mesh(parameterized_mesh&& other)$/;"	f	struct:tatooine::parameterized_mesh
parameterized_mesh	include/tatooine/parameterized_mesh.h	/^struct parameterized_mesh : public mesh<Real, N> {$/;"	s	namespace:tatooine
parent_t	include/tatooine/abcflow.h	/^  using parent_t = field<real_t, 3, 3>;$/;"	t	struct:tatooine::symbolic::abcflow	typeref:typename:field<real_t,3,3>
parent_t	include/tatooine/abcflow.h	/^  using parent_t = field<this_t, real_t, 3, 3>;$/;"	t	struct:tatooine::numerical::abcflow	typeref:typename:field<this_t,real_t,3,3>
parent_t	include/tatooine/boussinesq.h	/^  using parent_t = field<boussinesq, real_t, 2, 2>;$/;"	t	struct:tatooine::boussinesq	typeref:typename:field<boussinesq,real_t,2,2>
parent_t	include/tatooine/cavity.h	/^  using parent_t = field<cavity, double, 2, 2>;$/;"	t	struct:tatooine::cavity	typeref:typename:field<cavity,double,2,2>
parent_t	include/tatooine/constant_vectorfield.h	/^  using parent_t = field<this_t, Real, N, N>;$/;"	t	struct:tatooine::constant_vectorfield	typeref:typename:field<this_t,Real,N,N>
parent_t	include/tatooine/counterexample_sadlo.h	/^  using parent_t = field<Real, 2, 2>;$/;"	t	struct:tatooine::symbolic::counterexample_sadlo	typeref:typename:field<Real,2,2>
parent_t	include/tatooine/counterexample_sadlo.h	/^  using parent_t = field<this_t, Real, 2, 2>;$/;"	t	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:field<this_t,Real,2,2>
parent_t	include/tatooine/curvature_field.h	/^  using parent_t = field<this_t, real_t, 2>;$/;"	t	class:tatooine::curvature_field	typeref:typename:field<this_t,real_t,2>
parent_t	include/tatooine/curvature_field.h	/^  using parent_t = field<this_t, real_t, 3>;$/;"	t	class:tatooine::curvature_field	typeref:typename:field<this_t,real_t,3>
parent_t	include/tatooine/diff.h	/^  using parent_t = field<this_t, typename Field::real_t,$/;"	t	struct:tatooine::derived_field
parent_t	include/tatooine/doublegyre.h	/^  using parent_t = field<Real, 2, 2>;$/;"	t	struct:tatooine::symbolic::doublegyre	typeref:typename:field<Real,2,2>
parent_t	include/tatooine/doublegyre.h	/^  using parent_t = vectorfield<this_t, Real, 2>;$/;"	t	struct:tatooine::numerical::doublegyre	typeref:typename:vectorfield<this_t,Real,2>
parent_t	include/tatooine/duffing_oscillator.h	/^  using parent_t = field<this_t, Real, 2, 2>;$/;"	t	struct:tatooine::numerical::duffing_oscillator	typeref:typename:field<this_t,Real,2,2>
parent_t	include/tatooine/duffing_oscillator.h	/^  using parent_t = field<this_t, Real, 2, 2>;$/;"	t	struct:tatooine::numerical::forced_duffing_oscillator	typeref:typename:field<this_t,Real,2,2>
parent_t	include/tatooine/edgeset.h	/^  using parent_t = pointset<Real, N>;$/;"	t	class:tatooine::edgeset	typeref:typename:pointset<Real,N>
parent_t	include/tatooine/field.h	/^  using parent_t = crtp<Derived>;$/;"	t	struct:tatooine::field	typeref:typename:crtp<Derived>
parent_t	include/tatooine/field.h	/^  using parent_t = field<this_t, Real, N, TensorDims...>;$/;"	t	struct:tatooine::binary_operation_field	typeref:typename:field<this_t,Real,N,TensorDims...>
parent_t	include/tatooine/field.h	/^  using parent_t = field<this_t, Real, N, TensorDims...>;$/;"	t	struct:tatooine::unary_operation_field	typeref:typename:field<this_t,Real,N,TensorDims...>
parent_t	include/tatooine/fixed_time_field.h	/^  using parent_t = field<this_t, Real, N, TensorDims...>;$/;"	t	struct:tatooine::fixed_time_field	typeref:typename:field<this_t,Real,N,TensorDims...>
parent_t	include/tatooine/flowmap.h	/^  using parent_t = field<this_t, typename V::real_t, V::num_dimensions(),$/;"	t	struct:tatooine::flowmap
parent_t	include/tatooine/ftle.h	/^  using parent_t     = field<this_t, real_t, V::num_dimensions()>;$/;"	t	struct:tatooine::ftle
parent_t	include/tatooine/geometry/circle.h	/^  using parent_t = primitive<Real, 2>;$/;"	t	struct:tatooine::geometry::circle	typeref:typename:primitive<Real,2>
parent_t	include/tatooine/grid_edge.h	/^  using parent_t = std::pair<vertex_t, vertex_t>;$/;"	t	struct:tatooine::grid_edge	typeref:typename:std::pair<vertex_t,vertex_t>
parent_t	include/tatooine/grid_sampler.h	/^  using parent_t = base_grid_sampler<$/;"	t	struct:tatooine::grid_sampler_view	typeref:typename:base_grid_sampler<grid_sampler_view<Real,N,Data,top_grid_t,HeadInterpolator,TailInterpolators...>,Real,N,Data,HeadInterpolator,TailInterpolators...>
parent_t	include/tatooine/grid_sampler.h	/^  using parent_t = base_grid_sampler<this_t, Real, N, Data, HeadInterpolator,$/;"	t	struct:tatooine::grid_sampler	typeref:typename:base_grid_sampler<this_t,Real,N,Data,HeadInterpolator,TailInterpolators...>
parent_t	include/tatooine/grid_sampler.h	/^  using parent_t = grid<Real, N>;$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:grid<Real,N>
parent_t	include/tatooine/helicity_field.h	/^  using parent_t =$/;"	t	class:tatooine::helicity_field
parent_t	include/tatooine/integration/boost/boostintegrator.h	/^  using parent_t   = tatooine::integration::integrator<Real, N, this_t>;$/;"	t	struct:tatooine::integration::boost::integrator	typeref:typename:tatooine::integration::integrator<Real,N,this_t>
parent_t	include/tatooine/integration/integrator.h	/^  using parent_t   = crtp<Derived>;$/;"	t	struct:tatooine::integration::integrator	typeref:typename:crtp<Derived>
parent_t	include/tatooine/integration/vclibs/rungekutta43.h	/^  using parent_t   = integrator<Real, N, InterpolationKernel, this_t>;$/;"	t	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:integrator<Real,N,InterpolationKernel,this_t>
parent_t	include/tatooine/lambda2_field.h	/^  using parent_t =$/;"	t	class:tatooine::lambda2_field
parent_t	include/tatooine/line.h	/^  using parent_t = line<Real, N>;$/;"	t	struct:tatooine::parameterized_line	typeref:typename:line<Real,N>
parent_t	include/tatooine/mesh.h	/^  using parent_t = edgeset<Real, N>;$/;"	t	class:tatooine::mesh	typeref:typename:edgeset<Real,N>
parent_t	include/tatooine/modified_doublegyre.h	/^  using parent_t = field<Real, 2, 2>;$/;"	t	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:field<Real,2,2>
parent_t	include/tatooine/modified_doublegyre.h	/^  using parent_t = field<this_t, Real, 2, 2>;$/;"	t	struct:tatooine::numerical::modified_doublegyre	typeref:typename:field<this_t,Real,2,2>
parent_t	include/tatooine/multidim_array.h	/^  using parent_t = dynamic_multidim_resolution<Indexing>;$/;"	t	class:tatooine::dynamic_multidim_array	typeref:typename:dynamic_multidim_resolution<Indexing>
parent_t	include/tatooine/multidim_array.h	/^  using parent_t = static_multidim_resolution<Indexing, Resolution...>;$/;"	t	class:tatooine::static_multidim_array	typeref:typename:static_multidim_resolution<Indexing,Resolution...>
parent_t	include/tatooine/okubo_weiss_field.h	/^  using parent_t =$/;"	t	class:tatooine::okubo_weiss_field
parent_t	include/tatooine/orbit.h	/^  using parent_t = field<this_t, Real, 3, 3>;$/;"	t	struct:tatooine::numerical::orbit	typeref:typename:field<this_t,Real,3,3>
parent_t	include/tatooine/parameterized_mesh.h	/^  using parent_t = mesh<Real, N>;$/;"	t	struct:tatooine::parameterized_mesh	typeref:typename:mesh<Real,N>
parent_t	include/tatooine/property.h	/^  using parent_t               = deque_property<Handle>;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:deque_property<Handle>
parent_t	include/tatooine/property.h	/^  using parent_t               = vector_property<Handle>;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:vector_property<Handle>
parent_t	include/tatooine/rbc.h	/^  using parent_t = field<this_t, real_t, 2, 2>;$/;"	t	struct:tatooine::rbc	typeref:typename:field<this_t,real_t,2,2>
parent_t	include/tatooine/sampled_field.h	/^  using parent_t = field<this_t, Real, N, TensorDims...>;$/;"	t	struct:tatooine::sampled_field	typeref:typename:field<this_t,Real,N,TensorDims...>
parent_t	include/tatooine/simple_tri_mesh.h	/^  using parent_t = pointset<Real, N>;$/;"	t	class:tatooine::simple_tri_mesh	typeref:typename:pointset<Real,N>
parent_t	include/tatooine/sinuscosinus.h	/^  using parent_t = field<Real, 2, 2>;$/;"	t	struct:tatooine::symbolic::cosinussinus	typeref:typename:field<Real,2,2>
parent_t	include/tatooine/sinuscosinus.h	/^  using parent_t = field<Real, 2, 2>;$/;"	t	struct:tatooine::symbolic::sinuscosinus	typeref:typename:field<Real,2,2>
parent_t	include/tatooine/sinuscosinus.h	/^  using parent_t = field<this_t, Real, 2, 2>;$/;"	t	struct:tatooine::numerical::cosinussinus	typeref:typename:field<this_t,Real,2,2>
parent_t	include/tatooine/sinuscosinus.h	/^  using parent_t = field<this_t, Real, 2, 2>;$/;"	t	struct:tatooine::numerical::sinuscosinus	typeref:typename:field<this_t,Real,2,2>
parent_t	include/tatooine/spacetime_field.h	/^  using parent_t = field<this_t, Real, N, VecDim>;$/;"	t	struct:tatooine::spacetime_field	typeref:typename:field<this_t,Real,N,VecDim>
parent_t	include/tatooine/spacetime_field.h	/^  using parent_t = symbolic::field<Real, N, VecDim>;$/;"	t	struct:tatooine::spacetime_field	typeref:typename:symbolic::field<Real,N,VecDim>
parent_t	include/tatooine/streamsurface.h	/^  using parent_t = front_evolving_streamsurface_discretization<$/;"	t	struct:tatooine::hultquist_discretization	typeref:typename:front_evolving_streamsurface_discretization<Integrator,SeedcurveInterpolator,IntegralcurveInterpolator,V,Real,N>
parent_t	include/tatooine/streamsurface.h	/^  using parent_t = front_evolving_streamsurface_discretization<$/;"	t	struct:tatooine::simple_discretization	typeref:typename:front_evolving_streamsurface_discretization<Integrator,SeedcurveInterpolator,IntegralcurveInterpolator,V,Real,N>
parent_t	include/tatooine/streamsurface.h	/^  using parent_t = simple_tri_mesh<Real, N>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:simple_tri_mesh<Real,N>
parent_t	include/tatooine/symbolic_field.h	/^  using parent_t = tatooine::field<this_t, real_t, N, TensorDims...>;$/;"	t	struct:tatooine::symbolic::field	typeref:typename:tatooine::field<this_t,real_t,N,TensorDims...>
parent_t	include/tatooine/tensor.h	/^  using parent_t          = base_tensor<this_t, Real, Dims...>;$/;"	t	struct:tatooine::tensor_slice	typeref:typename:base_tensor<this_t,Real,Dims...>
parent_t	include/tatooine/tensor.h	/^  using parent_t   = crtp<Tensor>;$/;"	t	struct:tatooine::base_tensor	typeref:typename:crtp<Tensor>
parent_t	include/tatooine/tensor.h	/^  using parent_t = base_tensor<this_t, Real, Dims...>;$/;"	t	struct:tatooine::const_imag_complex_tensor	typeref:typename:base_tensor<this_t,Real,Dims...>
parent_t	include/tatooine/tensor.h	/^  using parent_t = base_tensor<this_t, Real, Dims...>;$/;"	t	struct:tatooine::const_real_complex_tensor	typeref:typename:base_tensor<this_t,Real,Dims...>
parent_t	include/tatooine/tensor.h	/^  using parent_t = base_tensor<this_t, Real, Dims...>;$/;"	t	struct:tatooine::imag_complex_tensor	typeref:typename:base_tensor<this_t,Real,Dims...>
parent_t	include/tatooine/tensor.h	/^  using parent_t = base_tensor<this_t, Real, Dims...>;$/;"	t	struct:tatooine::real_complex_tensor	typeref:typename:base_tensor<this_t,Real,Dims...>
parent_t	include/tatooine/tensor.h	/^  using parent_t = tensor<Real, M, N>;$/;"	t	struct:tatooine::mat	typeref:typename:tensor<Real,M,N>
parent_t	include/tatooine/tensor.h	/^  using parent_t = tensor<Real, N>;$/;"	t	struct:tatooine::vec	typeref:typename:tensor<Real,N>
parent_t	include/tatooine/vorticity_field.h	/^  using parent_t =$/;"	t	class:tatooine::vorticity_field
partition_resolution	include/tatooine/utility.h	/^auto partition_resolution(const std::array<size_t, N>& resolution,$/;"	f	namespace:tatooine	typeref:typename:auto
path	include/tatooine/vtk_legacy.h	/^  const auto &path() const { return m_path; }$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:const auto &
pathline_render_window	include/tatooine/gpu/pathline_render_window.h	/^  pathline_render_window(const vectorfield<V, VReal, N, N>& v,$/;"	f	struct:tatooine::gpu::pathline_render_window
pathline_render_window	include/tatooine/gpu/pathline_render_window.h	/^struct pathline_render_window : first_person_window {$/;"	s	namespace:tatooine::gpu
permute_edge_seq	include/tatooine/grid.h	/^  auto permute_edge_seq(const edge_seq_t& edge_seq, RandEng& eng) {$/;"	f	class:tatooine::grid	typeref:typename:auto
pi	include/tatooine/doublegyre.h	/^  static constexpr auto pi = boost::math::constants::pi<Real>();$/;"	m	struct:tatooine::numerical::doublegyre	typeref:typename:auto
pi	include/tatooine/duffing_oscillator.h	/^  static constexpr auto pi = boost::math::constants::pi<Real>();$/;"	m	struct:tatooine::numerical::duffing_oscillator	typeref:typename:auto
pi	include/tatooine/duffing_oscillator.h	/^  static constexpr auto pi = boost::math::constants::pi<Real>();$/;"	m	struct:tatooine::numerical::forced_duffing_oscillator	typeref:typename:auto
pi	include/tatooine/modified_doublegyre.h	/^  static constexpr Real pi      = M_PI;$/;"	m	struct:tatooine::numerical::modified_doublegyre	typeref:typename:Real
plain_index	include/tatooine/index_ordering.h	/^  static constexpr auto plain_index(ResIt                      res_it,$/;"	f	struct:tatooine::x_fastest	typeref:typename:auto
plain_index	include/tatooine/index_ordering.h	/^  static constexpr auto plain_index(ResIt res_it, Is... is) {$/;"	f	struct:tatooine::x_fastest	typeref:typename:auto
plain_index	include/tatooine/index_ordering.h	/^  static constexpr auto plain_index(const std::array<ResType, N>& resolution,$/;"	f	struct:tatooine::x_fastest	typeref:typename:auto
plain_index	include/tatooine/index_ordering.h	/^  static constexpr auto plain_index(const std::vector<ResType>& resolution,$/;"	f	struct:tatooine::x_fastest	typeref:typename:auto
plain_index	include/tatooine/index_ordering.h	/^  static constexpr size_t plain_index($/;"	f	struct:tatooine::hilbert_curve	typeref:typename:size_t
plain_index	include/tatooine/index_ordering.h	/^  static constexpr size_t plain_index(const std::array<ResType, N>& resolution,$/;"	f	struct:tatooine::x_slowest	typeref:typename:size_t
plain_index	include/tatooine/index_ordering.h	/^  static constexpr size_t plain_index(const std::vector<ResType>& resolution,$/;"	f	struct:tatooine::x_slowest	typeref:typename:size_t
plain_index	include/tatooine/index_ordering.h	/^  static constexpr size_t plain_index(const std::vector<size_t>& \/*resolution*\/,$/;"	f	struct:tatooine::hilbert_curve	typeref:typename:size_t
plain_index	include/tatooine/index_ordering.h	/^  static size_t plain_index(const std::vector<ResType>& resolution,$/;"	f	struct:tatooine::x_slowest	typeref:typename:size_t
plain_index	include/tatooine/multidim_resolution.h	/^  constexpr auto plain_index(Is... is) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
plain_index	include/tatooine/multidim_resolution.h	/^  constexpr auto plain_index(const std::array<size_t, N>& is) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
plain_index	include/tatooine/multidim_resolution.h	/^  constexpr auto plain_index(const std::vector<size_t>& is) const {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
plain_index	include/tatooine/multidim_resolution.h	/^  static auto plain_index(const std::vector<Is>& is) {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
plain_index	include/tatooine/multidim_resolution.h	/^  static constexpr auto plain_index(Is... is) {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
plain_index	include/tatooine/multidim_resolution.h	/^  static constexpr auto plain_index(const std::array<size_t, N>& is) {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
play	include/tatooine/gpu/pathline_render_window.h	/^  bool                              play;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:bool
point_shader	include/tatooine/render_topological_skeleton.h	/^    point_shader() {$/;"	f	struct:tatooine::render_topological_skeleton::point_shader
point_shader	include/tatooine/render_topological_skeleton.h	/^  struct point_shader : shader {$/;"	s	function:tatooine::render_topological_skeleton
pointer	include/tatooine/grid_vertex.h	/^  using pointer           = value_type*;$/;"	t	struct:tatooine::grid_vertex_iterator	typeref:typename:value_type *
pointer	include/tatooine/property.h	/^  using pointer                = typename container_t::pointer;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::pointer
pointer	include/tatooine/property.h	/^  using pointer                = typename container_t::pointer;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::pointer
points	include/tatooine/line.h	/^      std::vector<std::array<Real, 3>> points;$/;"	m	struct:tatooine::line::read_vtk::reader	typeref:typename:std::vector<std::array<Real,3>>
points	include/tatooine/pointset.h	/^  auto&       points() { return m_vertices; }$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
points	include/tatooine/pointset.h	/^  const auto& points() const { return m_vertices; }$/;"	f	struct:tatooine::pointset	typeref:typename:const auto &
pointset	include/tatooine/pointset.h	/^  pointset(const pointset& other)$/;"	f	struct:tatooine::pointset
pointset	include/tatooine/pointset.h	/^  pointset(pointset&& other)$/;"	f	struct:tatooine::pointset
pointset	include/tatooine/pointset.h	/^  pointset(std::initializer_list<pos_t>&& vertices)$/;"	f	struct:tatooine::pointset
pointset	include/tatooine/pointset.h	/^struct pointset {$/;"	s	namespace:tatooine
polynomial	include/tatooine/interpolation.h	/^  constexpr auto&       polynomial() { return m_polynomial; }$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:auto &
polynomial	include/tatooine/interpolation.h	/^  constexpr auto&       polynomial() { return m_polynomial; }$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:auto &
polynomial	include/tatooine/interpolation.h	/^  constexpr const auto& polynomial() const { return m_polynomial; }$/;"	f	struct:tatooine::interpolation::hermite	typeref:typename:const auto &
polynomial	include/tatooine/interpolation.h	/^  constexpr const auto& polynomial() const { return m_polynomial; }$/;"	f	struct:tatooine::interpolation::linear	typeref:typename:const auto &
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial()$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial(Coeffs... coeffs)$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial(const polynomial<OtherReal, OtherDegree>& other)$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial(const std::array<OtherReal, Degree + 1>& coeffs)$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial(const std::array<Real, Degree + 1>& coeffs)$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial(const vec<OtherReal, Degree + 1>& coeffs)$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^  constexpr polynomial(std::array<Real, Degree + 1>&& coeffs)$/;"	f	struct:tatooine::polynomial
polynomial	include/tatooine/polynomial.h	/^struct polynomial {$/;"	s	namespace:tatooine
polynomial	include/tatooine/polynomial_line.h	/^  auto&       polynomial(size_t i) { return m_polynomials[i]; }$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto &
polynomial	include/tatooine/polynomial_line.h	/^  const auto& polynomial(size_t i) const { return m_polynomials[i]; }$/;"	f	class:tatooine::polynomial_line	typeref:typename:const auto &
polynomial_line	include/tatooine/polynomial_line.h	/^  constexpr polynomial_line() : m_polynomials{make_array<polynomial_t, N>()} {}$/;"	f	class:tatooine::polynomial_line
polynomial_line	include/tatooine/polynomial_line.h	/^  constexpr polynomial_line(Polynomials&&... polynomials)$/;"	f	class:tatooine::polynomial_line
polynomial_line	include/tatooine/polynomial_line.h	/^class polynomial_line {$/;"	c	namespace:tatooine
polynomial_t	include/tatooine/interpolation.h	/^  using polynomial_t                           = polynomial<Real, 1>;$/;"	t	struct:tatooine::interpolation::linear	typeref:typename:polynomial<Real,1>
polynomial_t	include/tatooine/interpolation.h	/^  using polynomial_t                           = polynomial<Real, 3>;$/;"	t	struct:tatooine::interpolation::hermite	typeref:typename:polynomial<Real,3>
polynomial_t	include/tatooine/polynomial_line.h	/^  using polynomial_t = polynomial<Real, Degree>;$/;"	t	class:tatooine::polynomial_line	typeref:typename:polynomial<Real,Degree>
polynomials	include/tatooine/polynomial_line.h	/^  auto&       polynomials() { return m_polynomials; }$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto &
polynomials	include/tatooine/polynomial_line.h	/^  const auto& polynomials() const { return m_polynomials; }$/;"	f	class:tatooine::polynomial_line	typeref:typename:const auto &
pop_back	include/tatooine/line.h	/^  auto pop_back() { m_vertices.pop_back(); }$/;"	f	struct:tatooine::line	typeref:typename:auto
pop_back	include/tatooine/line.h	/^  void pop_back() {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
pop_front	include/tatooine/line.h	/^  void pop_front() { m_vertices.pop_front(); }$/;"	f	struct:tatooine::line	typeref:typename:void
pop_front	include/tatooine/line.h	/^  void pop_front() {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
pos_container_t	include/tatooine/line.h	/^  using pos_container_t = std::deque<pos_t>;$/;"	t	struct:tatooine::line	typeref:typename:std::deque<pos_t>
pos_t	include/tatooine/boundingbox.h	/^  using pos_t  = vec<Real, N>;$/;"	t	struct:tatooine::boundingbox	typeref:typename:vec<Real,N>
pos_t	include/tatooine/field.h	/^  using pos_t    = vec<Real, N>;$/;"	t	struct:tatooine::field	typeref:typename:vec<Real,N>
pos_t	include/tatooine/geometry/primitive.h	/^  using pos_t  = vec<Real, N>;$/;"	t	struct:tatooine::geometry::primitive	typeref:typename:vec<Real,N>
pos_t	include/tatooine/integration/boost/boostintegrator.h	/^  using pos_t      = typename parent_t::pos_t;$/;"	t	struct:tatooine::integration::boost::integrator	typeref:typename:parent_t::pos_t
pos_t	include/tatooine/integration/integrator.h	/^  using pos_t      = vec<Real, N>;$/;"	t	struct:tatooine::integration::integrator	typeref:typename:vec<Real,N>
pos_t	include/tatooine/integration/vclibs/rungekutta43.h	/^  using pos_t      = typename parent_t::pos_t;$/;"	t	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:parent_t::pos_t
pos_t	include/tatooine/line.h	/^  using pos_t           = vec_t;$/;"	t	struct:tatooine::line	typeref:typename:vec_t
pos_t	include/tatooine/marchingcubes.h	/^  using pos_t = vec<Real, 3>;$/;"	t	function:tatooine::marchingcubes	typeref:typename:vec<Real,3>
pos_t	include/tatooine/pointset.h	/^  using pos_t  = vec<Real, N>;$/;"	t	struct:tatooine::pointset	typeref:typename:vec<Real,N>
pos_t	include/tatooine/streamsurface.h	/^  using pos_t        = vec<Real, N>;$/;"	t	struct:tatooine::streamsurface	typeref:typename:vec<Real,N>
position	include/tatooine/grid_vertex.h	/^  constexpr auto position() const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
position	include/tatooine/grid_vertex.h	/^  constexpr auto position(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
prev	include/tatooine/grid_sampler.h	/^auto prev($/;"	f	namespace:tatooine	typeref:typename:auto
prev	include/tatooine/grid_vertex.h	/^auto prev(grid_vertex_iterator<Real, N> it, size_t num) {$/;"	f	namespace:tatooine	typeref:typename:auto
prev	include/tatooine/line.h	/^  this_t prev(const size_t dec = 1) const {$/;"	f	struct:tatooine::line_vertex_iterator	typeref:typename:this_t
prev	include/tatooine/line.h	/^  this_t prev(size_t dec = 1) const {$/;"	f	struct:tatooine::const_line_vertex_iterator	typeref:typename:this_t
prev	include/tatooine/line.h	/^auto prev($/;"	f	namespace:tatooine	typeref:typename:auto
prev	include/tatooine/line.h	/^auto prev(const const_line_vertex_iterator<Line, Real, N, Handle, Value,$/;"	f	namespace:tatooine	typeref:typename:auto
prev	include/tatooine/linspace.h	/^auto prev(const linspace_iterator<Real>& l, size_t diff = 1) {$/;"	f	namespace:tatooine	typeref:typename:auto
primitive	include/tatooine/geometry/primitive.h	/^struct primitive {$/;"	s	namespace:tatooine::geometry
projection_matrix	include/tatooine/gpu/first_person_window.h	/^  auto projection_matrix() {$/;"	f	struct:tatooine::first_person_window	typeref:typename:auto
promote	include/tatooine/type_traits.h	/^struct promote<T0, T1, T2, Ts...> {$/;"	s	namespace:tatooine
promote	include/tatooine/type_traits.h	/^struct promote<T0, T1> {$/;"	s	namespace:tatooine
promote_t	include/tatooine/type_traits.h	/^using promote_t = typename promote<Ts...>::type;$/;"	t	namespace:tatooine	typeref:typename:promote<Ts...>::type
ps	include/tatooine/pointset.h	/^    const pointset* ps;$/;"	m	struct:tatooine::pointset::vertex_iterator	typeref:typename:const pointset *
push_back	include/tatooine/line.h	/^  auto push_back(Components... comps) {$/;"	f	struct:tatooine::line	typeref:typename:auto
push_back	include/tatooine/line.h	/^  auto push_back(const pos_t& p) {$/;"	f	struct:tatooine::line	typeref:typename:auto
push_back	include/tatooine/line.h	/^  auto push_back(const pos_t& p, Real t, bool auto_compute_interpolator = true) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
push_back	include/tatooine/line.h	/^  auto push_back(pos_t&& p) {$/;"	f	struct:tatooine::line	typeref:typename:auto
push_back	include/tatooine/line.h	/^  auto push_back(pos_t&& p, Real t, bool auto_compute_interpolator = true) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
push_back	include/tatooine/property.h	/^  void push_back() override { m_data.push_back(m_value); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
push_back	include/tatooine/property.h	/^  void push_back() override { m_data.push_back(m_value); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
push_back	include/tatooine/property.h	/^  void push_back(const T& value) { m_data.push_back(value); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
push_back	include/tatooine/property.h	/^  void push_back(const T& value) { m_data.push_back(value); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
push_front	include/tatooine/line.h	/^  auto push_front(Components... comps) {$/;"	f	struct:tatooine::line	typeref:typename:auto
push_front	include/tatooine/line.h	/^  auto push_front(const pos_t& p) {$/;"	f	struct:tatooine::line	typeref:typename:auto
push_front	include/tatooine/line.h	/^  auto push_front(const pos_t& p, Real t, bool auto_compute_interpolator = true) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
push_front	include/tatooine/line.h	/^  auto push_front(pos_t&& p) {$/;"	f	struct:tatooine::line	typeref:typename:auto
push_front	include/tatooine/line.h	/^  auto push_front(pos_t&& p, Real t, bool auto_compute_interpolator = true) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
push_front	include/tatooine/property.h	/^  void push_front() override { m_data.push_front(m_value); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
push_front	include/tatooine/property.h	/^  void push_front(const T& value) { m_data.push_front(value); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
pv_on_tri	include/tatooine/parallel_vectors.h	/^std::optional<vec<Real, 3>> pv_on_tri($/;"	f	namespace:tatooine::detail	typeref:typename:std::optional<vec<Real,3>>
quadratic	include/tatooine/line.h	/^static constexpr quadratic_t quadratic;$/;"	v	namespace:tatooine	typeref:typename:quadratic_t
quadratic_t	include/tatooine/line.h	/^struct quadratic_t {};$/;"	s	namespace:tatooine
radius	include/tatooine/boussinesq.h	/^  static constexpr real_t         radius = 0.07;$/;"	m	struct:tatooine::boussinesq	typeref:typename:real_t
radius	include/tatooine/geometry/circle.h	/^  auto  radius() const { return m_radius; }$/;"	f	struct:tatooine::geometry::circle	typeref:typename:auto
radius	include/tatooine/geometry/circle.h	/^  auto& radius() { return m_radius; }$/;"	f	struct:tatooine::geometry::circle	typeref:typename:auto &
rand	include/tatooine/multidim_array.h	/^  static auto rand(const random_normal<T, RandEng>& rand,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
rand	include/tatooine/multidim_array.h	/^  static auto rand(const random_uniform<T, RandEng>& rand,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
rand	include/tatooine/multidim_array.h	/^  static auto rand(random_normal<T, RandEng>&& rand, Resolution... resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
rand	include/tatooine/multidim_array.h	/^  static auto rand(random_normal<T, RandEng>&& rand,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
rand	include/tatooine/multidim_array.h	/^  static auto rand(random_uniform<T, RandEng>&& rand,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
randn	include/tatooine/multidim_array.h	/^  static auto randn(T mean = 0, T stddev = 1,$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto
randn	include/tatooine/tensor.h	/^  static constexpr auto randn(Real mean = 0, Real stddev = 1,$/;"	f	struct:tatooine::tensor	typeref:typename:auto
random_elem	include/tatooine/random.h	/^auto random_elem(Iterator begin, Iterator end, RandomEngine& eng) {$/;"	f	namespace:tatooine	typeref:typename:auto
random_elem	include/tatooine/random.h	/^auto random_elem(Range&& range, RandomEngine& eng) {$/;"	f	namespace:tatooine	typeref:typename:auto
random_normal	include/tatooine/random.h	/^  random_normal() : engine{std::random_device{}()}, distribution{0, 1} {}$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(Engine&& _engine)$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(Engine&& _engine, T mean, T stddev)$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(T mean, T stddev)$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(T mean, T stddev, Engine&& _engine)$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(T mean, T stddev, const Engine& _engine)$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(const Engine& _engine) : engine{_engine}, distribution{0, 1} {}$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^  random_normal(const Engine& _engine, T mean, T stddev)$/;"	f	struct:tatooine::random_normal
random_normal	include/tatooine/random.h	/^struct random_normal {$/;"	s	namespace:tatooine
random_point	include/tatooine/boundingbox.h	/^  auto random_point(RandomEngine&& random_engine = RandomEngine{$/;"	f	struct:tatooine::boundingbox	typeref:typename:auto
random_straight_vertex_sequence	include/tatooine/grid.h	/^  auto random_straight_vertex_sequence(size_t len, Real min_angle,$/;"	f	class:tatooine::grid	typeref:typename:auto
random_uniform	include/tatooine/random.h	/^  random_uniform()$/;"	f	struct:tatooine::random_uniform
random_uniform	include/tatooine/random.h	/^  random_uniform(Engine _engine)$/;"	f	struct:tatooine::random_uniform
random_uniform	include/tatooine/random.h	/^  random_uniform(T min, T max, Engine _engine = Engine{std::random_device{}()})$/;"	f	struct:tatooine::random_uniform
random_uniform	include/tatooine/random.h	/^struct random_uniform {$/;"	s	namespace:tatooine
random_uniform_vector	include/tatooine/random.h	/^auto random_uniform_vector(size_t n, T a = T(0), T b = T(1),$/;"	f	namespace:tatooine	typeref:typename:auto
random_vertex	include/tatooine/grid.h	/^  constexpr auto random_vertex(std::index_sequence<Is...> \/*is*\/,$/;"	f	class:tatooine::grid	typeref:typename:auto
random_vertex	include/tatooine/grid.h	/^  vertex_t random_vertex(RandEng& eng) {$/;"	f	class:tatooine::grid	typeref:typename:vertex_t
random_vertex_neighbor_gaussian	include/tatooine/grid.h	/^  auto random_vertex_neighbor_gaussian(const vertex_t& v, const Real _stddev,$/;"	f	class:tatooine::grid	typeref:typename:auto
random_vertex_seq_neighbor_gaussian	include/tatooine/grid.h	/^  auto random_vertex_seq_neighbor_gaussian(const vertex_seq_t& seq, Real stddev,$/;"	f	class:tatooine::grid	typeref:typename:auto
random_vertex_sequence	include/tatooine/grid.h	/^  auto random_vertex_sequence(size_t len, RandEng& eng) {$/;"	f	class:tatooine::grid	typeref:typename:auto
random_vertex_sequence	include/tatooine/grid.h	/^  auto random_vertex_sequence(size_t len, const vertex_seq_t& base_seq,$/;"	f	class:tatooine::grid	typeref:typename:auto
random_vertex_sequence	include/tatooine/grid.h	/^  auto random_vertex_sequence(size_t len, const vertex_t& start_v,$/;"	f	class:tatooine::grid	typeref:typename:auto
randu	include/tatooine/chunked_data.h	/^  void randu(T min = 0, T max = 1,$/;"	f	struct:tatooine::chunked_data	typeref:typename:void
randu	include/tatooine/grid_sampler.h	/^  void randu(RandomEngine&& random_engine = RandomEngine{$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
randu	include/tatooine/grid_sampler.h	/^  void randu(Real lower_boundary, Real upper_boundary,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
randu	include/tatooine/multidim_array.h	/^  static auto randu(T min = 0, T max = 1,$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto
randu	include/tatooine/multidim_array.h	/^  static auto randu(T min, T max, const std::array<UInt, N>& resolution,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
randu	include/tatooine/multidim_array.h	/^  static auto randu(T min, T max, const std::vector<UInt>& resolution,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
randu	include/tatooine/multidim_array.h	/^  static auto randu(const std::array<UInt, N>& resolution, T min = 0, T max = 1,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
randu	include/tatooine/multidim_array.h	/^  static auto randu(const std::vector<UInt>& resolution, T min = 0, T max = 1,$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
randu	include/tatooine/tensor.h	/^  static constexpr auto randu(Real min = 0, Real max = 1,$/;"	f	struct:tatooine::tensor	typeref:typename:auto
ranges	include/tatooine/multidim.h	/^  const std::vector<std::pair<size_t, size_t>>& ranges() const {$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:const std::vector<std::pair<size_t,size_t>> &
ranges	include/tatooine/multidim.h	/^  constexpr auto&       ranges() { return m_ranges; }$/;"	f	struct:tatooine::static_multidim	typeref:typename:auto &
ranges	include/tatooine/multidim.h	/^  constexpr const auto& ranges() const { return m_ranges; }$/;"	f	struct:tatooine::static_multidim	typeref:typename:const auto &
ranges	include/tatooine/multidim.h	/^  std::vector<std::pair<size_t, size_t>>& ranges() {$/;"	f	struct:tatooine::dynamic_multidim	typeref:typename:std::vector<std::pair<size_t,size_t>> &
rbc	include/tatooine/rbc.h	/^  rbc(const std::string& rbc_binary_dir) { read_from_binary(rbc_binary_dir); }$/;"	f	struct:tatooine::rbc
rbc	include/tatooine/rbc.h	/^struct rbc : field<rbc, double, 2, 2> {$/;"	s	namespace:tatooine
read	include/tatooine/amira_file.h	/^inline auto read(const std::string& filename) {$/;"	f	namespace:tatooine::amira	typeref:typename:auto
read	include/tatooine/grid_sampler.h	/^  void read(const std::string& filename) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
read	include/tatooine/hdf5.h	/^  auto read() const {$/;"	f	struct:tatooine::h5::dataset	typeref:typename:auto
read	include/tatooine/hdf5.h	/^  auto read() {$/;"	f	struct:tatooine::h5::attribute	typeref:typename:auto
read	include/tatooine/simple_tri_mesh.h	/^  void read(const std::string& path) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:void
read	include/tatooine/vtk_legacy.h	/^  void read() {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_amira	include/tatooine/grid_sampler.h	/^  void read_amira(const std::string& filename) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
read_binaryline	include/tatooine/vtk_legacy.h	/^inline auto read_binaryline(std::istream &stream, char *buffer) {$/;"	f	namespace:tatooine::vtk	typeref:typename:auto
read_cell_types	include/tatooine/vtk_legacy.h	/^void legacy_file::read_cell_types(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_cell_types_ascii	include/tatooine/vtk_legacy.h	/^void legacy_file::read_cell_types_ascii(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_cell_types_binary	include/tatooine/vtk_legacy.h	/^void legacy_file::read_cell_types_binary(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_cells	include/tatooine/vtk_legacy.h	/^  void read_cells(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_chunk	include/tatooine/hdf5.h	/^  auto read_chunk(const std::array<hsize_t, NDims>& p_offset,$/;"	f	struct:tatooine::h5::dataset	typeref:typename:auto
read_chunk	include/tatooine/hdf5.h	/^  auto read_chunk(const std::array<size_t, NDims>& p_offset,$/;"	f	struct:tatooine::h5::dataset	typeref:typename:auto
read_coordinates	include/tatooine/vtk_legacy.h	/^  auto read_coordinates(std::ifstream &file, size_t n) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:auto
read_coordinates_ascii	include/tatooine/vtk_legacy.h	/^std::vector<Real> legacy_file::read_coordinates_ascii(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<Real>
read_coordinates_binary	include/tatooine/vtk_legacy.h	/^std::vector<Real> legacy_file::read_coordinates_binary(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<Real>
read_coordinates_header	include/tatooine/vtk_legacy.h	/^  auto read_coordinates_header(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:auto
read_data	include/tatooine/vtk_legacy.h	/^std::vector<std::array<Real, n>> legacy_file::read_data(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<std::array<Real,n>>
read_data	include/tatooine/vtk_legacy.h	/^void legacy_file::read_data() {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_data_ascii	include/tatooine/vtk_legacy.h	/^std::vector<std::array<Real, n>> legacy_file::read_data_ascii($/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<std::array<Real,n>>
read_data_binary	include/tatooine/vtk_legacy.h	/^std::vector<std::array<Real, n>> legacy_file::read_data_binary($/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<std::array<Real,n>>
read_data_header	include/tatooine/vtk_legacy.h	/^  auto read_data_header(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:auto
read_dimensions	include/tatooine/vtk_legacy.h	/^void legacy_file::read_dimensions(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_field	include/tatooine/vtk_legacy.h	/^  void read_field(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_field_array_ascii	include/tatooine/vtk_legacy.h	/^  std::vector<Real> read_field_array_ascii(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<Real>
read_field_array_binary	include/tatooine/vtk_legacy.h	/^  std::vector<Real> read_field_array_binary(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<Real>
read_field_array_header	include/tatooine/vtk_legacy.h	/^  auto read_field_array_header(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:auto
read_field_header	include/tatooine/vtk_legacy.h	/^  auto read_field_header(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:auto
read_from_binary	include/tatooine/rbc.h	/^  void read_from_binary(const std::string& rbc_binary_dir) {$/;"	f	struct:tatooine::rbc	typeref:typename:void
read_header	include/tatooine/vtk_legacy.h	/^void legacy_file::read_header() {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_indices	include/tatooine/vtk_legacy.h	/^std::vector<std::vector<int>> legacy_file::read_indices(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<std::vector<int>>
read_indices_ascii	include/tatooine/vtk_legacy.h	/^std::vector<std::vector<int>> legacy_file::read_indices_ascii($/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<std::vector<int>>
read_indices_binary	include/tatooine/vtk_legacy.h	/^std::vector<int> legacy_file::read_indices_binary(std::ifstream &file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:std::vector<int>
read_lines	include/tatooine/vtk_legacy.h	/^  void read_lines(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_normals	include/tatooine/vtk_legacy.h	/^  void read_normals(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_origin	include/tatooine/vtk_legacy.h	/^void legacy_file::read_origin(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_points	include/tatooine/vtk_legacy.h	/^void legacy_file::read_points(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_points_ascii	include/tatooine/vtk_legacy.h	/^void legacy_file::read_points_ascii(std::ifstream &file, const size_t &n) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_points_binary	include/tatooine/vtk_legacy.h	/^void legacy_file::read_points_binary(std::ifstream &file, const size_t &n) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_polygons	include/tatooine/vtk_legacy.h	/^  void read_polygons(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_scalars	include/tatooine/vtk_legacy.h	/^void legacy_file::read_scalars(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_scalars_ascii	include/tatooine/vtk_legacy.h	/^void legacy_file::read_scalars_ascii(std::ifstream &    file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_scalars_binary	include/tatooine/vtk_legacy.h	/^void legacy_file::read_scalars_binary(std::ifstream &    file,$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_scalars_header	include/tatooine/vtk_legacy.h	/^  auto read_scalars_header(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:auto
read_spacing	include/tatooine/vtk_legacy.h	/^void legacy_file::read_spacing(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_tensors	include/tatooine/vtk_legacy.h	/^  void read_tensors(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_texture_coordinates	include/tatooine/vtk_legacy.h	/^  void read_texture_coordinates(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_triangle_strips	include/tatooine/vtk_legacy.h	/^  void read_triangle_strips(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_until	include/tatooine/vtk_legacy.h	/^inline auto read_until(std::istream &stream, const char terminator_char,$/;"	f	namespace:tatooine::vtk	typeref:typename:auto
read_vectors	include/tatooine/vtk_legacy.h	/^  void read_vectors(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_vertices	include/tatooine/vtk_legacy.h	/^  void read_vertices(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_vtk	include/tatooine/grid_sampler.h	/^  void read_vtk(const std::string& filename) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
read_vtk	include/tatooine/grid_sampler.h	/^  void read_vtk(const std::string& filename,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
read_vtk	include/tatooine/line.h	/^  static auto read_vtk(const std::string& filepath) {$/;"	f	struct:tatooine::line	typeref:typename:auto
read_vtk	include/tatooine/simple_tri_mesh.h	/^  void read_vtk(const std::string& path) {$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:void
read_vtk_scalars	include/tatooine/grid_sampler.h	/^  void read_vtk_scalars(const std::string& filename, const std::string& data_name) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
read_vtk_scalars	include/tatooine/grid_sampler.h	/^  void read_vtk_scalars(const std::string& filename, const std::string& data_name,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
read_word	include/tatooine/vtk_legacy.h	/^inline auto read_word(std::istream &stream, char *buffer) {$/;"	f	namespace:tatooine::vtk	typeref:typename:auto
read_x_coordinates	include/tatooine/vtk_legacy.h	/^  void read_x_coordinates(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_y_coordinates	include/tatooine/vtk_legacy.h	/^  void read_y_coordinates(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
read_z_coordinates	include/tatooine/vtk_legacy.h	/^  void read_z_coordinates(std::ifstream &file) {$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
reader	include/tatooine/line.h	/^    struct reader : vtk::legacy_file_listener {$/;"	s	function:tatooine::line::read_vtk
real	include/tatooine/tensor.h	/^auto real(base_tensor<Tensor, std::complex<Real>, Dims...>& t) {$/;"	f	namespace:tatooine	typeref:typename:auto
real	include/tatooine/tensor.h	/^auto real(const base_tensor<Tensor, std::complex<Real>, Dims...>& t) {$/;"	f	namespace:tatooine	typeref:typename:auto
real_complex_tensor	include/tatooine/tensor.h	/^  real_complex_tensor($/;"	f	struct:tatooine::real_complex_tensor
real_complex_tensor	include/tatooine/tensor.h	/^struct real_complex_tensor$/;"	s	namespace:tatooine
real_t	include/tatooine/boundingbox.h	/^  using real_t = Real;$/;"	t	struct:tatooine::boundingbox	typeref:typename:Real
real_t	include/tatooine/boussinesq.h	/^  using real_t = double;$/;"	t	struct:tatooine::boussinesq	typeref:typename:double
real_t	include/tatooine/chunked_data.h	/^    using real_t = typename T::real_t;$/;"	t	function:tatooine::chunked_data::unchunk_plain	typeref:typename:T::real_t
real_t	include/tatooine/curvature_field.h	/^  using real_t   = typename V::real_t;$/;"	t	class:tatooine::curvature_field	typeref:typename:V::real_t
real_t	include/tatooine/field.h	/^  using real_t   = Real;$/;"	t	struct:tatooine::field	typeref:typename:Real
real_t	include/tatooine/ftle.h	/^  using real_t       = typename V::real_t;$/;"	t	struct:tatooine::ftle	typeref:typename:V::real_t
real_t	include/tatooine/geometry/primitive.h	/^  using real_t = Real;$/;"	t	struct:tatooine::geometry::primitive	typeref:typename:Real
real_t	include/tatooine/grid_sampler.h	/^  using real_t                           = Real;$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:Real
real_t	include/tatooine/grid_sampler.h	/^  using real_t   = promote_t<FieldReal, GridReal>;$/;"	t	function:tatooine::resample	typeref:typename:promote_t<FieldReal,GridReal>
real_t	include/tatooine/grid_sampler.h	/^  using real_t = Real;$/;"	t	struct:tatooine::grid_sampler	typeref:typename:Real
real_t	include/tatooine/helicity_field.h	/^  using real_t = typename V::real_t;$/;"	t	class:tatooine::helicity_field	typeref:typename:V::real_t
real_t	include/tatooine/integration/integrator.h	/^  using real_t     = Real;$/;"	t	struct:tatooine::integration::integrator	typeref:typename:Real
real_t	include/tatooine/interpolation.h	/^  using real_t                                 = Real;$/;"	t	struct:tatooine::interpolation::hermite	typeref:typename:Real
real_t	include/tatooine/interpolation.h	/^  using real_t                                 = Real;$/;"	t	struct:tatooine::interpolation::linear	typeref:typename:Real
real_t	include/tatooine/lambda2_field.h	/^  using real_t = typename V::real_t;$/;"	t	class:tatooine::lambda2_field	typeref:typename:V::real_t
real_t	include/tatooine/line.h	/^  using real_t          = Real;$/;"	t	struct:tatooine::line	typeref:typename:Real
real_t	include/tatooine/linspace.h	/^  using real_t         = Real;$/;"	t	struct:tatooine::linspace	typeref:typename:Real
real_t	include/tatooine/okubo_weiss_field.h	/^  using real_t = typename V::real_t;$/;"	t	class:tatooine::okubo_weiss_field	typeref:typename:V::real_t
real_t	include/tatooine/pointset.h	/^  using real_t = Real;$/;"	t	struct:tatooine::pointset	typeref:typename:Real
real_t	include/tatooine/polynomial.h	/^   using real_t = Real;$/;"	t	struct:tatooine::polynomial	typeref:typename:Real
real_t	include/tatooine/random.h	/^  using real_t         = T;$/;"	t	struct:tatooine::random_normal	typeref:typename:T
real_t	include/tatooine/random.h	/^  using real_t   = T;$/;"	t	struct:tatooine::random_uniform	typeref:typename:T
real_t	include/tatooine/streamsurface.h	/^  using real_t       = Real;$/;"	t	struct:tatooine::streamsurface	typeref:typename:Real
real_t	include/tatooine/streamsurface.h	/^  using real_t = Real;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:Real
real_t	include/tatooine/tensor.h	/^  using real_t     = Real;$/;"	t	struct:tatooine::base_tensor	typeref:typename:Real
real_t	include/tatooine/vorticity_field.h	/^  using real_t = typename V::real_t;$/;"	t	class:tatooine::vorticity_field	typeref:typename:V::real_t
redistribute_points	include/tatooine/curve_to_streamline.h	/^  void redistribute_points(Line& line) const {$/;"	f	struct:tatooine::curve_to_streamline	typeref:typename:void
reduce	include/tatooine/gpu/reduce.h.in	/^inline float reduce(const yavin::shaderstoragebuffer<float>& in_buffer,$/;"	f	namespace:tatooine::gpu	typeref:typename:float
reduce	include/tatooine/gpu/reduce.h.in	/^inline float reduce(const yavin::tex2r32f& in_buffer,$/;"	f	namespace:tatooine::gpu	typeref:typename:float
reduce	include/tatooine/streamsurface.h	/^  void reduce(front_t& front, Real desired_spatial_dist, Real cache_bw_tau,$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:void
reduce_buffer_shader	include/tatooine/gpu/reduce.h.in	/^  reduce_buffer_shader(size_t workgroup_size) {$/;"	f	struct:tatooine::gpu::reduce_buffer_shader	file:
reduce_buffer_shader	include/tatooine/gpu/reduce.h.in	/^struct reduce_buffer_shader<yavin::shaderstoragebuffer<float>> : yavin::shader {$/;"	s	namespace:tatooine::gpu	file:
reduce_tex_shader	include/tatooine/gpu/reduce.h.in	/^  reduce_tex_shader(unsigned int workgroup_size_x,$/;"	f	struct:tatooine::gpu::reduce_tex_shader	file:
reduce_tex_shader	include/tatooine/gpu/reduce.h.in	/^struct reduce_tex_shader<yavin::tex2r32f> : yavin::shader {$/;"	s	namespace:tatooine::gpu	file:
reference	include/tatooine/grid_vertex.h	/^  using reference         = value_type&;$/;"	t	struct:tatooine::grid_vertex_iterator	typeref:typename:value_type &
reference	include/tatooine/property.h	/^  using reference              = typename container_t::reference;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::reference
reference	include/tatooine/property.h	/^  using reference              = typename container_t::reference;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::reference
refresh_usage	include/tatooine/cache.h	/^  void refresh_usage(const_iterator it) {$/;"	f	class:tatooine::cache	typeref:typename:void
rel_tol	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto rel_tol       = VC::odeint::RelTol;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
release_mode	include/tatooine/utility.h	/^inline constexpr auto release_mode() {$/;"	f	namespace:tatooine	typeref:typename:auto
remove	include/tatooine/edgeset.h	/^  void remove(edge e, bool remove_orphaned_vertices = true) {$/;"	f	class:tatooine::edgeset	typeref:typename:void
remove	include/tatooine/edgeset.h	/^  void remove(vertex v) {$/;"	f	class:tatooine::edgeset	typeref:typename:void
remove	include/tatooine/mesh.h	/^  constexpr void remove(face f, bool remove_orphaned_vertices = true,$/;"	f	class:tatooine::mesh	typeref:typename:void
remove	include/tatooine/mesh.h	/^  void remove(edge e, bool remove_orphaned_vertices = true) {$/;"	f	class:tatooine::mesh	typeref:typename:void
remove	include/tatooine/mesh.h	/^  void remove(vertex v) {$/;"	f	class:tatooine::mesh	typeref:typename:void
remove	include/tatooine/pointset.h	/^  void remove(vertex v) {$/;"	f	struct:tatooine::pointset	typeref:typename:void
render_loop	include/tatooine/gpu/first_person_window.h	/^  void render_loop(F&&f) {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
render_topological_skeleton	include/tatooine/render_topological_skeleton.h	/^auto render_topological_skeleton($/;"	f	namespace:tatooine	typeref:typename:auto
render_ui	include/tatooine/gpu/pathline_render_window.h	/^  void render_ui() {$/;"	f	struct:tatooine::gpu::pathline_render_window	typeref:typename:void
repelling_foci	include/tatooine/topological_skeleton.h	/^  std::vector<vec<Real, 2>> saddles, centers, sources, sinks, repelling_foci,$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
res	include/tatooine/boussinesq.h	/^  static constexpr vec<size_t, 3> res{100, 300, 1601};$/;"	m	struct:tatooine::boussinesq	typeref:typename:vec<size_t,3>
res	include/tatooine/cavity.h	/^  static constexpr vec<size_t, 3> res{256, 96, 100};$/;"	m	struct:tatooine::cavity	typeref:typename:vec<size_t,3>
resample	include/tatooine/grid_sampler.h	/^auto resample(const field<Field, FieldReal, N, TensorDims...>& f,$/;"	f	namespace:tatooine	typeref:typename:auto
resample	include/tatooine/line.h	/^   auto resample(const linspace<Real>& ts) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
resample_properties	include/tatooine/line.h	/^  void resample_properties(const linspace<Real>& ts, this_t& resampled) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
resample_property	include/tatooine/line.h	/^  void resample_property($/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
resample_property	include/tatooine/line.h	/^  void resample_property(const linspace<Real>& ts, this_t& resampled,$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
resampled	include/tatooine/streamsurface.h	/^      bool             moved, on_border, resampled;$/;"	m	struct:tatooine::hultquist_discretization::integrate::integrated_t	typeref:typename:bool
reserve	include/tatooine/property.h	/^  void reserve(size_t n) override { m_data.reserve(n); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
reset	include/tatooine/boundingbox.h	/^  constexpr auto reset() {$/;"	f	struct:tatooine::boundingbox	typeref:typename:auto
resize	include/tatooine/chunked_data.h	/^  void resize(Sizes&&... sizes) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:void
resize	include/tatooine/chunked_data.h	/^  void resize(std::index_sequence<Is...> \/*is*\/, Sizes&&... sizes) {$/;"	f	struct:tatooine::chunked_data	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const grid<OtherReal, N>& domain) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const grid<OtherReal, N>& domain,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const linspace<real_ts>&... linspaces) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const std::array<size_t, N>& resolution) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const std::array<size_t, N>& resolution,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const std::vector<Data>&     data,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const std::vector<Data>& data, const grid<OtherReal, N>& domain) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const std::vector<Data>& data, const grid<OtherReal, N>& domain,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/grid_sampler.h	/^  void resize(const std::vector<Data>& data,$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
resize	include/tatooine/multidim_array.h	/^  void resize(Resolution... resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:void
resize	include/tatooine/multidim_array.h	/^  void resize(const std::array<UInt, N>& res, const T value = T{}) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:void
resize	include/tatooine/multidim_array.h	/^  void resize(const std::vector<UInt>& res, const T value = T{}) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:void
resize	include/tatooine/multidim_array.h	/^  void resize(std::vector<UInt>&& res, const T value = T{}) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:void
resize	include/tatooine/multidim_resolution.h	/^  void resize(Resolution... resolution) {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:void
resize	include/tatooine/multidim_resolution.h	/^  void resize(const std::array<size_t, N>& resolution) {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:void
resize	include/tatooine/multidim_resolution.h	/^  void resize(const std::vector<size_t>& resolution) {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:void
resize	include/tatooine/multidim_resolution.h	/^  void resize(std::vector<size_t>&& resolution) {$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:void
resize	include/tatooine/property.h	/^  void resize(size_t n) override { m_data.resize(n); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:void
resize	include/tatooine/property.h	/^  void resize(size_t n) override { m_data.resize(n, m_value); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:void
resize_next_list	include/tatooine/algorithm.h	/^decltype(auto) resize_next_list(Range& range, RangeIt pos,$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
resize_prev_list	include/tatooine/algorithm.h	/^decltype(auto) resize_prev_list(Range& range, RangeIt pos,$/;"	f	namespace:tatooine	typeref:typename:decltype (auto)
resolution	include/tatooine/grid.h	/^  constexpr auto resolution() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
resolution	include/tatooine/grid.h	/^  constexpr auto resolution(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
resolution	include/tatooine/hdf5.h	/^  auto resolution() const {$/;"	f	struct:tatooine::h5::attribute	typeref:typename:auto
resolution	include/tatooine/hdf5.h	/^  auto resolution() const {$/;"	f	struct:tatooine::h5::dataset	typeref:typename:auto
resolution_t	include/tatooine/tensor.h	/^  using resolution_t = static_multidim_resolution<x_fastest, Dims...>;$/;"	t	struct:tatooine::base_tensor	typeref:typename:static_multidim_resolution<x_fastest,Dims...>
return_type	include/tatooine/for_loop.h	/^    using return_type =$/;"	t	function:tatooine::detail::for_loop_impl::loop
return_type	include/tatooine/for_loop.h	/^  using return_type =$/;"	t	function:tatooine::detail::for_loop
reverse_iterator	include/tatooine/property.h	/^  using reverse_iterator       = typename container_t::reverse_iterator;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::reverse_iterator
reverse_iterator	include/tatooine/property.h	/^  using reverse_iterator       = typename container_t::reverse_iterator;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::reverse_iterator
rk43	include/tatooine/integration/vclibs/rungekutta43.h	/^static constexpr inline auto rk43          = VC::odeint::RK43;$/;"	v	namespace:tatooine::integration::vclibs	typeref:typename:auto
rk4_helper	include/tatooine/integration/boost/rungekutta4.h	/^struct rk4_helper {$/;"	s	namespace:tatooine::integration::boost
rk4_t	include/tatooine/integration/boost/rungekutta4.h	/^using rk4_t = typename rk4_helper<Real, N>::type;$/;"	t	namespace:tatooine::integration::boost	typeref:typename:rk4_helper<Real,N>::type
rkck54_type	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^struct rkck54_type {$/;"	s	namespace:tatooine::integration::boost
rkd5_helper	include/tatooine/integration/boost/rungekuttadopri5.h	/^struct rkd5_helper {$/;"	s	namespace:tatooine::integration::boost
rkd5_stepper	include/tatooine/integration/boost/rungekuttadopri5.h	/^using rkd5_stepper = typename rkd5_helper<Real, N>::stepper_t;$/;"	t	namespace:tatooine::integration::boost	typeref:typename:rkd5_helper<Real,N>::stepper_t
rkd5_t	include/tatooine/integration/boost/rungekuttadopri5.h	/^using rkd5_t = typename rkd5_helper<Real, N>::type;$/;"	t	namespace:tatooine::integration::boost	typeref:typename:rkd5_helper<Real,N>::type
rkf78_helper	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^struct rkf78_helper {$/;"	s	namespace:tatooine::integration::boost
rkf78_t	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^using rkf78_t = typename rkf78_helper<Real, N>::type;$/;"	t	namespace:tatooine::integration::boost	typeref:typename:rkf78_helper<Real,N>::type
rotation_independent_face_equal	include/tatooine/mesh.h	/^  struct rotation_independent_face_equal {$/;"	s	class:tatooine::mesh
row	include/tatooine/tensor.h	/^  constexpr auto row(size_t i) const { return this->template slice<0>(i); }$/;"	f	struct:tatooine::mat	typeref:typename:auto
row	include/tatooine/tensor.h	/^  constexpr auto row(size_t i) { return this->template slice<0>(i); }$/;"	f	struct:tatooine::mat	typeref:typename:auto
rungekutta4	include/tatooine/integration/boost/rungekutta4.h	/^  rungekutta4(Real stepsize = 0.1)$/;"	f	struct:tatooine::integration::boost::rungekutta4
rungekutta4	include/tatooine/integration/boost/rungekutta4.h	/^struct rungekutta4 : integrator<Real, N, rk4_t<Real, N>> {$/;"	s	namespace:tatooine::integration::boost
rungekutta43	include/tatooine/integration/vclibs/rungekutta43.h	/^  rungekutta43()$/;"	f	struct:tatooine::integration::vclibs::rungekutta43
rungekutta43	include/tatooine/integration/vclibs/rungekutta43.h	/^  rungekutta43(Options&&... options)$/;"	f	struct:tatooine::integration::vclibs::rungekutta43
rungekutta43	include/tatooine/integration/vclibs/rungekutta43.h	/^  rungekutta43(const rungekutta43& other)$/;"	f	struct:tatooine::integration::vclibs::rungekutta43
rungekutta43	include/tatooine/integration/vclibs/rungekutta43.h	/^  rungekutta43(rungekutta43&& other) noexcept$/;"	f	struct:tatooine::integration::vclibs::rungekutta43
rungekutta43	include/tatooine/integration/vclibs/rungekutta43.h	/^struct rungekutta43$/;"	s	namespace:tatooine::integration::vclibs
rungekuttacashkarp54	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^  rungekuttacashkarp54(Real initial_stepsize         = 0.1,$/;"	f	struct:tatooine::integration::boost::rungekuttacashkarp54
rungekuttacashkarp54	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^struct rungekuttacashkarp54$/;"	s	namespace:tatooine::integration::boost
rungekuttadopri5	include/tatooine/integration/boost/rungekuttadopri5.h	/^  rungekuttadopri5(Real initial_stepsize         = 0.01,$/;"	f	struct:tatooine::integration::boost::rungekuttadopri5
rungekuttadopri5	include/tatooine/integration/boost/rungekuttadopri5.h	/^struct rungekuttadopri5 : integrator<Real, N, rkd5_t<Real, N>> {$/;"	s	namespace:tatooine::integration::boost
rungekuttafehlberg78	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^  rungekuttafehlberg78(const Real initial_stepsize         = 0.01,$/;"	f	struct:tatooine::integration::boost::rungekuttafehlberg78
rungekuttafehlberg78	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^struct rungekuttafehlberg78$/;"	s	namespace:tatooine::integration::boost
saddles	include/tatooine/topological_skeleton.h	/^  std::vector<vec<Real, 2>> saddles, centers, sources, sinks, repelling_foci,$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
same_rotation	include/tatooine/mesh.h	/^    static bool same_rotation(const std::vector<vertex>& lhs,$/;"	f	struct:tatooine::mesh::rotation_independent_face_equal	typeref:typename:bool
sample	include/tatooine/grid_sampler.h	/^  auto sample(Real x, Xs... xs) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
sample	include/tatooine/grid_sampler.h	/^  auto sample(const base_tensor<Tensor, TensorReal, N>& pos) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
sample	include/tatooine/grid_sampler.h	/^  auto sample(const std::array<Real, N>& pos) const {$/;"	f	struct:tatooine::base_grid_sampler	typeref:typename:auto
sample	include/tatooine/line.h	/^  auto sample(Real t) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
sample	include/tatooine/line.h	/^  auto sample(Real t, const vertex_property_t<Prop>& prop) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
sample	include/tatooine/parameterized_mesh.h	/^  auto sample(Real u, Real v) const {$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto
sample	include/tatooine/streamsurface.h	/^  vec_t sample(Real u, Real v) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:vec_t
sample	include/tatooine/streamsurface.h	/^  vec_t sample(Real u, Real v, Real cache_bw_tau, Real cache_fw_tau) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:vec_t
sample	include/tatooine/streamsurface.h	/^  vec_t sample(const vec2& uv) const { return sample(uv(0), uv(1)); }$/;"	f	struct:tatooine::streamsurface	typeref:typename:vec_t
sample	include/tatooine/streamsurface.h	/^  vec_t sample(const vec2& uv, Real cache_bw_tau, Real cache_fw_tau) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:vec_t
sample_to_raw	include/tatooine/field.h	/^auto sample_to_raw(const field<Field, FieldReal, N, TensorDims...>& f,$/;"	f	namespace:tatooine	typeref:typename:auto
sampled_field	include/tatooine/sampled_field.h	/^  sampled_field(Args&&... args)$/;"	f	struct:tatooine::sampled_field
sampled_field	include/tatooine/sampled_field.h	/^  sampled_field(Sampler&& _sampler)$/;"	f	struct:tatooine::sampled_field
sampled_field	include/tatooine/sampled_field.h	/^  sampled_field(const Sampler& _sampler)$/;"	f	struct:tatooine::sampled_field
sampled_field	include/tatooine/sampled_field.h	/^  sampled_field(const sampled_field& other)$/;"	f	struct:tatooine::sampled_field
sampled_field	include/tatooine/sampled_field.h	/^  sampled_field(sampled_field&& other)$/;"	f	struct:tatooine::sampled_field
sampled_field	include/tatooine/sampled_field.h	/^struct sampled_field : field<sampled_field<Sampler, Real, N, TensorDims...>,$/;"	s	namespace:tatooine
sampler	include/tatooine/boussinesq.h	/^  sampler_t sampler;$/;"	m	struct:tatooine::boussinesq	typeref:typename:sampler_t
sampler	include/tatooine/sampled_field.h	/^  auto&       sampler() {$/;"	f	struct:tatooine::sampled_field	typeref:typename:auto &
sampler	include/tatooine/sampled_field.h	/^  const auto& sampler() const { return *m_sampler; }$/;"	f	struct:tatooine::sampled_field	typeref:typename:const auto &
sampler_t	include/tatooine/boussinesq.h	/^  using sampler_t =$/;"	t	struct:tatooine::boussinesq	typeref:typename:grid_sampler<real_t,3,vec<real_t,2>,interpolation::linear,interpolation::linear,interpolation::linear>
sampler_t	include/tatooine/render_topological_skeleton.h	/^  using sampler_t = grid_sampler<double, 2, vec<double, 2>, linear, linear>;$/;"	t	function:tatooine::render_topological_skeleton	typeref:typename:grid_sampler<double,2,vec<double,2>,linear,linear>
scalars	include/tatooine/grid_sampler.h	/^      std::map<std::string, std::vector<Real>> scalars;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::map<std::string,std::vector<Real>>
scalars	include/tatooine/grid_sampler.h	/^      std::map<std::string, std::vector<Real>> scalars;$/;"	m	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:std::map<std::string,std::vector<Real>>
scalars_num_comps	include/tatooine/grid_sampler.h	/^      std::map<std::string, size_t>            scalars_num_comps;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::map<std::string,size_t>
scalars_num_comps	include/tatooine/grid_sampler.h	/^      std::map<std::string, size_t>            scalars_num_comps;$/;"	m	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:std::map<std::string,size_t>
second_derivative	include/tatooine/line.h	/^  auto second_derivative(Real t) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
second_derivative	include/tatooine/polynomial_line.h	/^  constexpr auto second_derivative(Real t) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
second_derivative	include/tatooine/polynomial_line.h	/^  constexpr auto second_derivative(Real t,$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
seedcurve	include/tatooine/streamsurface.h	/^  const auto& seedcurve() const { return m_seedcurve; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:const auto &
seedcurve_t	include/tatooine/streamsurface.h	/^  using seedcurve_t =$/;"	t	struct:tatooine::streamsurface	typeref:typename:parameterized_line<Real,N,SeedcurveInterpolator>
seedcurve_to_front	include/tatooine/streamsurface.h	/^  auto seedcurve_to_front(size_t seedline_resolution, Real cache_bw_tau,$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
separatrices	include/tatooine/topological_skeleton.h	/^  std::vector<parameterized_line<Real, 2, Interpolator>> separatrices;$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<parameterized_line<Real,2,Interpolator>>
set_ambient_factor	include/tatooine/gpu/line_shader.h.in	/^  void set_ambient_factor(float ambient_factor) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_animate	include/tatooine/gpu/line_shader.h.in	/^  void set_animate(int animate) { set_uniform("animate", animate); }$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_animation_min_alpha	include/tatooine/gpu/line_shader.h.in	/^  void set_animation_min_alpha(float animation_min_alpha) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_closed	include/tatooine/line.h	/^  void set_closed(bool is_closed) { m_is_closed = is_closed; }$/;"	f	struct:tatooine::line	typeref:typename:void
set_coefficients	include/tatooine/polynomial.h	/^  constexpr void set_coefficients($/;"	f	struct:tatooine::polynomial	typeref:typename:void
set_coefficients	include/tatooine/polynomial.h	/^  constexpr void set_coefficients(Coeffs... coeffs) {$/;"	f	struct:tatooine::polynomial	typeref:typename:void
set_coefficients	include/tatooine/polynomial.h	/^  constexpr void set_coefficients(std::array<Real, Degree + 1>&& coeffs) {$/;"	f	struct:tatooine::polynomial	typeref:typename:void
set_contour_color	include/tatooine/gpu/line_shader.h.in	/^  void set_contour_color(float r, float g, float b) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_contour_width	include/tatooine/gpu/line_shader.h.in	/^  void set_contour_width(float contour_width) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_data_size	include/tatooine/gpu/reduce.h.in	/^  void set_data_size(GLuint size) { set_uniform("data_size", size); }$/;"	f	struct:tatooine::gpu::reduce_buffer_shader	typeref:typename:void	file:
set_diffuse_factor	include/tatooine/gpu/line_shader.h.in	/^  void set_diffuse_factor(float diffuse_factor) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_domain_max	include/tatooine/gpu/lic.h.in	/^  void set_domain_max(GLfloat x, GLfloat y) {$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_domain_min	include/tatooine/gpu/lic.h.in	/^  void set_domain_min(GLfloat x, GLfloat y) {$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_eps	include/tatooine/diff.h	/^  void        set_eps(const vec_t& eps) { m_eps = eps; }$/;"	f	struct:tatooine::derived_field	typeref:typename:void
set_eps	include/tatooine/diff.h	/^  void        set_eps(real_t eps) { m_eps = vec_t{fill{eps}}; }$/;"	f	struct:tatooine::derived_field	typeref:typename:void
set_eps	include/tatooine/diff.h	/^  void        set_eps(vec_t&& eps) { m_eps = std::move(eps); }$/;"	f	struct:tatooine::derived_field	typeref:typename:void
set_eps	include/tatooine/ftle.h	/^  void  set_eps(const vec_t& eps) { m_flowmap_gradient.set_eps(eps); }$/;"	f	struct:tatooine::ftle	typeref:typename:void
set_eps	include/tatooine/ftle.h	/^  void  set_eps(real_t eps) { m_flowmap_gradient.set_eps(eps); }$/;"	f	struct:tatooine::ftle	typeref:typename:void
set_eps	include/tatooine/ftle.h	/^  void  set_eps(vec_t&& eps) { m_flowmap_gradient.set_eps(std::move(eps)); }$/;"	f	struct:tatooine::ftle	typeref:typename:void
set_expr	include/tatooine/symbolic_field.h	/^  void set_expr(const symtensor_t& ex) { m_expr = ex; }$/;"	f	struct:tatooine::symbolic::field	typeref:typename:void
set_expr	include/tatooine/symbolic_field.h	/^  void set_expr(symtensor_t&& ex) { m_expr = std::move(ex); }$/;"	f	struct:tatooine::symbolic::field	typeref:typename:void
set_fade_length	include/tatooine/gpu/line_shader.h.in	/^  void set_fade_length(float fade_length) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_general_alpha	include/tatooine/gpu/line_shader.h.in	/^  void set_general_alpha(float general_alpha) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_line_color	include/tatooine/gpu/line_shader.h.in	/^  void set_line_color(float r, float g, float b) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_line_width	include/tatooine/gpu/line_shader.h.in	/^  void set_line_width(float line_width) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_major_version	include/tatooine/vtk_legacy.h	/^  void        set_major_version(const unsigned short major_version) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
set_minor_version	include/tatooine/vtk_legacy.h	/^  void        set_minor_version(const unsigned short minor_version) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
set_modelview_matrix	include/tatooine/gpu/line_shader.h.in	/^  void set_modelview_matrix(const yavin::mat4& modelview_matrix) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_noise_tex_bind_point	include/tatooine/gpu/lic.h.in	/^  void set_noise_tex_bind_point(GLint b) {set_uniform("noise_tex", b);}$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_noise_tex_res	include/tatooine/gpu/lic.h.in	/^  void set_noise_tex_res(GLuint w, GLuint h) {$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_num_samples	include/tatooine/gpu/lic.h.in	/^  void set_num_samples(GLuint n) { set_uniform("num_samples", n); }$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_path	include/tatooine/vtk_legacy.h	/^  void        set_path(const std::string &path) { m_path = path; }$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
set_path	include/tatooine/vtk_legacy.h	/^  void        set_path(std::string &&path) { m_path = std::move(path); }$/;"	f	class:tatooine::vtk::legacy_file	typeref:typename:void
set_projection	include/tatooine/render_topological_skeleton.h	/^    void set_projection(const glm::mat4x4& p) { set_uniform("projection", p); }$/;"	f	struct:tatooine::render_topological_skeleton::line_shader	typeref:typename:void
set_projection	include/tatooine/render_topological_skeleton.h	/^    void set_projection(const glm::mat4x4& p) { set_uniform("projection", p); }$/;"	f	struct:tatooine::render_topological_skeleton::point_shader	typeref:typename:void
set_projection_matrix	include/tatooine/gpu/line_shader.h.in	/^  void set_projection_matrix(const yavin::mat4& projection_matrix) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_radius	include/tatooine/render_topological_skeleton.h	/^    void set_radius(const GLfloat radius) { set_uniform("radius", radius); }$/;"	f	struct:tatooine::render_topological_skeleton::point_shader	typeref:typename:void
set_radius	include/tatooine/sinuscosinus.h	/^  void set_radius(Real r) { m_radius = r; }$/;"	f	struct:tatooine::numerical::cosinussinus	typeref:typename:void
set_resolution	include/tatooine/gpu/reduce.h.in	/^  void set_resolution(GLuint w, GLuint h) {$/;"	f	struct:tatooine::gpu::reduce_tex_shader	typeref:typename:void	file:
set_shininess	include/tatooine/gpu/line_shader.h.in	/^  void set_shininess(float shininess) { set_uniform("shininess", shininess); }$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_specular_factor	include/tatooine/gpu/line_shader.h.in	/^  void set_specular_factor(float specular_factor) {$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_stepsize	include/tatooine/gpu/lic.h.in	/^  void set_stepsize(GLfloat s) { set_uniform("stepsize", s); }$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_stepsize	include/tatooine/integration/boost/boostintegrator.h	/^  void          set_stepsize(const Real stepsize) { m_stepsize = stepsize; }$/;"	f	struct:tatooine::integration::boost::integrator	typeref:typename:void
set_tau	include/tatooine/flowmap.h	/^  void set_tau(const real_t tau) { m_tau = tau; }$/;"	f	struct:tatooine::flowmap	typeref:typename:void
set_tau	include/tatooine/ftle.h	/^  void set_tau(real_t tau) { m_flowmap_gradient.internal_field().set_tau(tau); }$/;"	f	struct:tatooine::ftle	typeref:typename:void
set_time	include/tatooine/gpu/line_shader.h.in	/^  void set_time(float time) { set_uniform("time", time); }$/;"	f	struct:tatooine::gpu::line_shader	typeref:typename:void	file:
set_title	include/tatooine/vtk_legacy.h	/^  void        set_title(const std::string &title) { m_title = title; }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
set_title	include/tatooine/vtk_legacy.h	/^  void        set_title(std::string &&title) { m_title = std::move(title); }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
set_type	include/tatooine/vtk_legacy.h	/^  void        set_type(const DatasetType type) { m_dataset_type = type; }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
set_type	include/tatooine/vtk_legacy.h	/^  void        set_type(const std::string &type_str) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
set_v_tex_bind_point	include/tatooine/gpu/lic.h.in	/^  void set_v_tex_bind_point(GLint b) {set_uniform("v_tex", b);}$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_v_tex_res	include/tatooine/gpu/lic.h.in	/^  void set_v_tex_res(GLuint w, GLuint h) {$/;"	f	struct:tatooine::gpu::lic_shader	typeref:typename:void	file:
set_version	include/tatooine/vtk_legacy.h	/^  inline void set_version(const unsigned short major_version,$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
shader	include/tatooine/gpu/pathline_render_window.h	/^  std::unique_ptr<gpu::line_shader> shader;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:std::unique_ptr<gpu::line_shader>
shininess	include/tatooine/gpu/pathline_render_window.h	/^  float                             shininess;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
show_gui	include/tatooine/gpu/pathline_render_window.h	/^  bool                              show_gui;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:bool
simple_discretization	include/tatooine/streamsurface.h	/^  simple_discretization(ssf_t* ssf, size_t seedline_resolution, Real stepsize,$/;"	f	struct:tatooine::simple_discretization
simple_discretization	include/tatooine/streamsurface.h	/^struct simple_discretization : front_evolving_streamsurface_discretization<$/;"	s	namespace:tatooine
simple_tri_mesh	include/tatooine/simple_tri_mesh.h	/^  simple_tri_mesh(const simple_tri_mesh& other) : parent_t{other}, m_faces{other.m_faces} {$/;"	f	class:tatooine::simple_tri_mesh
simple_tri_mesh	include/tatooine/simple_tri_mesh.h	/^  simple_tri_mesh(const std::string& file) {$/;"	f	class:tatooine::simple_tri_mesh
simple_tri_mesh	include/tatooine/simple_tri_mesh.h	/^class simple_tri_mesh : public pointset<Real, N>{$/;"	c	namespace:tatooine
simulated_annealing	include/tatooine/simulated_annealing.h	/^auto simulated_annealing($/;"	f	namespace:tatooine	typeref:typename:auto
simulated_annealing_listener	include/tatooine/simulated_annealing.h	/^struct simulated_annealing_listener {$/;"	s	namespace:tatooine
sinks	include/tatooine/topological_skeleton.h	/^  std::vector<vec<Real, 2>> saddles, centers, sources, sinks, repelling_foci,$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
sinuscosinus	include/tatooine/sinuscosinus.h	/^  constexpr sinuscosinus() noexcept {}$/;"	f	struct:tatooine::numerical::sinuscosinus
sinuscosinus	include/tatooine/sinuscosinus.h	/^  sinuscosinus() {$/;"	f	struct:tatooine::symbolic::sinuscosinus
sinuscosinus	include/tatooine/sinuscosinus.h	/^struct sinuscosinus : field<Real, 2, 2> {$/;"	s	namespace:tatooine::symbolic
sinuscosinus	include/tatooine/sinuscosinus.h	/^struct sinuscosinus : field<sinuscosinus<Real>, Real, 2, 2> {$/;"	s	namespace:tatooine::numerical
size	include/tatooine/cache.h	/^  auto size() const { return m_data.size(); }$/;"	f	class:tatooine::cache	typeref:typename:auto
size	include/tatooine/chunked_data.h	/^  auto        size(size_t i) const { return m_data_structure.size(i); }$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
size	include/tatooine/chunked_data.h	/^  const auto& size() const { return m_data_structure.size(); }$/;"	f	struct:tatooine::chunked_data	typeref:typename:const auto &
size	include/tatooine/grid.h	/^  auto        size() const { return g->num_vertices(); }$/;"	f	struct:tatooine::grid::vertex_container	typeref:typename:auto
size	include/tatooine/grid.h	/^  constexpr auto size() const { return size(std::make_index_sequence<N>{}); }$/;"	f	class:tatooine::grid	typeref:typename:auto
size	include/tatooine/grid.h	/^  constexpr auto size(size_t i) const { return dimension(i).size(); }$/;"	f	class:tatooine::grid	typeref:typename:auto
size	include/tatooine/grid.h	/^  constexpr auto size(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
size	include/tatooine/linspace.h	/^  constexpr auto size() const { return m_size; }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
size	include/tatooine/linspace.h	/^auto size(const linspace<Real>& l) {$/;"	f	namespace:tatooine	typeref:typename:auto
size	include/tatooine/multidim_resolution.h	/^  auto size(const size_t i) const { return m_size[i]; }$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:auto
size	include/tatooine/multidim_resolution.h	/^  const auto& size() const { return m_size; }$/;"	f	class:tatooine::dynamic_multidim_resolution	typeref:typename:const auto &
size	include/tatooine/multidim_resolution.h	/^  static constexpr auto size() {$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
size	include/tatooine/multidim_resolution.h	/^  static constexpr auto size(size_t i) { return size()[i]; }$/;"	f	struct:tatooine::static_multidim_resolution	typeref:typename:auto
size	include/tatooine/property.h	/^  auto size() const { return m_data.size(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
size	include/tatooine/property.h	/^  auto size() const { return m_data.size(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
size	include/tatooine/property.h	/^  auto size() { return m_data.size(); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:auto
size	include/tatooine/property.h	/^  auto size() { return m_data.size(); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:auto
size_type	include/tatooine/property.h	/^  using size_type              = typename container_t::size_type;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::size_type
size_type	include/tatooine/property.h	/^  using size_type              = typename container_t::size_type;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::size_type
slice	include/tatooine/tensor.h	/^  constexpr auto slice(size_t fixed_index) const {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
slice	include/tatooine/tensor.h	/^  constexpr auto slice(size_t fixed_index) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
slice	include/tatooine/tensor.h	/^  constexpr auto slice(size_t fixed_index, std::index_sequence<Is...>) const {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
slice	include/tatooine/tensor.h	/^  constexpr auto slice(size_t fixed_index, std::index_sequence<Is...>) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto
sliced_indices	include/tatooine/utility.h	/^constexpr auto sliced_indices() {$/;"	f	namespace:tatooine	typeref:typename:auto
sliced_indices	include/tatooine/utility.h	/^constexpr auto sliced_indices(std::index_sequence<Is...>,$/;"	f	namespace:tatooine	typeref:typename:auto
solve_bilinear	include/tatooine/critical_points_bilinear.h	/^auto solve_bilinear(const base_tensor<T0, Real, 2>& v00,$/;"	f	namespace:tatooine::detail	typeref:typename:auto
solve_blockwise	include/tatooine/bidiagonal_system_solver.h	/^bool solve_blockwise(int _n, const T* __restrict__ _d,$/;"	f	namespace:tatooine	typeref:typename:bool
solve_qr	include/tatooine/bidiagonal_system_solver.h	/^bool solve_qr(int _n, T* __restrict__ _d, T* __restrict__ _du,$/;"	f	namespace:tatooine	typeref:typename:bool
sources	include/tatooine/topological_skeleton.h	/^  std::vector<vec<Real, 2>> saddles, centers, sources, sinks, repelling_foci,$/;"	m	struct:tatooine::topological_skeleton	typeref:typename:std::vector<vec<Real,2>>
spacetime	include/tatooine/spacetime_field.h	/^auto spacetime(const field<V, Real, N, VecDim>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
spacetime_field	include/tatooine/spacetime_field.h	/^  spacetime_field(const field<field_t, Real, N - 1, VecDim - 1>& f)$/;"	f	struct:tatooine::spacetime_field
spacetime_field	include/tatooine/spacetime_field.h	/^  spacetime_field(const field<symbolic::field<Real, N - 1, VecDim - 1>, Real,$/;"	f	struct:tatooine::spacetime_field
spacetime_field	include/tatooine/spacetime_field.h	/^struct spacetime_field$/;"	s	namespace:tatooine
spacetime_field	include/tatooine/spacetime_field.h	/^struct spacetime_field<symbolic::field<Real, N - 1, VecDim - 1>, Real, N,$/;"	s	namespace:tatooine
spacing	include/tatooine/grid.h	/^  constexpr auto spacing() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
spacing	include/tatooine/grid.h	/^  constexpr auto spacing(size_t i) const { return dimension(i).spacing(); }$/;"	f	class:tatooine::grid	typeref:typename:auto
spacing	include/tatooine/grid.h	/^  constexpr auto spacing(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
spacing	include/tatooine/grid_sampler.h	/^      std::array<Real, 3>              origin, spacing;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:std::array<Real,3>
spacing	include/tatooine/grid_sampler.h	/^      std::array<Real, 3>              origin, spacing;$/;"	m	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:std::array<Real,3>
spacing	include/tatooine/linspace.h	/^  constexpr auto spacing() const { return (m_max - m_min) \/ (m_size - 1); }$/;"	f	struct:tatooine::linspace	typeref:typename:auto
specular_factor	include/tatooine/gpu/pathline_render_window.h	/^  float                             specular_factor;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
speed	include/tatooine/gpu/pathline_render_window.h	/^  float                             speed;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
split_border_edges	include/tatooine/mesh.h	/^  auto split_border_edges(const edge_cont_t& edges) {$/;"	f	class:tatooine::mesh	typeref:typename:auto
sqr_length	include/tatooine/tensor.h	/^constexpr Real sqr_length(const base_tensor<Tensor, Real, N>& t_in) {$/;"	f	namespace:tatooine	typeref:typename:Real
sqr_norm	include/tatooine/tensor.h	/^constexpr auto sqr_norm(const base_tensor<Matrix, Real, M, N>& mat) {$/;"	f	namespace:tatooine	typeref:typename:auto
sqr_norm	include/tatooine/tensor.h	/^constexpr auto sqr_norm(const base_tensor<Matrix, Real, M, N>& mat,$/;"	f	namespace:tatooine	typeref:typename:auto
ssf	include/tatooine/streamsurface.h	/^  ssf_t*           ssf;$/;"	m	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:ssf_t *
ssf_t	include/tatooine/streamsurface.h	/^  using ssf_t            = streamsurface<Integrator, SeedcurveInterpolator,$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:streamsurface<Integrator,SeedcurveInterpolator,IntegralcurveInterpolator,V,Real,N>
ssf_t	include/tatooine/streamsurface.h	/^  using ssf_t            = typename parent_t::ssf_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::ssf_t
stack	include/tatooine/multidim_array.h	/^struct stack {};$/;"	s	namespace:tatooine
start	include/tatooine/gpu/pathline_render_window.h	/^  void start() {$/;"	f	struct:tatooine::gpu::pathline_render_window	typeref:typename:void
start_vertex	include/tatooine/streamsurface.h	/^      vertex_list_it_t start_vertex;$/;"	m	struct:tatooine::hultquist_discretization::integrate::integrated_t	typeref:typename:vertex_list_it_t
static_multidim	include/tatooine/multidim.h	/^  constexpr static_multidim(Res... res)$/;"	f	struct:tatooine::static_multidim
static_multidim	include/tatooine/multidim.h	/^  constexpr static_multidim(Ts const (&... ranges)[2])$/;"	f	struct:tatooine::static_multidim
static_multidim	include/tatooine/multidim.h	/^  constexpr static_multidim(const std::array<size_t, N>& res)$/;"	f	struct:tatooine::static_multidim
static_multidim	include/tatooine/multidim.h	/^  constexpr static_multidim(const std::pair<Ts, Ts>&... ranges)$/;"	f	struct:tatooine::static_multidim
static_multidim	include/tatooine/multidim.h	/^  constexpr static_multidim(std::array<std::pair<size_t, size_t>, N> ranges)$/;"	f	struct:tatooine::static_multidim
static_multidim	include/tatooine/multidim.h	/^  static_multidim(const std::vector<size_t>& res)$/;"	f	struct:tatooine::static_multidim
static_multidim	include/tatooine/multidim.h	/^struct static_multidim {$/;"	s	namespace:tatooine
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array($/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array() : m_data(init_data(T{})) {}$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(Ts&&... ts) : m_data{static_cast<T>(ts)...} {}$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(const fill<S>& f)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(const std::array<T, num_elements()>& data)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(ones_t \/*o*\/) : m_data(init_data(1)) {}$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(random_normal<RandomReal, Engine>&& rand)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(random_uniform<RandomReal, Engine>&& rand)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(std::array<T, num_elements()>&& data)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(std::vector<T>&& data)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  constexpr static_multidim_array(zeros_t \/*z*\/) : m_data(init_data(0)) {}$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^  static_multidim_array(const std::vector<T>& data)$/;"	f	class:tatooine::static_multidim_array
static_multidim_array	include/tatooine/multidim_array.h	/^class static_multidim_array$/;"	c	namespace:tatooine
static_multidim_iterator	include/tatooine/multidim.h	/^  constexpr static_multidim_iterator(const static_multidim<N>&        c,$/;"	f	struct:tatooine::static_multidim_iterator
static_multidim_iterator	include/tatooine/multidim.h	/^  constexpr static_multidim_iterator(const static_multidim_iterator& other)$/;"	f	struct:tatooine::static_multidim_iterator
static_multidim_iterator	include/tatooine/multidim.h	/^struct static_multidim_iterator {$/;"	s	namespace:tatooine
static_multidim_resolution	include/tatooine/multidim_resolution.h	/^struct static_multidim_resolution {$/;"	s	namespace:tatooine
status	include/tatooine/for_loop.h	/^  std::array<Int, N>&       status;$/;"	m	struct:tatooine::detail::for_loop_impl	typeref:typename:std::array<Int,N> &
status_t	include/tatooine/simulated_annealing.h	/^  using status_t = Status;$/;"	t	struct:tatooine::simulated_annealing_listener	typeref:typename:Status
step	include/tatooine/curve_to_streamline.h	/^  void step(Line& line, Real stepsize) {$/;"	f	struct:tatooine::curve_to_streamline	typeref:typename:void
stepper_t	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^  using stepper_t =$/;"	t	struct:tatooine::integration::boost::rkck54_type	typeref:typename:::boost::numeric::odeint::runge_kutta_cash_karp54<vec<Real,N>>
stepper_t	include/tatooine/integration/boost/rungekuttadopri5.h	/^  using stepper_t =$/;"	t	struct:tatooine::integration::boost::rkd5_helper	typeref:typename:::boost::numeric::odeint::runge_kutta_dopri5<vec<Real,N>>
stepper_t	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^  using stepper_t =$/;"	t	struct:tatooine::integration::boost::rkf78_helper	typeref:typename:::boost::numeric::odeint::runge_kutta_fehlberg78<vec<Real,N>>
stepsize	include/tatooine/integration/boost/boostintegrator.h	/^  Real &      stepsize() { return m_stepsize; }$/;"	f	struct:tatooine::integration::boost::integrator	typeref:typename:Real &
stepsize	include/tatooine/integration/boost/boostintegrator.h	/^  const Real &stepsize() const { return m_stepsize; }$/;"	f	struct:tatooine::integration::boost::integrator	typeref:typename:const Real &
str_to_cell_type	include/tatooine/vtk_legacy.h	/^inline CellType str_to_cell_type(const std::string &cell_type) {$/;"	f	namespace:tatooine::vtk	typeref:typename:CellType
str_to_format	include/tatooine/vtk_legacy.h	/^inline Format str_to_format(const std::string &format) {$/;"	f	namespace:tatooine::vtk	typeref:typename:Format
str_to_type	include/tatooine/vtk_legacy.h	/^inline DatasetType str_to_type(const std::string &type) {$/;"	f	namespace:tatooine::vtk	typeref:typename:DatasetType
streamline_at	include/tatooine/streamsurface.h	/^  const auto& streamline_at(Real u) const { return streamline_at(u, 0, 0); }$/;"	f	struct:tatooine::streamsurface	typeref:typename:const auto &
streamline_at	include/tatooine/streamsurface.h	/^  const auto& streamline_at(Real u, Real cache_bw_tau,$/;"	f	struct:tatooine::streamsurface	typeref:typename:const auto &
streamsurface	include/tatooine/streamsurface.h	/^  streamsurface($/;"	f	struct:tatooine::streamsurface
streamsurface	include/tatooine/streamsurface.h	/^struct streamsurface {$/;"	s	namespace:tatooine
sub	include/tatooine/grid.h	/^  auto sub(const vertex_t& begin_vertex, const vertex_t& end_vertex) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
subdivide	include/tatooine/streamsurface.h	/^  void subdivide(front_t& front, Real desired_spatial_dist, Real cache_bw_tau,$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:void
subfront_t	include/tatooine/streamsurface.h	/^  using subfront_t       = std::pair<vertex_list_t, vertex_range_t>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:std::pair<vertex_list_t,vertex_range_t>
subfront_t	include/tatooine/streamsurface.h	/^  using subfront_t       = typename parent_t::subfront_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::subfront_t
subgrid	include/tatooine/subgrid.h	/^  subgrid(const grid_vertex<Real, N>& begin,$/;"	f	struct:tatooine::subgrid
subgrid	include/tatooine/subgrid.h	/^struct subgrid {$/;"	s	namespace:tatooine
sum	include/tatooine/tensor.h	/^constexpr Real sum(const base_tensor<Tensor, Real, VecDim>& v) {$/;"	f	namespace:tatooine	typeref:typename:Real
swap_endianess	include/tatooine/swap_endianess.h	/^data_t swap_endianess(data_t data) {$/;"	f	namespace:tatooine	typeref:typename:data_t
swap_endianess	include/tatooine/swap_endianess.h	/^void swap_endianess(data_t *data, size_t n) {$/;"	f	namespace:tatooine	typeref:typename:void
swap_endianess	include/tatooine/swap_endianess.h	/^void swap_endianess(std::vector<data_t> &data) {$/;"	f	namespace:tatooine	typeref:typename:void
sym	include/tatooine/symbolic.h	/^#define sym(/;"	d
symbol	include/tatooine/symbolic.h	/^struct symbol {$/;"	s	namespace:tatooine::symbolic
symbolic	include/tatooine/abcflow.h	/^namespace tatooine::symbolic {$/;"	n	namespace:tatooine
symbolic	include/tatooine/counterexample_sadlo.h	/^namespace tatooine::symbolic {$/;"	n	namespace:tatooine
symbolic	include/tatooine/doublegyre.h	/^namespace symbolic {$/;"	n	namespace:tatooine
symbolic	include/tatooine/modified_doublegyre.h	/^namespace tatooine::symbolic {$/;"	n	namespace:tatooine
symbolic	include/tatooine/sinuscosinus.h	/^namespace tatooine::symbolic {$/;"	n	namespace:tatooine
symbolic	include/tatooine/symbolic.h	/^namespace symbolic {$/;"	n	namespace:tatooine
symbolic	include/tatooine/symbolic_field.h	/^namespace symbolic {$/;"	n	namespace:tatooine
symtensor_t	include/tatooine/symbolic_field.h	/^  using symtensor_t = tensor<GiNaC::ex, TensorDims...>;$/;"	t	struct:tatooine::symbolic::field	typeref:typename:tensor<GiNaC::ex,TensorDims...>
t	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^  using t = ::boost::numeric::odeint::controlled_runge_kutta<stepper_t>;$/;"	t	struct:tatooine::integration::boost::rkck54_type	typeref:typename:::boost::numeric::odeint::controlled_runge_kutta<stepper_t>
t	include/tatooine/symbolic_field.h	/^  static auto& t() { return symbol::t(); }$/;"	f	struct:tatooine::symbolic::field	typeref:typename:auto &
t0	include/tatooine/streamsurface.h	/^  auto t0(Real u) const { return ssf->t0(u); }$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto
t0	include/tatooine/streamsurface.h	/^  auto t0(Real u) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:auto
tangent	include/tatooine/line.h	/^  auto tangent(Real t) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent	include/tatooine/polynomial_line.h	/^  constexpr auto tangent(Real t) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
tangent	include/tatooine/polynomial_line.h	/^  constexpr auto tangent(Real t, std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::polynomial_line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, automatic_t \/*tag*\/,$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, automatic_t \/*tag*\/,$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, backward_t \/*tag*\/) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, bool prefer_calc = false) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, bool prefer_calc = false) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, central_t \/*tag*\/) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, forward_t \/*tag*\/) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const size_t i, quadratic_t \/*tag*\/) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, automatic_t tag,$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, automatic_t tag,$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, backward_t tag) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, bool prefer_calc = false) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, bool prefer_calc = false) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, central_t tag) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, forward_t tag) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangent_at	include/tatooine/line.h	/^  auto tangent_at(const tangent_idx i, quadratic_t tag) const {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto
tangent_container	include/tatooine/line.h	/^  using tangent_container = line_vertex_container<this_t, Real, N, tangent_idx,$/;"	t	struct:tatooine::line	typeref:typename:line_vertex_container<this_t,Real,N,tangent_idx,vec<Real,N>,vec<Real,N>>
tangent_idx	include/tatooine/line.h	/^  struct tangent_idx : handle {$/;"	s	struct:tatooine::line
tangent_iterator	include/tatooine/line.h	/^  using tangent_iterator =$/;"	t	struct:tatooine::line	typeref:typename:const_line_vertex_iterator<this_t,Real,N,tangent_idx,vec<Real,N>,vec<Real,N>>
tangent_iterator	include/tatooine/line.h	/^  using tangent_iterator =$/;"	t	struct:tatooine::parameterized_line	typeref:typename:const_line_vertex_iterator<this_t,Real,N,tangent_idx,vec<Real,N>,vec<Real,N>>
tangents	include/tatooine/curve_to_streamline.h	/^  std::vector<vec3>  tangents;$/;"	m	struct:tatooine::curve_to_streamline	typeref:typename:std::vector<vec3>
tangents	include/tatooine/line.h	/^  auto tangents(bool prefer_calc = false) const {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangents	include/tatooine/line.h	/^  auto tangents(bool prefer_calc = false) {$/;"	f	struct:tatooine::line	typeref:typename:auto
tangents_property	include/tatooine/line.h	/^  auto& tangents_property() {$/;"	f	struct:tatooine::line	typeref:typename:auto &
tangents_property	include/tatooine/line.h	/^  const auto& tangents_property() const {$/;"	f	struct:tatooine::line	typeref:typename:const auto &
tangents_to_property	include/tatooine/line.h	/^  auto& tangents_to_property(bool update = false) {$/;"	f	struct:tatooine::line	typeref:typename:auto &
tangents_to_property	include/tatooine/line.h	/^  auto& tangents_to_property(bool update = false) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:auto &
tatooine	include/tatooine/abcflow.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/abcflow.h	/^namespace tatooine::symbolic {$/;"	n
tatooine	include/tatooine/algorithm.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/amira_file.h	/^namespace tatooine::amira {$/;"	n
tatooine	include/tatooine/bidiagonal_system_solver.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/bind.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/boundary_switch.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/boundingbox.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/boussinesq.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/cache.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/cavity.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/cell_partition.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/chrono.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/chunked_data.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/clonable.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/concat_string_view.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/constant_vectorfield.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/constants.h	/^namespace tatooine::constants {$/;"	n
tatooine	include/tatooine/counterexample_sadlo.h	/^namespace tatooine::numerical {$/;"	n
tatooine	include/tatooine/counterexample_sadlo.h	/^namespace tatooine::symbolic {$/;"	n
tatooine	include/tatooine/critical_points.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/critical_points_bilinear.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/crtp.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/curvature_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/curve_to_streamline.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/cxxstd.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/diff.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/doublegyre.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/duffing_oscillator.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/edgeset.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/extract.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/fixed_time_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/flowmap.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/for_loop.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/ftle.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/functional.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/geometry/circle.h	/^namespace tatooine::geometry {$/;"	n
tatooine	include/tatooine/geometry/primitive.h	/^namespace tatooine::geometry {$/;"	n
tatooine	include/tatooine/gpu/first_person_window.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/gpu/lic.h.in	/^namespace tatooine::gpu {$/;"	n	file:
tatooine	include/tatooine/gpu/line_renderer.h	/^namespace tatooine::gpu {$/;"	n
tatooine	include/tatooine/gpu/line_shader.h.in	/^namespace tatooine::gpu {$/;"	n	file:
tatooine	include/tatooine/gpu/pathline_render_window.h	/^namespace tatooine::gpu {$/;"	n
tatooine	include/tatooine/gpu/reduce.h.in	/^namespace tatooine::gpu {$/;"	n	file:
tatooine	include/tatooine/gpu/upload.h	/^namespace tatooine::gpu {$/;"	n
tatooine	include/tatooine/grid.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/grid_edge.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/grid_sampler.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/grid_vertex.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/grid_vertex_edges.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/grid_vertex_neighbors.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/handle.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/hdf5.h	/^namespace tatooine::h5 {$/;"	n
tatooine	include/tatooine/helicity_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/holder.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/index_ordering.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/integration/boost/boostintegrator.h	/^namespace tatooine::integration::boost {$/;"	n
tatooine	include/tatooine/integration/boost/rungekutta4.h	/^namespace tatooine::integration::boost {$/;"	n
tatooine	include/tatooine/integration/boost/rungekuttacashkarp54.h	/^namespace tatooine::integration::boost {$/;"	n
tatooine	include/tatooine/integration/boost/rungekuttadopri5.h	/^namespace tatooine::integration::boost {$/;"	n
tatooine	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^namespace tatooine::integration::boost {$/;"	n
tatooine	include/tatooine/integration/integrator.h	/^namespace tatooine::integration {$/;"	n
tatooine	include/tatooine/integration/vclibs/rungekutta43.h	/^namespace tatooine::integration::vclibs {$/;"	n
tatooine	include/tatooine/interpolation.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/invoke_omitted.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/invoke_unpacked.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/lambda2_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/line.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/linspace.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/make_array.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/map.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/marchingcubes.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/marchingcubeslookuptable.h	/^namespace tatooine::marchingcubes_lookup {$/;"	n
tatooine	include/tatooine/math.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/memory_usage.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/mesh.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/modified_doublegyre.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/modified_doublegyre.h	/^namespace tatooine::symbolic {$/;"	n
tatooine	include/tatooine/multidim.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/multidim_array.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/multidim_resolution.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/newton_raphson.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/okubo_weiss_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/orbit.h	/^namespace tatooine::numerical {$/;"	n
tatooine	include/tatooine/parallel_vectors.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/parameterized_mesh.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/pointset.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/polynomial.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/polynomial_line.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/property.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/random.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/rbc.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/render_topological_skeleton.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/sampled_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/simple_tri_mesh.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/simulated_annealing.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/sinuscosinus.h	/^namespace tatooine::numerical {$/;"	n
tatooine	include/tatooine/sinuscosinus.h	/^namespace tatooine::symbolic {$/;"	n
tatooine	include/tatooine/spacetime_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/streamsurface.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/string_conversion.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/subgrid.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/swap_endianess.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/symbolic.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/symbolic_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/template_helper.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/tensor.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/topological_skeleton.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/type_to_str.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/type_traits.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/utility.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/variadic_helpers.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/vorticity_field.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/vtk_legacy.h	/^namespace tatooine {$/;"	n
tatooine	include/tatooine/write_png.h	/^namespace tatooine {$/;"	n
tau	include/tatooine/flowmap.h	/^  auto tau() const { return m_tau; }$/;"	f	struct:tatooine::flowmap	typeref:typename:auto
tau	include/tatooine/ftle.h	/^  auto  tau() const { return m_flowmap_gradient.internal_field().tau(); }$/;"	f	struct:tatooine::ftle	typeref:typename:auto
tau	include/tatooine/ftle.h	/^  auto& tau() { return m_flowmap_gradient.internal_field().tau(); }$/;"	f	struct:tatooine::ftle	typeref:typename:auto &
template_helper	include/tatooine/template_helper.h	/^namespace template_helper {$/;"	n	namespace:tatooine
tensor	include/tatooine/tensor.h	/^  constexpr tensor() {}$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(const Ts&... ts) : array_parent_t{ts...} {}$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(const base_tensor<OtherTensor, OtherReal, Dims...>& other) {$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(fill<FillReal> f) : array_parent_t{f} {}$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(ones_t ones) : array_parent_t{ones} {}$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(random_normal<RandomReal, Engine>&& rand)$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(random_uniform<RandomReal, Engine>&& rand)$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(tensor&& other) noexcept$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^  constexpr tensor(zeros_t zeros) : array_parent_t{zeros} {}$/;"	f	struct:tatooine::tensor
tensor	include/tatooine/tensor.h	/^struct tensor : base_tensor<tensor<Real, Dims...>, Real, Dims...>,$/;"	s	namespace:tatooine
tensor_dimension	include/tatooine/field.h	/^  static constexpr auto tensor_dimension(size_t i) {$/;"	f	struct:tatooine::field	typeref:typename:auto
tensor_parent_t	include/tatooine/tensor.h	/^  using tensor_parent_t = base_tensor<this_t, Real, Dims...>;$/;"	t	struct:tatooine::tensor	typeref:typename:base_tensor<this_t,Real,Dims...>
tensor_slice	include/tatooine/tensor.h	/^  constexpr tensor_slice(Tensor* tensor, size_t fixed_index)$/;"	f	struct:tatooine::tensor_slice
tensor_slice	include/tatooine/tensor.h	/^struct tensor_slice : base_tensor<tensor_slice<Tensor, Real, FixedDim, Dims...>,$/;"	s	namespace:tatooine
tensor_t	include/tatooine/field.h	/^  using tensor_t = std::conditional_t<sizeof...(TensorDims) == 0, Real,$/;"	t	struct:tatooine::field
tensor_t	include/tatooine/grid_sampler.h	/^  using tensor_t = typename field<Field, real_t, N, TensorDims...>::tensor_t;$/;"	t	function:tatooine::resample	typeref:typename:field<Field,real_t,N,TensorDims...>::tensor_t
tensor_t	include/tatooine/tensor.h	/^  using tensor_t          = Tensor;$/;"	t	struct:tatooine::tensor_slice	typeref:typename:Tensor
tensor_t	include/tatooine/tensor.h	/^  using tensor_t   = Tensor;$/;"	t	struct:tatooine::base_tensor	typeref:typename:Tensor
tensor_type	include/tatooine/field.h	/^using tensor_type = typename tensor_type_impl<Real, Dims...>::type;$/;"	t	namespace:tatooine	typeref:typename:tensor_type_impl<Real,Dims...>::type
tensor_type_impl	include/tatooine/field.h	/^struct tensor_type_impl {$/;"	s	namespace:tatooine
tensor_type_impl	include/tatooine/field.h	/^struct tensor_type_impl<Real, M, N> {$/;"	s	namespace:tatooine
tensor_type_impl	include/tatooine/field.h	/^struct tensor_type_impl<Real, N> {$/;"	s	namespace:tatooine
this_t	include/tatooine/abcflow.h	/^  using this_t   = abcflow<real_t>;$/;"	t	struct:tatooine::numerical::abcflow	typeref:typename:abcflow<real_t>
this_t	include/tatooine/abcflow.h	/^  using this_t   = abcflow<real_t>;$/;"	t	struct:tatooine::symbolic::abcflow	typeref:typename:abcflow<real_t>
this_t	include/tatooine/boundingbox.h	/^  using this_t = boundingbox<Real, N>;$/;"	t	struct:tatooine::boundingbox	typeref:typename:boundingbox<Real,N>
this_t	include/tatooine/chunked_data.h	/^  using this_t    = chunked_data<T, N, ChunkRes>;$/;"	t	struct:tatooine::chunked_data	typeref:typename:chunked_data<T,N,ChunkRes>
this_t	include/tatooine/constant_vectorfield.h	/^  using this_t   = constant_vectorfield<Real, N>;$/;"	t	struct:tatooine::constant_vectorfield	typeref:typename:constant_vectorfield<Real,N>
this_t	include/tatooine/counterexample_sadlo.h	/^  using this_t   = counterexample_sadlo<Real>;$/;"	t	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:counterexample_sadlo<Real>
this_t	include/tatooine/counterexample_sadlo.h	/^  using this_t   = counterexample_sadlo<Real>;$/;"	t	struct:tatooine::symbolic::counterexample_sadlo	typeref:typename:counterexample_sadlo<Real>
this_t	include/tatooine/curvature_field.h	/^  using this_t   = curvature_field<V>;$/;"	t	class:tatooine::curvature_field	typeref:typename:curvature_field<V>
this_t	include/tatooine/diff.h	/^  using this_t   = derived_field<Field, TensorDims...>;$/;"	t	struct:tatooine::derived_field	typeref:typename:derived_field<Field,TensorDims...>
this_t	include/tatooine/doublegyre.h	/^  using this_t   = doublegyre<Real>;$/;"	t	struct:tatooine::numerical::doublegyre	typeref:typename:doublegyre<Real>
this_t	include/tatooine/doublegyre.h	/^  using this_t   = doublegyre<Real>;$/;"	t	struct:tatooine::symbolic::doublegyre	typeref:typename:doublegyre<Real>
this_t	include/tatooine/duffing_oscillator.h	/^  using this_t   = duffing_oscillator<Real>;$/;"	t	struct:tatooine::numerical::duffing_oscillator	typeref:typename:duffing_oscillator<Real>
this_t	include/tatooine/duffing_oscillator.h	/^  using this_t   = forced_duffing_oscillator<Real>;$/;"	t	struct:tatooine::numerical::forced_duffing_oscillator	typeref:typename:forced_duffing_oscillator<Real>
this_t	include/tatooine/edgeset.h	/^  using this_t   = edgeset<Real, N>;$/;"	t	class:tatooine::edgeset	typeref:typename:edgeset<Real,N>
this_t	include/tatooine/field.h	/^  using this_t   = field<Derived, Real, N, TensorDims...>;$/;"	t	struct:tatooine::field	typeref:typename:field<Derived,Real,N,TensorDims...>
this_t	include/tatooine/field.h	/^  using this_t   = unary_operation_field<Field, Real, N, Op, TensorDims...>;$/;"	t	struct:tatooine::unary_operation_field	typeref:typename:unary_operation_field<Field,Real,N,Op,TensorDims...>
this_t	include/tatooine/field.h	/^  using this_t =$/;"	t	struct:tatooine::binary_operation_field	typeref:typename:binary_operation_field<LhsField,RhsField,Op,Real,N,TensorDims...>
this_t	include/tatooine/fixed_time_field.h	/^  using this_t   = fixed_time_field<Field, Real, N, TensorDims...>;$/;"	t	struct:tatooine::fixed_time_field	typeref:typename:fixed_time_field<Field,Real,N,TensorDims...>
this_t	include/tatooine/flowmap.h	/^  using this_t   = flowmap<V, Integrator>;$/;"	t	struct:tatooine::flowmap	typeref:typename:flowmap<V,Integrator>
this_t	include/tatooine/ftle.h	/^  using this_t       = ftle<V, Integrator>;$/;"	t	struct:tatooine::ftle	typeref:typename:ftle<V,Integrator>
this_t	include/tatooine/geometry/circle.h	/^  using this_t   = circle<Real>;$/;"	t	struct:tatooine::geometry::circle	typeref:typename:circle<Real>
this_t	include/tatooine/grid.h	/^  using this_t        = grid<Real, N>;$/;"	t	class:tatooine::grid	typeref:typename:grid<Real,N>
this_t	include/tatooine/grid_sampler.h	/^  using this_t   = base_grid_sampler<Derived, Real, N, Data, HeadInterpolator,$/;"	t	struct:tatooine::base_grid_sampler	typeref:typename:base_grid_sampler<Derived,Real,N,Data,HeadInterpolator,TailInterpolators...>
this_t	include/tatooine/grid_sampler.h	/^  using this_t =$/;"	t	struct:tatooine::grid_sampler	typeref:typename:grid_sampler<Real,N,Data,HeadInterpolator,TailInterpolators...>
this_t	include/tatooine/grid_sampler.h	/^  using this_t =$/;"	t	struct:tatooine::grid_sampler_iterator	typeref:typename:grid_sampler_iterator<Real,N,Data,Grid,TailInterpolators...>
this_t	include/tatooine/helicity_field.h	/^  using this_t = helicity_field<V>;$/;"	t	class:tatooine::helicity_field	typeref:typename:helicity_field<V>
this_t	include/tatooine/integration/boost/boostintegrator.h	/^  using this_t     = integrator<Real, N, Stepper>;$/;"	t	struct:tatooine::integration::boost::integrator	typeref:typename:integrator<Real,N,Stepper>
this_t	include/tatooine/integration/vclibs/rungekutta43.h	/^  using this_t     = rungekutta43<Real, N, InterpolationKernel>;$/;"	t	struct:tatooine::integration::vclibs::rungekutta43	typeref:typename:rungekutta43<Real,N,InterpolationKernel>
this_t	include/tatooine/lambda2_field.h	/^  using this_t = lambda2_field<V>;$/;"	t	class:tatooine::lambda2_field	typeref:typename:lambda2_field<V>
this_t	include/tatooine/line.h	/^  using this_t          = line<Real, N>;$/;"	t	struct:tatooine::line	typeref:typename:line<Real,N>
this_t	include/tatooine/line.h	/^  using this_t   = parameterized_line<Real, N, InterpolationKernel>;$/;"	t	struct:tatooine::parameterized_line	typeref:typename:parameterized_line<Real,N,InterpolationKernel>
this_t	include/tatooine/line.h	/^  using this_t = line_vertex_iterator<Line, Real, N, Handle, Value, Reference>;$/;"	t	struct:tatooine::line_vertex_iterator	typeref:typename:line_vertex_iterator<Line,Real,N,Handle,Value,Reference>
this_t	include/tatooine/line.h	/^  using this_t =$/;"	t	struct:tatooine::const_line_vertex_iterator	typeref:typename:const_line_vertex_iterator<Line,Real,N,Handle,Value,Reference>
this_t	include/tatooine/linspace.h	/^  using this_t         = linspace<Real>;$/;"	t	struct:tatooine::linspace	typeref:typename:linspace<Real>
this_t	include/tatooine/linspace.h	/^  using this_t = linspace_iterator<Real>;$/;"	t	struct:tatooine::linspace_iterator	typeref:typename:linspace_iterator<Real>
this_t	include/tatooine/mesh.h	/^  using this_t   = mesh<Real, N>;$/;"	t	class:tatooine::mesh	typeref:typename:mesh<Real,N>
this_t	include/tatooine/modified_doublegyre.h	/^  using this_t   = modified_doublegyre<Real>;$/;"	t	struct:tatooine::numerical::modified_doublegyre	typeref:typename:modified_doublegyre<Real>
this_t	include/tatooine/modified_doublegyre.h	/^  using this_t   = modified_doublegyre<Real>;$/;"	t	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:modified_doublegyre<Real>
this_t	include/tatooine/multidim_array.h	/^  using this_t   = dynamic_multidim_array<T, Indexing>;$/;"	t	class:tatooine::dynamic_multidim_array	typeref:typename:dynamic_multidim_array<T,Indexing>
this_t	include/tatooine/multidim_array.h	/^  using this_t   = static_multidim_array<T, Indexing, MemLoc, Resolution...>;$/;"	t	class:tatooine::static_multidim_array	typeref:typename:static_multidim_array<T,Indexing,MemLoc,Resolution...>
this_t	include/tatooine/okubo_weiss_field.h	/^  using this_t = okubo_weiss_field<V, 3>;$/;"	t	class:tatooine::okubo_weiss_field	typeref:typename:okubo_weiss_field<V,3>
this_t	include/tatooine/okubo_weiss_field.h	/^  using this_t = okubo_weiss_field<V, N>;$/;"	t	class:tatooine::okubo_weiss_field	typeref:typename:okubo_weiss_field<V,N>
this_t	include/tatooine/orbit.h	/^  using this_t   = orbit<Real>;$/;"	t	struct:tatooine::numerical::orbit	typeref:typename:orbit<Real>
this_t	include/tatooine/parameterized_mesh.h	/^  using this_t   = parameterized_mesh<Real, N, Interpolator>;$/;"	t	struct:tatooine::parameterized_mesh	typeref:typename:parameterized_mesh<Real,N,Interpolator>
this_t	include/tatooine/pointset.h	/^  using this_t = pointset<Real, N>;$/;"	t	struct:tatooine::pointset	typeref:typename:pointset<Real,N>
this_t	include/tatooine/property.h	/^  using this_t                 = deque_property_impl<Handle, T>;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:deque_property_impl<Handle,T>
this_t	include/tatooine/property.h	/^  using this_t                 = vector_property_impl<Handle, T>;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:vector_property_impl<Handle,T>
this_t	include/tatooine/property.h	/^  using this_t = deque_property<Handle>;$/;"	t	struct:tatooine::deque_property	typeref:typename:deque_property<Handle>
this_t	include/tatooine/property.h	/^  using this_t = vector_property<Handle>;$/;"	t	struct:tatooine::vector_property	typeref:typename:vector_property<Handle>
this_t	include/tatooine/rbc.h	/^  using this_t   = rbc;$/;"	t	struct:tatooine::rbc	typeref:typename:rbc
this_t	include/tatooine/sampled_field.h	/^  using this_t   = sampled_field<Sampler, Real, N, TensorDims...>;$/;"	t	struct:tatooine::sampled_field	typeref:typename:sampled_field<Sampler,Real,N,TensorDims...>
this_t	include/tatooine/simple_tri_mesh.h	/^  using this_t   = simple_tri_mesh<Real, N>;$/;"	t	class:tatooine::simple_tri_mesh	typeref:typename:simple_tri_mesh<Real,N>
this_t	include/tatooine/sinuscosinus.h	/^  using this_t   = cosinussinus<Real>;$/;"	t	struct:tatooine::numerical::cosinussinus	typeref:typename:cosinussinus<Real>
this_t	include/tatooine/sinuscosinus.h	/^  using this_t   = cosinussinus<Real>;$/;"	t	struct:tatooine::symbolic::cosinussinus	typeref:typename:cosinussinus<Real>
this_t	include/tatooine/sinuscosinus.h	/^  using this_t   = sinuscosinus<Real>;$/;"	t	struct:tatooine::numerical::sinuscosinus	typeref:typename:sinuscosinus<Real>
this_t	include/tatooine/sinuscosinus.h	/^  using this_t   = sinuscosinus<Real>;$/;"	t	struct:tatooine::symbolic::sinuscosinus	typeref:typename:sinuscosinus<Real>
this_t	include/tatooine/spacetime_field.h	/^  using this_t   = spacetime_field<field_t, Real, N, VecDim>;$/;"	t	struct:tatooine::spacetime_field	typeref:typename:spacetime_field<field_t,Real,N,VecDim>
this_t	include/tatooine/streamsurface.h	/^  using this_t       = streamsurface<Integrator, SeedcurveInterpolator,$/;"	t	struct:tatooine::streamsurface	typeref:typename:streamsurface<Integrator,SeedcurveInterpolator,IntegralcurveInterpolator,V,Real,N>
this_t	include/tatooine/streamsurface.h	/^  using this_t = front_evolving_streamsurface_discretization<$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:front_evolving_streamsurface_discretization<Integrator,SeedcurveInterpolator,IntegralcurveInterpolator,V,Real,N>
this_t	include/tatooine/streamsurface.h	/^  using this_t =$/;"	t	struct:tatooine::hultquist_discretization	typeref:typename:hultquist_discretization<Integrator,SeedcurveInterpolator,IntegralcurveInterpolator,V,Real,N>
this_t	include/tatooine/symbolic_field.h	/^  using this_t   = field<real_t, N, TensorDims...>;$/;"	t	struct:tatooine::symbolic::field	typeref:typename:field<real_t,N,TensorDims...>
this_t	include/tatooine/tensor.h	/^  using this_t            = tensor_slice<Tensor, Real, FixedDim, Dims...>;$/;"	t	struct:tatooine::tensor_slice	typeref:typename:tensor_slice<Tensor,Real,FixedDim,Dims...>
this_t	include/tatooine/tensor.h	/^  using this_t          = tensor<Real, Dims...>;$/;"	t	struct:tatooine::tensor	typeref:typename:tensor<Real,Dims...>
this_t	include/tatooine/tensor.h	/^  using this_t     = base_tensor<Tensor, Real, Dims...>;$/;"	t	struct:tatooine::base_tensor	typeref:typename:base_tensor<Tensor,Real,Dims...>
this_t	include/tatooine/tensor.h	/^  using this_t   = const_imag_complex_tensor<Tensor, Real, Dims...>;$/;"	t	struct:tatooine::const_imag_complex_tensor	typeref:typename:const_imag_complex_tensor<Tensor,Real,Dims...>
this_t	include/tatooine/tensor.h	/^  using this_t   = const_real_complex_tensor<Tensor, Real, Dims...>;$/;"	t	struct:tatooine::const_real_complex_tensor	typeref:typename:const_real_complex_tensor<Tensor,Real,Dims...>
this_t	include/tatooine/tensor.h	/^  using this_t   = imag_complex_tensor<Tensor, Real, Dims...>;$/;"	t	struct:tatooine::imag_complex_tensor	typeref:typename:imag_complex_tensor<Tensor,Real,Dims...>
this_t	include/tatooine/tensor.h	/^  using this_t   = real_complex_tensor<Tensor, Real, Dims...>;$/;"	t	struct:tatooine::real_complex_tensor	typeref:typename:real_complex_tensor<Tensor,Real,Dims...>
this_t	include/tatooine/vorticity_field.h	/^  using this_t = vorticity_field<V>;$/;"	t	class:tatooine::vorticity_field	typeref:typename:vorticity_field<V>
tidy_up	include/tatooine/edgeset.h	/^  void tidy_up() {$/;"	f	class:tatooine::edgeset	typeref:typename:void
tidy_up	include/tatooine/mesh.h	/^  void tidy_up() {$/;"	f	class:tatooine::mesh	typeref:typename:void
tidy_up	include/tatooine/pointset.h	/^  void tidy_up() {$/;"	f	struct:tatooine::pointset	typeref:typename:void
time	include/tatooine/chrono.h	/^  using time  = std::chrono::high_resolution_clock;$/;"	t	function:tatooine::measure	typeref:typename:std::chrono::high_resolution_clock
time	include/tatooine/gpu/pathline_render_window.h	/^  float                             time;$/;"	m	struct:tatooine::gpu::pathline_render_window	typeref:typename:float
time_not_found	include/tatooine/line.h	/^  struct time_not_found : std::exception {};$/;"	s	struct:tatooine::parameterized_line
timeoffset	include/tatooine/modified_doublegyre.h	/^  constexpr static auto timeoffset(const Real t) {$/;"	f	struct:tatooine::numerical::modified_doublegyre	typeref:typename:auto
timeoffset	include/tatooine/modified_doublegyre.h	/^  static auto timeoffset() {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:auto
timeoffset	include/tatooine/modified_doublegyre.h	/^  static auto timeoffset(Real time) {$/;"	f	struct:tatooine::symbolic::modified_doublegyre	typeref:typename:auto
title	include/tatooine/vtk_legacy.h	/^  const auto &title() const { return m_title; }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:const auto &
to_array	include/tatooine/grid_vertex.h	/^  constexpr auto to_array() const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
to_array	include/tatooine/grid_vertex.h	/^  constexpr auto to_array(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
to_begin	include/tatooine/linspace.h	/^  constexpr void to_begin() { m_i = 0; }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:void
to_edge_seq	include/tatooine/grid.h	/^  auto to_edge_seq(const vertex_seq_t& vertex_seq) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
to_end	include/tatooine/linspace.h	/^  constexpr void to_end() { m_i = m_lin->size(); }$/;"	f	struct:tatooine::linspace_iterator	typeref:typename:void
to_ginac_matrix	include/tatooine/tensor.h	/^auto to_ginac_matrix(const base_tensor<Tensor, GiNaC::ex, M, N>& m_in) {$/;"	f	namespace:tatooine	typeref:typename:auto
to_mat	include/tatooine/tensor.h	/^auto to_mat(const GiNaC::matrix& m_in) {$/;"	f	namespace:tatooine	typeref:typename:auto
to_string	include/tatooine/grid_edge.h	/^  auto to_string() {$/;"	f	struct:tatooine::grid_edge	typeref:typename:auto
to_string	include/tatooine/grid_vertex.h	/^  auto to_string() const {$/;"	f	struct:tatooine::grid_vertex	typeref:typename:auto
to_triangle_io	include/tatooine/mesh.h	/^  auto to_triangle_io() const {$/;"	f	class:tatooine::mesh	typeref:typename:auto
to_triangle_io	include/tatooine/mesh.h	/^  auto to_triangle_io(const std::vector<vertex>& vertices) const {$/;"	f	class:tatooine::mesh	typeref:typename:auto
top_grid	include/tatooine/grid_sampler.h	/^  top_grid_t* top_grid;$/;"	m	struct:tatooine::grid_sampler_view	typeref:typename:top_grid_t *
topological_skeleton	include/tatooine/topological_skeleton.h	/^struct topological_skeleton<Real, 2, Interpolator> {$/;"	s	namespace:tatooine
total_memory	include/tatooine/memory_usage.h	/^inline size_t total_memory() {$/;"	f	namespace:tatooine	typeref:typename:size_t
transpose	include/tatooine/tensor.h	/^auto transpose(base_tensor<Matrix, Real, M, N>& matrix) {$/;"	f	namespace:tatooine	typeref:typename:auto
transpose	include/tatooine/tensor.h	/^auto transpose(const base_tensor<Matrix, Real, M, N>& matrix) {$/;"	f	namespace:tatooine	typeref:typename:auto
transpose	include/tatooine/tensor.h	/^auto& transpose(base_tensor<transposed_matrix<Matrix, M, N>, Real, M, N>&$/;"	f	namespace:tatooine	typeref:typename:auto &
transpose	include/tatooine/tensor.h	/^const auto& transpose(const base_tensor<const_transposed_matrix<Matrix, M, N>,$/;"	f	namespace:tatooine	typeref:typename:const auto &
transpose	include/tatooine/tensor.h	/^const auto& transpose(const base_tensor<transposed_matrix<Matrix, M, N>, Real,$/;"	f	namespace:tatooine	typeref:typename:const auto &
transposed_matrix	include/tatooine/tensor.h	/^  transposed_matrix($/;"	f	struct:tatooine::transposed_matrix
transposed_matrix	include/tatooine/tensor.h	/^struct transposed_matrix : base_tensor<transposed_matrix<Matrix, M, N>,$/;"	s	namespace:tatooine
tri_table	include/tatooine/marchingcubeslookuptable.h	/^constexpr std::array<std::array<int, 16>, 256> tri_table = {$/;"	v	namespace:tatooine::marchingcubes_lookup	typeref:typename:std::array<std::array<int,16>,256>
triangulate_timeline	include/tatooine/streamsurface.h	/^  void triangulate_timeline(const front_t& front) {$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:void
turned	include/tatooine/parallel_vectors.h	/^bool turned(size_t ix, size_t iy, size_t iz) {$/;"	f	namespace:tatooine::detail	typeref:typename:bool
type	include/tatooine/field.h	/^  using type = mat<Real, M, N>;$/;"	t	struct:tatooine::tensor_type_impl	typeref:typename:mat<Real,M,N>
type	include/tatooine/field.h	/^  using type = tensor<Real, Dims...>;$/;"	t	struct:tatooine::tensor_type_impl	typeref:typename:tensor<Real,Dims...>
type	include/tatooine/field.h	/^  using type = vec<Real, N>;$/;"	t	struct:tatooine::tensor_type_impl	typeref:typename:vec<Real,N>
type	include/tatooine/grid_sampler.h	/^      vtk::DatasetType                 type = vtk::UNKNOWN_TYPE;$/;"	m	struct:tatooine::grid_sampler::read_vtk::listener_t	typeref:typename:vtk::DatasetType
type	include/tatooine/grid_sampler.h	/^      vtk::DatasetType                 type = vtk::UNKNOWN_TYPE;$/;"	m	struct:tatooine::grid_sampler::read_vtk_scalars::listener_t	typeref:typename:vtk::DatasetType
type	include/tatooine/grid_sampler.h	/^  using type       = std::decay_t<Data>&;$/;"	t	struct:tatooine::base_grid_sampler_at	typeref:typename:std::decay_t<Data> &
type	include/tatooine/grid_sampler.h	/^  using type = grid_sampler_view<Real, N - 1, Data, Grid, Interpolators...>;$/;"	t	struct:tatooine::base_grid_sampler_at	typeref:typename:grid_sampler_view<Real,N-1,Data,Grid,Interpolators...>
type	include/tatooine/integration/boost/rungekutta4.h	/^  using type = ::boost::numeric::odeint::runge_kutta4<vec<Real, N>>;$/;"	t	struct:tatooine::integration::boost::rk4_helper	typeref:typename:::boost::numeric::odeint::runge_kutta4<vec<Real,N>>
type	include/tatooine/integration/boost/rungekuttadopri5.h	/^  using type = ::boost::numeric::odeint::controlled_runge_kutta<stepper_t>;$/;"	t	struct:tatooine::integration::boost::rkd5_helper	typeref:typename:::boost::numeric::odeint::controlled_runge_kutta<stepper_t>
type	include/tatooine/integration/boost/rungekuttafehlberg78.h	/^  using type = ::boost::numeric::odeint::controlled_runge_kutta<stepper_t>;$/;"	t	struct:tatooine::integration::boost::rkf78_helper	typeref:typename:::boost::numeric::odeint::controlled_runge_kutta<stepper_t>
type	include/tatooine/property.h	/^  const std::type_info& type() const override { return typeid(T); }$/;"	f	struct:tatooine::deque_property_impl	typeref:typename:const std::type_info &
type	include/tatooine/property.h	/^  const std::type_info& type() const override { return typeid(T); }$/;"	f	struct:tatooine::vector_property_impl	typeref:typename:const std::type_info &
type	include/tatooine/template_helper.h	/^  using type = T;$/;"	t	struct:tatooine::template_helper::back_t	typeref:typename:T
type	include/tatooine/template_helper.h	/^  using type = T;$/;"	t	struct:tatooine::template_helper::front_t	typeref:typename:T
type	include/tatooine/template_helper.h	/^  using type = T;$/;"	t	struct:tatooine::template_helper::get_t	typeref:typename:T
type	include/tatooine/template_helper.h	/^  using type = typename back_t<T1, Ts...>::type;$/;"	t	struct:tatooine::template_helper::back_t	typeref:typename:back_t<T1,Ts...>::type
type	include/tatooine/template_helper.h	/^  using type = typename get_t<i - 1, Ts...>::type;$/;"	t	struct:tatooine::template_helper::get_t	typeref:typename:get_t<i-1,Ts...>::type
type	include/tatooine/tensor.h	/^  using type =$/;"	t	struct:tatooine::cast_tensor_real
type	include/tatooine/type_traits.h	/^  using type = promote_t<T0, promote_t<T1, T2, Ts...>>;$/;"	t	struct:tatooine::promote	typeref:typename:promote_t<T0,promote_t<T1,T2,Ts...>>
type	include/tatooine/type_traits.h	/^  using type =$/;"	t	struct:tatooine::promote
type	include/tatooine/utility.h	/^  using type = double;$/;"	t	struct:tatooine::internal_data_type	typeref:typename:double
type	include/tatooine/utility.h	/^  using type = float;$/;"	t	struct:tatooine::internal_data_type	typeref:typename:float
type	include/tatooine/variadic_helpers.h	/^  using type = T;$/;"	t	struct:tatooine::back	typeref:typename:T
type	include/tatooine/variadic_helpers.h	/^  using type = T;$/;"	t	struct:tatooine::front	typeref:typename:T
type	include/tatooine/variadic_helpers.h	/^  using type = typename back<Ts...>::type;$/;"	t	struct:tatooine::back	typeref:typename:back<Ts...>::type
type	include/tatooine/vtk_legacy.h	/^  const auto &type() const { return m_dataset_type; }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:const auto &
type_name	include/tatooine/utility.h	/^inline std::string type_name() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_name	include/tatooine/utility.h	/^inline std::string type_name(T&& \/*t*\/) {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_str	include/tatooine/vtk_legacy.h	/^  auto        type_str() const { return type_to_str(m_dataset_type); }$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:auto
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<char>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<double>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<float>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<int>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<long double>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<long long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<unsigned char>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<unsigned int>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<unsigned long long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^constexpr std::string_view type_to_str<unsigned long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string_view
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<char>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<double>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<float>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<int>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<long double>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<long long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<unsigned char>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<unsigned int>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<unsigned long long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/type_to_str.h	/^std::string type_to_str<unsigned long>() {$/;"	f	namespace:tatooine	typeref:typename:std::string
type_to_str	include/tatooine/vtk_legacy.h	/^constexpr std::string_view type_to_str(DatasetType type) {$/;"	f	namespace:tatooine::vtk	typeref:typename:std::string_view
type_to_str	include/tatooine/vtk_legacy.h	/^std::string type_to_str(DatasetType type) {$/;"	f	namespace:tatooine::vtk	typeref:typename:std::string
type_to_str_false_type	include/tatooine/type_to_str.h	/^struct type_to_str_false_type : std::false_type {};$/;"	s	namespace:tatooine
unary_operation	include/tatooine/multidim_array.h	/^  constexpr void unary_operation(F&& f) {$/;"	f	class:tatooine::static_multidim_array	typeref:typename:void
unary_operation	include/tatooine/multidim_array.h	/^  void unary_operation(F&& f) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:void
unary_operation	include/tatooine/tensor.h	/^  auto& unary_operation(F&& f) {$/;"	f	struct:tatooine::base_tensor	typeref:typename:auto &
unary_operation	include/tatooine/tensor.h	/^  auto& unary_operation(F&& f) {$/;"	f	struct:tatooine::tensor	typeref:typename:auto &
unary_operation	include/tatooine/tensor.h	/^constexpr auto unary_operation(F&&                                       f,$/;"	f	namespace:tatooine	typeref:typename:auto
unary_operation	include/tatooine/tensor.h	/^constexpr auto unary_operation(F&&                                    f,$/;"	f	namespace:tatooine	typeref:typename:auto
unary_operation	include/tatooine/tensor.h	/^constexpr auto unary_operation(F&&                                 f,$/;"	f	namespace:tatooine	typeref:typename:auto
unary_operation_field	include/tatooine/field.h	/^  unary_operation_field(const field<Field, RealIn, NIn, TensorDimsIn...>& f,$/;"	f	struct:tatooine::unary_operation_field
unary_operation_field	include/tatooine/field.h	/^struct unary_operation_field$/;"	s	namespace:tatooine
unchunk	include/tatooine/chunked_data.h	/^  auto unchunk() const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
unchunk_plain	include/tatooine/chunked_data.h	/^  auto unchunk_plain() const {$/;"	f	struct:tatooine::chunked_data	typeref:typename:auto
uniform_parameterization	include/tatooine/line.h	/^  void uniform_parameterization(Real t0 = 0) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
update	include/tatooine/gpu/first_person_window.h	/^  void update(F&& f, const std::chrono::duration<double>& dt) {$/;"	f	struct:tatooine::first_person_window	typeref:typename:void
update_interpolator	include/tatooine/line.h	/^  void update_interpolator(size_t i) {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
update_interpolators	include/tatooine/line.h	/^  void update_interpolators() {$/;"	f	struct:tatooine::parameterized_line	typeref:typename:void
update_shader	include/tatooine/gpu/pathline_render_window.h	/^  void update_shader() {$/;"	f	struct:tatooine::gpu::pathline_render_window	typeref:typename:void
upload	include/tatooine/gpu/line_renderer.h	/^auto upload(const parameterized_line<Real, N, Interpolator>& l) {$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/line_renderer.h	/^auto upload(const std::vector<parameterized_line<Real, N, Interpolator>>& ls) {$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload($/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const field<V, Real, 2, 2>& v, const grid<Real, 2>& discrete_domain,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const field<V, Real, 2, 2>& v,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const field<V, Real, 3, 3>& v, const grid<Real, 3>& discrete_domain,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const field<V, Real, 3, 3>& v,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const grid_sampler<Real, 2, vec<Real, 2>, InterpolatorX,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const sampled_field<$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
upload	include/tatooine/gpu/upload.h	/^auto upload(const sampled_field<grid_sampler<Real, 3, vec<Real, 3>,$/;"	f	namespace:tatooine::gpu	typeref:typename:auto
usage_t	include/tatooine/cache.h	/^  using usage_t        = std::list<const_iterator>;$/;"	t	class:tatooine::cache	typeref:typename:std::list<const_iterator>
uv	include/tatooine/parameterized_mesh.h	/^  auto&       uv(vertex v) { return m_uv->at(v); }$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:auto &
uv	include/tatooine/parameterized_mesh.h	/^  const auto& uv(vertex v) const { return m_uv->at(v); }$/;"	f	struct:tatooine::parameterized_mesh	typeref:typename:const auto &
uv	include/tatooine/streamsurface.h	/^  auto&       uv(vertex v) { return m_uv_property->at(v); }$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:auto &
uv	include/tatooine/streamsurface.h	/^  const auto& uv(vertex v) const { return m_uv_property->at(v); }$/;"	f	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:const auto &
uv_prop_t	include/tatooine/parameterized_mesh.h	/^  using uv_prop_t = vertex_prop<uv_t>;$/;"	t	struct:tatooine::parameterized_mesh	typeref:typename:vertex_prop<uv_t>
uv_property_t	include/tatooine/streamsurface.h	/^  using uv_property_t    = typename parent_t::template vertex_property_t<uv_t>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:parent_t::template vertex_property_t<uv_t>
uv_t	include/tatooine/parameterized_mesh.h	/^  using uv_t      = vec<Real, 2>;$/;"	t	struct:tatooine::parameterized_mesh	typeref:typename:vec<Real,2>
uv_t	include/tatooine/streamsurface.h	/^  using uv_t             = vec2;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:vec2
v	include/tatooine/grid_vertex.h	/^  grid_vertex<Real, N> v;$/;"	m	struct:tatooine::grid_vertex_iterator	typeref:typename:grid_vertex<Real,N>
v	include/tatooine/pointset.h	/^    vertex          v;$/;"	m	struct:tatooine::pointset::vertex_iterator	typeref:typename:vertex
v	include/tatooine/streamsurface.h	/^      vertex           v;$/;"	m	struct:tatooine::hultquist_discretization::integrate::integrated_t	typeref:typename:vertex
v	include/tatooine/subgrid.h	/^  grid_vertex<Real, N> v;$/;"	m	struct:tatooine::subgrid::vertex_iterator	typeref:typename:grid_vertex<Real,N>
value	include/tatooine/concat_string_view.h	/^  static constexpr std::string_view value {c_str};$/;"	m	struct:tatooine::c_str_assembler	typeref:typename:std::string_view
value	include/tatooine/multidim_array.h	/^  Real value;$/;"	m	struct:tatooine::fill	typeref:typename:Real
value	include/tatooine/template_helper.h	/^  static constexpr T value = V0;$/;"	m	struct:tatooine::template_helper::getval_impl	typeref:typename:T
value	include/tatooine/template_helper.h	/^  static constexpr T value = getval_impl<i - 1, T, Vs...>::value;$/;"	m	struct:tatooine::template_helper::getval_impl	typeref:typename:T
value	include/tatooine/template_helper.h	/^  static constexpr bool value = true;$/;"	m	struct:tatooine::template_helper::all_same_t	typeref:typename:bool
value	include/tatooine/template_helper.h	/^  static constexpr bool value =$/;"	m	struct:tatooine::template_helper::all_same_t	typeref:typename:bool
value_type	include/tatooine/grid_vertex.h	/^  using value_type        = grid_vertex<Real, N>;$/;"	t	struct:tatooine::grid_vertex_iterator	typeref:typename:grid_vertex<Real,N>
value_type	include/tatooine/property.h	/^  using value_type             = typename container_t::value_type;$/;"	t	struct:tatooine::deque_property_impl	typeref:typename:container_t::value_type
value_type	include/tatooine/property.h	/^  using value_type             = typename container_t::value_type;$/;"	t	struct:tatooine::vector_property_impl	typeref:typename:container_t::value_type
value_type	include/tatooine/tensor.h	/^  using value_type = Real;$/;"	t	struct:tatooine::base_tensor	typeref:typename:Real
vclibs	include/tatooine/integration/vclibs/rungekutta43.h	/^namespace tatooine::integration::vclibs {$/;"	n	namespace:tatooine::integration
vec	include/tatooine/tensor.h	/^  constexpr vec(const Ts&... ts) : parent_t{ts...} {}$/;"	f	struct:tatooine::vec
vec	include/tatooine/tensor.h	/^struct vec : tensor<Real, N> {$/;"	s	namespace:tatooine
vec2	include/tatooine/curve_to_streamline.h	/^  using vec2  = vec<Real, 2>;$/;"	t	struct:tatooine::curve_to_streamline	typeref:typename:vec<Real,2>
vec2	include/tatooine/streamsurface.h	/^  using vec2             = vec<Real, 2>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:vec<Real,2>
vec2	include/tatooine/streamsurface.h	/^  using vec2         = vec<Real, 2>;$/;"	t	struct:tatooine::streamsurface	typeref:typename:vec<Real,2>
vec2	include/tatooine/tensor.h	/^using vec2 = vec<double, 2>;$/;"	t	namespace:tatooine	typeref:typename:vec<double,2>
vec3	include/tatooine/cell_partition.h	/^  using vec3 = vec<Real, 3>;$/;"	t	function:tatooine::cell_partition	typeref:typename:vec<Real,3>
vec3	include/tatooine/curve_to_streamline.h	/^  using vec3  = vec<Real, 3>;$/;"	t	struct:tatooine::curve_to_streamline	typeref:typename:vec<Real,3>
vec3	include/tatooine/line.h	/^  using vec3            = vec<Real, 3>;$/;"	t	struct:tatooine::line	typeref:typename:vec<Real,3>
vec3	include/tatooine/tensor.h	/^using vec3 = vec<double, 3>;$/;"	t	namespace:tatooine	typeref:typename:vec<double,3>
vec4	include/tatooine/tensor.h	/^using vec4 = vec<double, 4>;$/;"	t	namespace:tatooine	typeref:typename:vec<double,4>
vec_t	include/tatooine/counterexample_sadlo.h	/^  using vec_t = vec<Real, 2>;$/;"	t	struct:tatooine::numerical::counterexample_sadlo	typeref:typename:vec<Real,2>
vec_t	include/tatooine/diff.h	/^  using vec_t = vec<real_t, num_dimensions()>;$/;"	t	struct:tatooine::derived_field
vec_t	include/tatooine/ftle.h	/^  using vec_t        = vec<real_t, V::num_dimensions()>;$/;"	t	struct:tatooine::ftle
vec_t	include/tatooine/grid_sampler.h	/^  using vec_t = vec<Real, N>;$/;"	t	struct:tatooine::grid_sampler	typeref:typename:vec<Real,N>
vec_t	include/tatooine/line.h	/^  using vec_t           = vec<Real, N>;$/;"	t	struct:tatooine::line	typeref:typename:vec<Real,N>
vec_t	include/tatooine/orbit.h	/^  using vec_t = tensor_t;$/;"	t	struct:tatooine::numerical::orbit	typeref:typename:tensor_t
vec_t	include/tatooine/polynomial_line.h	/^  using vec_t        = vec<Real, N>;$/;"	t	class:tatooine::polynomial_line	typeref:typename:vec<Real,N>
vec_t	include/tatooine/streamsurface.h	/^  using vec_t        = vec<Real, N>;$/;"	t	struct:tatooine::streamsurface	typeref:typename:vec<Real,N>
vector_operations_t	include/tatooine/integration/vclibs/rungekutta43.h	/^struct VC::odeint::vector_operations_t<tatooine::vec<Real, N>> {$/;"	m	class:VC::odeint	typeref:typename:struct
vector_property	include/tatooine/property.h	/^struct vector_property {$/;"	s	namespace:tatooine
vector_property_impl	include/tatooine/property.h	/^  vector_property_impl(const T& value = T{}) : m_value{value} {}$/;"	f	struct:tatooine::vector_property_impl
vector_property_impl	include/tatooine/property.h	/^  vector_property_impl(const vector_property_impl& other)$/;"	f	struct:tatooine::vector_property_impl
vector_property_impl	include/tatooine/property.h	/^  vector_property_impl(vector_property_impl&& other)$/;"	f	struct:tatooine::vector_property_impl
vector_property_impl	include/tatooine/property.h	/^struct vector_property_impl : vector_property<Handle> {$/;"	s	namespace:tatooine
vectorfield	include/tatooine/field.h	/^using vectorfield = field<V, Real, N, C>;$/;"	t	namespace:tatooine	typeref:typename:field<V,Real,N,C>
vectorfield	include/tatooine/streamsurface.h	/^  const auto& vectorfield() const { return m_v; }$/;"	f	struct:tatooine::streamsurface	typeref:typename:const auto &
vectorfield_at	include/tatooine/streamsurface.h	/^  vec_t vectorfield_at(Real u, Real v) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:vec_t
vectorfield_at	include/tatooine/streamsurface.h	/^  vec_t vectorfield_at(const vec2& uv) const {$/;"	f	struct:tatooine::streamsurface	typeref:typename:vec_t
vert_last_write	include/tatooine/gpu/line_shader.h.in	/^  const std::filesystem::file_time_type vert_last_write;$/;"	m	struct:tatooine::gpu::line_shader	typeref:typename:const std::filesystem::file_time_type	file:
vert_shader_path	include/tatooine/gpu/line_shader.h.in	/^  static constexpr std::string_view vert_shader_path =$/;"	m	struct:tatooine::gpu::line_shader	typeref:typename:std::string_view	file:
vertex	include/tatooine/pointset.h	/^  struct vertex : handle {$/;"	s	struct:tatooine::pointset
vertex	include/tatooine/streamsurface.h	/^  using vertex           = typename parent_t::vertex;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::vertex
vertex_at	include/tatooine/grid.h	/^  auto vertex_at(Is... is) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertex_at	include/tatooine/grid.h	/^  auto vertex_at(const std::array<Is, N>& is) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertex_at	include/tatooine/line.h	/^  auto&       vertex_at(size_t i) { return m_vertices[i]; }$/;"	f	struct:tatooine::line	typeref:typename:auto &
vertex_at	include/tatooine/line.h	/^  auto&       vertex_at(vertex_idx i) { return m_vertices[i.i]; }$/;"	f	struct:tatooine::line	typeref:typename:auto &
vertex_at	include/tatooine/line.h	/^  const auto& vertex_at(size_t i) const { return m_vertices[i]; }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
vertex_at	include/tatooine/line.h	/^  const auto& vertex_at(vertex_idx i) const { return m_vertices[i.i]; }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
vertex_begin	include/tatooine/grid.h	/^  constexpr auto vertex_begin() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertex_begin	include/tatooine/grid.h	/^  constexpr auto vertex_begin(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertex_container	include/tatooine/grid.h	/^struct grid<Real, N>::vertex_container {$/;"	s	class:tatooine::grid
vertex_container	include/tatooine/pointset.h	/^  struct vertex_container {$/;"	s	struct:tatooine::pointset
vertex_edge_link_t	include/tatooine/edgeset.h	/^  using vertex_edge_link_t = vertex_prop<std::vector<edge>>; $/;"	t	class:tatooine::edgeset	typeref:typename:vertex_prop<std::vector<edge>>
vertex_end	include/tatooine/grid.h	/^  constexpr auto vertex_end() const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertex_end	include/tatooine/grid.h	/^  constexpr auto vertex_end(std::index_sequence<Is...> \/*is*\/) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertex_idx	include/tatooine/line.h	/^  struct vertex_idx : handle {$/;"	s	struct:tatooine::line
vertex_iterator	include/tatooine/pointset.h	/^    vertex_iterator(const vertex_iterator& other) : v{other.v}, ps{other.ps} {}$/;"	f	struct:tatooine::pointset::vertex_iterator
vertex_iterator	include/tatooine/pointset.h	/^    vertex_iterator(vertex _v, const pointset* _ps) : v{_v}, ps{_ps} {}$/;"	f	struct:tatooine::pointset::vertex_iterator
vertex_iterator	include/tatooine/pointset.h	/^  struct vertex_iterator$/;"	s	struct:tatooine::pointset
vertex_iterator	include/tatooine/subgrid.h	/^struct subgrid<Real, N>::vertex_iterator {$/;"	s	class:tatooine::subgrid
vertex_list_it_t	include/tatooine/streamsurface.h	/^  using vertex_list_it_t = typename parent_t::vertex_list_it_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::vertex_list_it_t
vertex_list_it_t	include/tatooine/streamsurface.h	/^  using vertex_list_it_t = typename vertex_list_t::const_iterator;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:vertex_list_t::const_iterator
vertex_list_t	include/tatooine/streamsurface.h	/^  using vertex_list_t    = std::list<vertex>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:std::list<vertex>
vertex_list_t	include/tatooine/streamsurface.h	/^  using vertex_list_t    = typename parent_t::vertex_list_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::vertex_list_t
vertex_prop	include/tatooine/edgeset.h	/^  using vertex_prop = typename parent_t::template vertex_prop<T>;$/;"	t	class:tatooine::edgeset	typeref:typename:parent_t::template vertex_prop<T>
vertex_prop	include/tatooine/mesh.h	/^  using vertex_prop = typename parent_t::template vertex_prop<T>;$/;"	t	class:tatooine::mesh	typeref:typename:parent_t::template vertex_prop<T>
vertex_prop	include/tatooine/parameterized_mesh.h	/^  using vertex_prop = typename parent_t::template vertex_prop<T>;$/;"	t	struct:tatooine::parameterized_mesh	typeref:typename:parent_t::template vertex_prop<T>
vertex_properties	include/tatooine/pointset.h	/^  const auto& vertex_properties() const { return m_vertex_properties; }$/;"	f	struct:tatooine::pointset	typeref:typename:const auto &
vertex_property	include/tatooine/line.h	/^  auto& vertex_property(const std::string& name) {$/;"	f	struct:tatooine::line	typeref:typename:auto &
vertex_property	include/tatooine/line.h	/^  const auto& vertex_property(const std::string& name) const {$/;"	f	struct:tatooine::line	typeref:typename:const auto &
vertex_property	include/tatooine/pointset.h	/^  auto& vertex_property(const std::string& name) {$/;"	f	struct:tatooine::pointset	typeref:typename:auto &
vertex_property	include/tatooine/pointset.h	/^  const auto& vertex_property(const std::string& name) const {$/;"	f	struct:tatooine::pointset	typeref:typename:const auto &
vertex_property_container_t	include/tatooine/line.h	/^  using vertex_property_container_t =$/;"	t	struct:tatooine::line	typeref:typename:std::map<std::string,std::unique_ptr<deque_property<vertex_idx>>>
vertex_property_container_t	include/tatooine/pointset.h	/^  using vertex_property_container_t =$/;"	t	struct:tatooine::pointset	typeref:typename:std::map<std::string,std::unique_ptr<vector_property<vertex>>>
vertex_property_t	include/tatooine/line.h	/^  using vertex_property_t = deque_property_impl<vertex_idx, T>;$/;"	t	struct:tatooine::line	typeref:typename:deque_property_impl<vertex_idx,T>
vertex_property_t	include/tatooine/line.h	/^  using vertex_property_t = typename parent_t::template vertex_property_t<T>;$/;"	t	struct:tatooine::parameterized_line	typeref:typename:parent_t::template vertex_property_t<T>
vertex_property_t	include/tatooine/pointset.h	/^  using vertex_property_t = vector_property_impl<vertex, T>;$/;"	t	struct:tatooine::pointset	typeref:typename:vector_property_impl<vertex,T>
vertex_property_t	include/tatooine/simple_tri_mesh.h	/^  using vertex_property_t = typename parent_t::template vertex_property_t<T>;$/;"	t	class:tatooine::simple_tri_mesh	typeref:typename:parent_t::template vertex_property_t<T>
vertex_range_t	include/tatooine/streamsurface.h	/^  using vertex_range_t   = std::pair<vertex_list_it_t, vertex_list_it_t>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:std::pair<vertex_list_it_t,vertex_list_it_t>
vertex_range_t	include/tatooine/streamsurface.h	/^  using vertex_range_t   = typename parent_t::vertex_range_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::vertex_range_t
vertex_seq_t	include/tatooine/grid.h	/^  using vertex_seq_t  = std::deque<vertex_t>;$/;"	t	class:tatooine::grid	typeref:typename:std::deque<vertex_t>
vertex_set	include/tatooine/grid.h	/^    using vertex_set = std::set<vertex_t>;$/;"	t	function:tatooine::grid::mutate_seq	typeref:typename:std::set<vertex_t>
vertex_t	include/tatooine/grid.h	/^  using vertex_t      = grid_vertex<Real, N>;$/;"	t	class:tatooine::grid	typeref:typename:grid_vertex<Real,N>
vertex_t	include/tatooine/grid_edge.h	/^  using vertex_t = grid_vertex<Real, N>;$/;"	t	struct:tatooine::grid_edge	typeref:typename:grid_vertex<Real,N>
vertex_vec_t	include/tatooine/streamsurface.h	/^  using vertex_vec_t     = std::vector<vertex>;$/;"	t	struct:tatooine::front_evolving_streamsurface_discretization	typeref:typename:std::vector<vertex>
vertex_vec_t	include/tatooine/streamsurface.h	/^  using vertex_vec_t     = typename parent_t::vertex_vec_t;$/;"	t	struct:tatooine::simple_discretization	typeref:typename:parent_t::vertex_vec_t
vertices	include/tatooine/edgeset.h	/^  auto&       vertices(edge e) { return at(e); }$/;"	f	class:tatooine::edgeset	typeref:typename:auto &
vertices	include/tatooine/edgeset.h	/^  const auto& vertices(edge e) const { return at(e); }$/;"	f	class:tatooine::edgeset	typeref:typename:const auto &
vertices	include/tatooine/grid.h	/^  auto vertices() const { return vertex_container{this}; }$/;"	f	class:tatooine::grid	typeref:typename:auto
vertices	include/tatooine/grid.h	/^  auto vertices(const vertex_t& v) const {$/;"	f	class:tatooine::grid	typeref:typename:auto
vertices	include/tatooine/line.h	/^  auto&       vertices() { return m_vertices; }$/;"	f	struct:tatooine::line	typeref:typename:auto &
vertices	include/tatooine/line.h	/^  const auto& vertices() const { return m_vertices; }$/;"	f	struct:tatooine::line	typeref:typename:const auto &
vertices	include/tatooine/mesh.h	/^  auto&          vertices(face f) { return at(f); }$/;"	f	class:tatooine::mesh	typeref:typename:auto &
vertices	include/tatooine/mesh.h	/^  const auto&    vertices(face f) const { return at(f); }$/;"	f	class:tatooine::mesh	typeref:typename:const auto &
vertices	include/tatooine/pointset.h	/^  auto vertices() const { return vertex_container{this}; }$/;"	f	struct:tatooine::pointset	typeref:typename:auto
view_matrix	include/tatooine/gpu/first_person_window.h	/^  auto view_matrix() {$/;"	f	struct:tatooine::first_person_window	typeref:typename:auto
vorticity	include/tatooine/vorticity_field.h	/^auto vorticity(const field<V, Real, 3, 3>& vf) {$/;"	f	namespace:tatooine	typeref:typename:auto
vorticity_field	include/tatooine/vorticity_field.h	/^  vorticity_field(const field<V, Real, 3, 3>& v) : m_vf{v.as_derived()} {}$/;"	f	class:tatooine::vorticity_field
vorticity_field	include/tatooine/vorticity_field.h	/^class vorticity_field$/;"	c	namespace:tatooine
vtk	include/tatooine/vtk_legacy.h	/^namespace vtk {$/;"	n	namespace:tatooine
workgroup_layout	include/tatooine/gpu/reduce.h.in	/^  static auto workgroup_layout(std::stringstream& shadersourcestream,$/;"	f	struct:tatooine::gpu::reduce_buffer_shader	typeref:typename:auto	file:
workgroup_layout	include/tatooine/gpu/reduce.h.in	/^  static auto workgroup_layout(std::stringstream& shadersourcestream,$/;"	f	struct:tatooine::gpu::reduce_tex_shader	typeref:typename:auto	file:
write	include/tatooine/mesh.h	/^  void write(const std::string& path) {$/;"	f	class:tatooine::mesh	typeref:typename:void
write_binary	include/tatooine/vtk_legacy.h	/^inline void write_binary(std::ostream &stream, const char c) {$/;"	f	namespace:tatooine::vtk	typeref:typename:void
write_binary	include/tatooine/vtk_legacy.h	/^inline void write_binary(std::ostream &stream, const std::string &str) {$/;"	f	namespace:tatooine::vtk	typeref:typename:void
write_cell_data	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_cell_data(size_t i) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_cell_types	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_cell_types($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_cells	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_cells($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_data	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_data($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_dimensions	include/tatooine/vtk_legacy.h	/^  void write_dimensions(size_t dimx, size_t dimy, size_t dimz) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_header	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_header() {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_indices	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_indices($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_line_container_to_vtk	include/tatooine/line.h	/^void write_line_container_to_vtk(const LineCont& lines, const std::string& path,$/;"	f	namespace:tatooine::detail	typeref:typename:void
write_lines	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_lines($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_normals	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_normals($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_origin	include/tatooine/vtk_legacy.h	/^  void write_origin(double orgx, double orgy, double orgz) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_png	include/tatooine/grid_sampler.h	/^  void write_png(const std::string& filepath) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
write_png	include/tatooine/multidim_array.h	/^void write_png(const dynamic_multidim_array<Real>& arr,$/;"	f	namespace:tatooine	typeref:typename:void
write_png	include/tatooine/write_png.h	/^void write_png(const std::string& filepath, std::vector<T> data, size_t width,$/;"	f	namespace:tatooine	typeref:typename:void
write_point_data	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_point_data(size_t i) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_points	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_points($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_points	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_points(const std::vector<vec<Real, 3>> &points) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_polygons	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_polygons($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_prop_to_vtk	include/tatooine/line.h	/^  static void write_prop_to_vtk($/;"	f	struct:tatooine::line	typeref:typename:void
write_scalars	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_scalars($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_scalars	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_scalars(const std::string &      name,$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_spacing	include/tatooine/vtk_legacy.h	/^  void write_spacing(double spax, double spay, double spaz) {$/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_tensors	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_tensors($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_texture_coordinates	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_texture_coordinates($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_triangle_strips	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_triangle_strips($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_vectors	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_vectors($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_vertices	include/tatooine/vtk_legacy.h	/^void legacy_file_writer::write_vertices($/;"	f	class:tatooine::vtk::legacy_file_writer	typeref:typename:void
write_vtk	include/tatooine/grid_sampler.h	/^  void write_vtk(const std::string& filepath) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
write_vtk	include/tatooine/line.h	/^  void write_vtk(const std::string& path,$/;"	f	struct:tatooine::line	typeref:typename:void
write_vtk	include/tatooine/line.h	/^void write_vtk(const std::list<line<Real, N>>& lines, const std::string& path,$/;"	f	namespace:tatooine	typeref:typename:void
write_vtk	include/tatooine/line.h	/^void write_vtk(const std::vector<line<Real, N>>& lines, const std::string& path,$/;"	f	namespace:tatooine	typeref:typename:void
write_vtk	include/tatooine/simple_tri_mesh.h	/^  bool write_vtk(const std::string& path,$/;"	f	class:tatooine::simple_tri_mesh	typeref:typename:bool
write_vtk_1	include/tatooine/grid_sampler.h	/^  void write_vtk_1(const std::string& filepath) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
write_vtk_2	include/tatooine/grid_sampler.h	/^  void write_vtk_2(const std::string& filepath) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
write_vtk_3	include/tatooine/grid_sampler.h	/^  void write_vtk_3(const std::string& filepath) {$/;"	f	struct:tatooine::grid_sampler	typeref:typename:void
x	include/tatooine/symbolic_field.h	/^  static auto& x(size_t i) { return symbol::x(i); }$/;"	f	struct:tatooine::symbolic::field	typeref:typename:auto &
x_fastest	include/tatooine/index_ordering.h	/^struct x_fastest {$/;"	s	namespace:tatooine
x_slowest	include/tatooine/index_ordering.h	/^struct x_slowest {$/;"	s	namespace:tatooine
zeros	include/tatooine/multidim_array.h	/^  static auto zeros(Resolution... resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
zeros	include/tatooine/multidim_array.h	/^  static auto zeros(const std::array<UInt, N>& resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
zeros	include/tatooine/multidim_array.h	/^  static auto zeros(const std::vector<UInt>& resolution) {$/;"	f	class:tatooine::dynamic_multidim_array	typeref:typename:auto
zeros	include/tatooine/multidim_array.h	/^  static constexpr auto zeros() { return this_t{tatooine::zeros}; }$/;"	f	class:tatooine::static_multidim_array	typeref:typename:auto
zeros	include/tatooine/multidim_array.h	/^static constexpr zeros_t zeros;$/;"	v	namespace:tatooine	typeref:typename:zeros_t
zeros	include/tatooine/tensor.h	/^  static constexpr auto zeros() { return this_t{fill<Real>{0}}; }$/;"	f	struct:tatooine::tensor	typeref:typename:auto
zeros_t	include/tatooine/multidim_array.h	/^struct zeros_t {};$/;"	s	namespace:tatooine
~deque_property	include/tatooine/property.h	/^  virtual ~deque_property() {}$/;"	f	struct:tatooine::deque_property
~vector_property	include/tatooine/property.h	/^  virtual ~vector_property() {}$/;"	f	struct:tatooine::vector_property
